
Введение
В настоящее время, несмотря на повышение компьютеризации общества, зачастую задачи документооборота решаются вручную, без использования современных вычислительных средств. Связано это, зачастую с нежеланием пользователей - исполнителей осваивать новые технологии обработки данных, их недостаточной квалификацией, нежеланием руководства тратить значительное количество времени и материальных средств на ввод новых технологией. Отчасти эта позиция оправдана, так как не всегда использование новых средств себя полностью оправдывает и окупает. Как правило, это связано с ошибками при проектировании и вводе в эксплуатацию систем обработки данных.
Существующий опыт создания ИС показывает, что реальная автоматизация в большинстве случаев не приводит к сокращению персонала, а снижение затрат является лишь косвенным фактором автоматизации. Главная задача автоматизации - приобретение принципиально новых качеств. Процесс автоматизации осуществляется в различных масштабах, т.е. от отдельных задач до создания функционально полных автоматизированных ИС. В данной работе предпринята попытка в достаточной мере автоматизировать процесс учета договоров.
О своевременности и актуальности рассматриваемой проблемы говорит тот факт, что большую часть своего времени должностные лица тратят на оформление различной документации и отчетов. Выгоды, выражающиеся в экономии времени при работе, и отсутствие предложений в данной сфере обеспечивают высокую потребность в данном продукте.
Цель работы: разработать автоматизированную систему (АС) для учета договоров и контроля за их исполнением, направленную на повышение эффективности договорной работы и управления контрактами в организации.

Задачи работы:
 исследование и анализ существующих решений по автоматизации учета договоров и контроля за их исполнением;
 определение требований к разрабатываемой системе со стороны пользователей и организации;
 проектирование структуры базы данных и архитектуры системы;
 разработка алгоритмов работы основных функциональных модулей системы;
 реализация прототипа системы на основе выбранных программных средств.
Результаты выпускной квалификационной работы могут значительно улучшить процесс учета и контроля договоров внутри организации, снизить риски, связанные с невыполнением условий договоров, а также повысить общие показатели работы предприятия за счет автоматизации рутинных задач, что приведет к освобождению ресурсов для решения более сложных и творческих задач.
Объект исследования: процесс учета договоров и контроля за их исполнением в организации.

1 Теория проектирования АИС
1.1 Понятие и классификация АИС
АИС представляет собой совокупность информации, экономико-математических методов и моделей, технических, программных, технологических средств и специалистов, предназначенную для обработки информации и принятия управленческих решений.
АИС являются одним из наиболее распространенных классов систем обработки данных. Они используют ресурсы нескольких категорий - средства вычислительной техники, системное и прикладное программное обеспечение, информационные, лингвистические и человеческие ресурсы. К категории информационных систем часто относят многие системы обработки данных, которые не только поддерживают информационную модель предметной области, но и позволяют решать на ее основе некоторые классы задач управленческого, исследовательского, конструкторского или иного характера. Конкретные задачи, которые должны решаться информационной системой, зависят от той прикладной области, для которой предназначена система. Области применения информационных приложений разнообразны: банковское дело, страхование, медицина, транспорт, образование и т. д.
Первые информационные системы появились в 50-х гг. В 70-х - начале 80-гг. информационные системы начинают широко использоваться в качестве управленческого контроля, поддерживающего и ускоряющего процесс принятия решений. К концу 80-х гг. концепция использования информационных систем вновь изменяется, они становятся стратегическим источником информации и используются на всех уровнях организации любого профиля [1]. Основные требования к АИС:

 интегрируемость - способность взаимодействия системы с вновь подключаемыми компонентами или подсистемами; ? масштабируемость - возможность расширения системных ресурсов и производительной мощности; ? управляемость - возможность гибкого управления системой; ? адаптивность - возможность системы приспосабливаться к условиям конкретной предметной области; ? используемость - возможность реализации заложенных в систему функций; ? реактивность - способность системы реагировать на внутренние и внешние воздействия; ? безопасность - возможность предотвращения разрушения системы в результате несанкционированного доступа. Качество АИС определяется совокупностью свойств, характеризующих способность АИС удовлетворять потребности ее пользователей. Выделяют функциональные, экономические и эксплуатационные показатели качества АИС. Функциональные показатели характеризуют: функциональную полноту, адаптивность и корректность АИС. Экономические показатели - это стоимость создания или приобретения АИС, затраты на её внедрение и эксплуатацию, эффект, получаемый от функционирования АИС [2]. Эксплуатационные - это показатели, определяющие набор требований к техническим средствам, характеризующие возможность работы в сети, характеризующие легкость и простоту установки, надежность программного обеспечения, удобство его освоения, качество помощи и пользовательского интерфейса, возможность защиты данных.
Определяя АИС как организованную для достижения общей цели совокупность специалистов, средств вычислительной и другой техники, математических методов и моделей, интеллектуальных продуктов и их описаний, а также способов и порядка взаимодействия указанных компонентов,

следует выделить, что главным звеном и управляющим субъектом в перечисленном комплексе элементов был и остается человек, специалист.
В современных условиях функционирования информационных технологий нет четкого различия между пользователем системы и разработчиком. Сегодня существуют готовые инструментальные программные средства, которые позволяют методом интерпретации быстро разрабатывать собственные программно-ориентированные продукты - пакеты прикладных программ. Для этого нужно быть хорошим специалистом в своей области и в меньшей степени владеть программированием.
1.2 Структура АИС
АИС, как всякая другая система, состоит из элементов (подсистем), находящихся в определенных отношениях друг с другом. Множество этих отношений совместно с элементами образуют структуру АИС. Выделяют функциональную и обеспечивающую части АИС.
Функциональная часть представляет собой совокупность формализованных функциональных задач, обеспечивающих реализацию определенных функций управления. Она обслуживает определенные виды деятельности экономического объекта, характерные для его структурных подразделений или функций управления. Состав функциональной части АИС во многом определяется особенностями экономического объекта: его отраслевой принадлежностью, формой собственности, размером, характером деятельности.
Обеспечивающая часть АИС состоит из подсистем, являющихся общими для всей АИС, независимо от состава ее функциональной части. В состав обеспечивающей части входят подсистемы: программного обеспечения, информационного обеспечения, технического обеспечения, организационного

обеспечения, математического обеспечения, лингвистического обеспечения (рис. 1) [2].
Рисунок 1 - Структура информационной системы как совокупность обеспечивающих подсистем
Математическое обеспечение - это совокупность математических методов, моделей и алгоритмов обработки информации.
К средствам математического обеспечения относятся:
 средства моделирования процессов управления;
 типовые задачи управления;
 методы математического программирования, математической статистики, теории массового обслуживания и др.
Программное обеспечение - это совокупность программ, реализующих функции и задачи АИС и обеспечивающих устойчивую работу технических средств.
В состав программного обеспечения входят общесистемные и специальные программные продукты, а также техническая документация.
К общесистемному программному обеспечению относятся комплексы программ, ориентированных на пользователей и предназначенных для решения типовых задач обработки информации. Они служат для расширения функциональных возможностей компьютеров, контроля и управления процессом обработки данных.
Специальное программное обеспечение представляет собой совокупность программ, разработанных при создании конкретной информационной системы.
Информационная система
Техническое обеспечение
Математическое обеспечение
Программное обеспечение
Информационное обеспечение
Организационное обеспечение
Правовое обеспечение

В его состав входят пакеты прикладных программ, реализующие разработанные модели разной степени адекватности, отражающие функционирование реального объекта.
Техническая документация на разработку программных средств должна содержать описание задач, задание на алгоритмизацию, экономико-математическую модель задачи, контрольные примеры.
Информационное обеспечение - это совокупность решений по объемам, размещению и формам организации информации, циркулирующей в АИС.
Назначение подсистемы информационного обеспечения состоит в своевременном формировании и выдаче достоверной информации для принятия управленческих решений.
Схемы информационных потоков отражают маршруты движения информации, ее объемы, места возникновения первичной информации и использования результатной информации.
Методология построения баз данных базируется на теоретических основах их проектирования. Концепция методологии представлена в виде двух последовательно реализуемых на практике этапов:
1-й этап - обследование всех функциональных подразделений фирмы с целью:
 понять специфику и структуру ее деятельности;
 построить схему информационных потоков;
 проанализировать существующую систему документооборота;
 определить информационные объекты и соответствующий состав реквизитов.
2-й этап - построение концептуальной информационно-логической модели данных для обследованной на 1-м этапе сферы деятельности. В этой модели должны быть установлены и оптимизированы все связи между объектами и их реквизитами.

Техническое обеспечение - это комплекс технических средств, обеспечивающих работу АИС (средства сбора, регистрации, передачи, обработки, отображения, размножения информации).
Организационное обеспечение - совокупность методов и средств, регламентирующих деятельность персонала в условиях функционирования АИС.
Правовое обеспечение - это совокупность правовых норм, и документов, регламентирующих правоотношения при создании и внедрения АИС.
В состав правового обеспечения входят законы, указы, постановления государственных органов власти, приказы, инструкции и другие нормативные документы министерств, ведомств, организаций, местных органов власти. В правовом обеспечении можно выделить общую часть, регулирующую функционирование любой информационной системы, и локальную часть, регулирующую функционирование конкретной системы.
Лингвистическое обеспечение включает совокупность научно-технических терминов и других языковых средств, используемых в АИС (традиционные языки: естественные, математические, алгоритмические, языки моделирования; языки специального назначения: информационно-поисковые языки, языки СУБД, языки операционных систем и входные языки пакетов прикладных программ).
Перечисленные подсистемы различаются по структурному признаку, т.е. каждой обеспечивающей подсистеме соответствует совокупность элементов независимо от сферы применения.
1.3 Этапы проектирования ИС
Разработка ИС - это трудоемкий, длительный и динамический процесс, состоящих из нескольких этапов.

Проектирование имеет целью обеспечить эффективное функционирование ИС и её взаимодействие со специалистами, использующими в сфере деятельности конкретного экономического объекта ПЭВМ и развитые средства коммуникации для выполнения своих профессиональных задач и принятия управленческих решений. Проектированием ИС называется процесс составления описания еще не существующей системы на разных языках и с различной степенью детализации, в ходе, которого осуществляется оптимизация проектных решений. В процессе детализации описаний наступает момент, когда имеющиеся описания позволяют создать действующую систему и наступает период эксплуатации ИС. Жизненный цикл (ЖЦ) - период создания и использования ИС, охватывающей ее различные состояния, начиная с момента возникновения необходимости в данной информационной системе и заканчивая моментом ее полного выхода из употребления у пользователей. Жизненный цикл ИС позволяет выделить четыре основные стадии: 1-й этап - сбор материалов для проектирования - формирование требований, изучение объекта проектирование, разработка и выбор варианта концепции системы; 2-й этап - анализ материалов и формирование документации - создание и утверждение технико-экономического обоснования и технического задания на проектирование системы на основе анализа материалов обследования, собранных на первом этапе. 3-й этап - техническое проектирование, где ведется поиск наиболее рациональных проектных решений по всем аспектам разработки, создаются и описываются все компоненты системы, а результаты работы отражаются в техническом проекте; 4-й этап - рабочее проектирование, в процессе которого осуществляется разработка и доводка программ, корректировка структур баз данных, создание документации на установку технических средств и инструкций по их эксплуатации, подготовка для каждого пользователя системы обширного

инструкционного материала, оформленного в виде должностных инструкций исполнителям-специалистам, реализующим свои профессиональные функции с использованием технических средств управления. Технический и рабочий проекты могут объединяться в единый документ - техно-рабочий проект. Главная особенность разработки ИС состоит в концентрации сложности на стадиях предпроектного обследования и проектирования и относительно невысокой сложности и трудоемкости последующих этапов. Более того, нерешенные вопросы и ошибки, допущенные на этапах анализа и проектирования, порождают на этапах внедрения и эксплуатации трудные, часто неразрешимые проблемы и, в конечном счете, приводят к отказу от использования материалов проекта [3].
1.4 Корпоративные информационные системы
Эволюция мировой индустрии ИТ включает четыре этапа. Начальный этап соответствует использованию разнотипных и плохо совместимых друг с другом мини-ЭВМ и мейнфреймов в интересах ограниченных производственных коллективов, четвертый этап рассматривается как Информационное Общество, в котором информационные услуги будут доступны любому клиенту. Между этими этапами лежат разнообразные сетевые приложения, характеризующие второй и третий этапы. В развитии ИС также выделяют четыре этапа:
 первоначально гегемоном была централизованная модель обработки на базе мейнфреймов;
 на втором этапе эволюции ИС на смену централизованной модели на базе мейнфреймов в связи с бурным развитием и массовым использованием персональных компьютеров (ПК) в сетях стала преобладать распределенная архитектура одноранговых сетей ПК;

 затем, на третьем этапе, началось возвратное движение к централизации ресурсов системы на основе получивших в настоящее время всеобщее признание технологии «клиент-сервер» и архитектуры открытых систем;
 отличительная черта приходящего четвертого этапа - это иерархическая организация, где централизованная обработка и единое управление ресурсами ИС на верхнем уровне сочетается с распределенной обработкой на нижнем. Такая организация отвечает идеологии корпоративных Интернет\Экстранет\Интранет-технологий, она обеспечивает: полное использование потенциала ПК и среды распределенной обработки в сочетании с управляемостью информационными ресурсами в корпоративном смысле, а потому именно за этой идеологией будущее в концепциях создания и использования ИС в образовании и науке.
Для использования в образовании, отличающимся многоранговостью и обширной тематической раздробленностью предметных областей изучения, упомянутая концепция четвертого этапа эволюции ИС хороша еще и тем, что среди ее особенностей модульное построение информационной системы. Это позволяет выстраивать ИС по многомодульному принципу с четким делением по назначению устойчивых модульных наполнения ядер ИС и изменяющимся гибким составом гипермодульных информационных окружений [4].
Одним из важнейших аспектов развития и последующего использования продуктов индустрии ИТ является корреляция между ИТ и производственной структурой, использующей ее в интересах реализуемого бизнес-процесса (бизнес-стратегии).
Бизнес-стратегия - это набор стратегий, рынков, предписаний, технологий производства продуктов и ресурсов, выбранных корпорацией для достижения поставленных целей. Информационная платформа, в свою очередь, охватывает компьютерные технологии, применяемые в корпорации, и способы, которыми эти технологии могут быть использованы для повышения конкурентоспособности выпускаемой продукции. Информационная архитектура

- это совокупность конкретных архитектур и продуктов, выбранных для реализации информационной платформы.
Применительно к оценке роли бизнес-стртегии в концептуальном моделировании ИС в образовании уместно сделать несколько следующих реплик:
 существует двунаправленное воздействие бизнес-стратегии корпорации и ее информационной платформы;
 если бизнес-стратегия или информационная платформа меняется, то соответствующая наследуемая ИТ-архитектура также требует изменений;
 соответствие между бизнес-структурой и информационной платформой является решающим фактором успеха в деятельности корпорации, но на его достижение могут уйти годы. Этот вывод является самым главным в оценке соответствия целей, возможностей, перспектив и целесообразности создания той или иной ИС в образовании.
Современная корпоративная ИС - это модель распределенной обработки, дополненная новым элементом - узлом концентрации, превратившим ее по сути в централизованную сеть. Сообразно взглядам специалистам на пришедшем рубеже столетий выделяются три основных типа или модели ИС с централизованной сетевой организацией: большая, средняя и малая. Отличительной особенностью большой модели ИС является наличие двух уровней сетей: базовой сети, связывающей информационные узлы концентрации, и множества локальных сетей, обеспечивающих пользователям взаимный доступ к корпоративным ресурсам. Средняя и малая ИС утрачивают эту особенность, переходя от двухуровневой архитектуры к одноуровневой, а в малых ИС - к сугубо ограниченной обеспечением местной автономной локальной сети вне взаимодействия этих ИС с другими ИС в других сетях, включая мировую глобальную систему WWW в Интернете [4].

2 Аналитическая часть
2.1 Анализ предметной области
Анализ предметной области при проектировании автоматизированной системы (АС) учёта договоров и контроля за их исполнением начинается с определения целей, которые такая система должна достичь, и задач, которые потребуется решить. Основной целью является создание эффективного и надежного инструмента для управления договорами, который позволяет автоматизировать процессы их создания, хранения, учёта и контроля за исполнением. Это существенно облегчит работу сотрудников, снизит риски ошибок и обеспечит своевременное выполнение условий договоров. Начнем с постановки задачи. На текущий момент управление договорами в организации осуществляется вручную с использованием табличных документов и бумажных картотек. Такой подход имеет несколько значительных недостатков, среди которых: высокая вероятность потери документов или пропуска важного срока, трудозатраты на поиск и анализ информации, трудности в контроле за выполнением условий договоров и в поддержке актуальной информации. В связи с этим возникает необходимость в создании системы, которая позволила бы автоматизировать ряд ключевых функций, связанных с управлением договорами. Одной из важнейших функций, подлежащих автоматизации, является создание и хранение договоров. Внедрение автоматизированной системы позволит сотрудникам организации формировать договора в электронном виде, используя шаблоны документов, что ускорит и упростит процесс создания новых контрактов. Все договоры будут храниться централизованно в базе данных, что существенно сократит время на их поиск и обеспечит сохранность информации.

Не менее важной задачей является автоматизация процесса учёта и обработки данных по договорам. Система должна позволять легко вносить информацию по каждому контракту, такую как стороны договора, суммы, даты подписания и сроки выполнения. Автоматизированный учёт позволит минимизировать вероятность ошибок при внесении данных и облегчит доступ к информации в любой момент времени. Контроль за исполнением договоров – ещё одна ключевая функция, требующая автоматизации. Система будет оповещать ответственных сотрудников о наступлении значимых событий, таких как срок выполнения обязательств по договору или необходимость продления контракта. Это позволит своевременно принимать меры для исполнения условий договора и предотвратит возможные проблемы, связанные с нарушением сроков. Аналитический функционал автоматизированной системы также играет важную роль. Он позволит проводить анализ данных по договорам, генерировать отчёты и статистику, что поможет руководству принимать обоснованные управленческие решения. Например, можно будет оценить эффективность и надёжность контрагентов, анализировать динамику заключения и исполнения договоров, прогнозировать риски и оптимизировать процесс управления контрактами. Кроме того, система должна обеспечивать разграничение доступа к данным и возможность аудита действий пользователей, что повысит уровень безопасности информации. Важным является и удобство использования системы, поэтому интерфейс должен быть интуитивно понятным и доступным для сотрудников с различным уровнем технической подготовки. Подытоживая, создание автоматизированной системы учёта договоров и контроля за их исполнением направлено на достижение ряда ключевых целей – повышение эффективности работы сотрудников, снижение рисков, связанных с управлением договорами, обеспечение надёжного хранения информации и поддержка принятия управленческих решений. Система будет включать в себя функции автоматизированного создания и хранения договоров, учёта и

обработки данных, контроля за выполнением условий контрактов, а также аналитический функционал для проведения анализа и формирования отчётов. Реализация данного проекта существенно облегчит процесс управления договорами в организации, повысит их прозрачность и контроль за выполнением условий, что в свою очередь приведет к улучшению общего уровня управления бизнес-процессами в организации.
2.2 Проектирование ИС
Проектирование и разработка АС учета договоров и контроля за их исполнением требует всестороннего подхода и тщательной проработки на каждом этапе. Процесс включает в себя анализ требований, проектирование архитектуры, разработку, тестирование, внедрение и поддержку системы. Каждый из этих этапов имеет свои особенности и задачи, и успешная реализация проекта возможна только при условии четкой координации работы всех участников процесса, от бизнес-аналитиков до разработчиков и специалистов по поддержке. В результате внедрения такой системы организация сможет значительно повысить эффективность управления договорами, снизить риски и улучшить контроль за выполнением контрактов, что приведет к повышения уровня управления бизнес-процессами и их оптимизации. Проектирование информационной системы – это сложный и многоэтапный процесс, включающий различные аспекты, начиная от анализа требований и заканчивая вводом системы в эксплуатацию и её последующей поддержкой. В рамках выпускной квалификационной работы на тему "Проектирование АС учета договоров и контроля за их исполнением" этот процесс можно разбить на несколько ключевых этапов, каждый из которых имеет свои особенности и задачи [3].

Первый этап – это сбор и анализ требований. На этом этапе необходимо провести интервью с представителями различных подразделений организации, чтобы понять их потребности и проблемы, связанные с текущим процессом управления договорами. Специалисты выявляют, какие именно задачи должно решить новое программное обеспечение, какие функции и возможности оно должно включать. Результатом этого этапа является документ с требованиями, который будет служить основой для дальнейших этапов проектирования и разработки системы. Следующий этап – проектирование информационной архитектуры системы. Этот этап включает в себя определение всех ключевых компонентов системы и их взаимодействие. При проектировании АС учета договоров и контроля за их исполнением необходимо учитывать особенности бизнес-процессов организации. Важно оптимизировать работу с данными договорами, предусмотреть возможности для быстрого поиска нужной информации, а также обеспечить надежное хранение и защиту данных. Архитектура системы должна быть гибкой и масштабируемой, чтобы она могла адаптироваться под меняющиеся требования и расти вместе с бизнесом. Рисунок 2 – Диаграмма классов На базе определенной архитектуры разрабатывается техническое задание (ТЗ), детальный документ, описывающий все аспекты системы: её функциональные возможности, требования к производительности, интерфейсы,

безопасность и прочее. ТЗ служит руководством для разработчиков и позволяет избегать недоразумений и недочетов в процессе создания системы. После завершения этапа проектирования приступают к этапу разработки. Разработка может быть разделена на несколько итераций или спринтов, на каждом из которых реализуются и тестируются отдельные модули системы. В случае системы учета договоров могут быть выделены модули для создания и хранения договоров, модули для учета и обработки данных, модули для контроля за исполнением договоров и аналитики. Каждая итерация завершается тестированием, что позволяет выявлять и исправлять ошибки на ранних стадиях разработки. Рисунок 3 – Диаграмма прецедентов Когда разработка основных модулей завершена, система проходит этап интеграции и системного тестирования. На этом этапе проверяется корректность взаимодействия всех компонентов системы между собой, проводятся нагрузочные тесты для проверки производительности и надежности системы в условиях реально возможных эксплуатационных нагрузок. Важно убедиться, что система справляется с обработкой большого объема данных, и что пользователи смогут комфортно взаимодействовать с ней даже при высоких нагрузках.

Рисунок 4 – Диаграмма IDEF0 Одним из важнейших аспектов проектирования и разработки информационной системы является обеспечение безопасности данных. Для системы учета договоров это особенно актуально, так как данные договоров часто содержат конфиденциальную информацию, требующую защиты от несанкционированного доступа.

Рисунок 5 - Структура базы данных После завершения этапов разработки и тестирования наступает этап внедрения системы. Внедрение включает в себя настройку системы на рабочем сервере, перенос данных из старых систем, обучение сотрудников, которые будут работать с новой системой. Очень важно, чтобы переход на новое программное обеспечение был максимально плавным, без сбоев и простоев в работе организации. Для этого часто используется поэтапное внедрение с первоначальным использованием системы на ограниченной группе пользователей и постепенным расширением до всех заинтересованных сторон.

2.3 Выбор и обоснование программных средств
Использование Django, HTML/CSS и SQLite дает возможность обеспечить высокую степень надежности и безопасности системы, что является критически важным при работе с данными договоров. Django предоставляет многочисленные встроенные механизмы защиты, включая защиту от SQL-инъекций, межсайтовых скриптинговых атак (XSS) и безопасности от подделки межсайтовых запросов (CSRF). Эти механизмы позволяют разработчикам сосредоточиться на бизнес-логике приложения, не опасаясь за безопасность данных.
Возможности расширения и модификации системы также являются важным аспектом при выборе этих технологий. Django имеет большое сообщество разработчиков и богатый репозиторий дополнительных модулей и плагинов, что позволяет быстро и эффективно расширять функционал системы, добавляя новые возможности без необходимости разработки их с нуля. Это особенное важно для проектов, которые могут расширяться или видоизменяться в зависимости от меняющихся требований бизнеса и рынка.
Кроме того, Django поддерживает разработку на основе модульной архитектуры, что позволяет легко добавлять и удалять компоненты системы, изменять функционал и адаптировать систему под конкретные потребности пользователя. HTML и CSS, в свою очередь, позволяют гибко настраивать и изменять внешний вид приложения, делая его более удобным и приятным для пользователей.
Таким образом, выбор Django, Django Template, HTML/CSS и SQLite для разработки АС учета договоров и контроля за их исполнением является обоснованным и рациональным решением. Эти технологии обеспечивают баланс между простотой использования, мощностью и гибкостью, что позволяет эффективно разрабатывать, внедрять и поддерживать информационную систему, удовлетворяющую потребности бизнеса и пользователей.

При проектировании автоматизированной системы (АС) учета договоров и контроля за их исполнением особеное внимание уделяется выбору программных средств, которые будут использоваться для разработки приложения. Правильный выбор технологий обеспечивает не только функциональные возможности системы, но и её производительность, масштабируемость, удобство использования и поддержки. В данном случае основными используемыми технологиями являются Django для серверной части, Django Template вместе с HTML/CSS для фронтенда и SQLite для базы данных. Рассмотрим, почему были выбраны именно эти технологии и как они обоснованы для конкретной задачи.
Django, как веб-фреймворк на языке Python, является одним из наиболее мощных и популярных инструментов для создания веб-приложений. Одним из ключевых преимуществ Django является его архитектура на основе модели (M), вида (V) и контроллера (C), известная как MVC. Эта архитектура позволяет разрабатывать приложения с четким разделением ответственности, что существенно облегчает создание, тестирование и поддержку кода. В контексте АС учета договоров и контроля за их исполнением, использование Django позволяет быстро и эффективно организовать работу с данными, обеспечить надежное хранение и обработку информации о договорах.
Кроме того, Django предоставляет множество встроенных возможностей, таких как ORM (Object-Relational Mapping) для работы с базой данных, аутентификацию и авторизацию пользователей, формы для ввода данных и админ-панель для управления приложением. Эти встроенные инструменты позволяют значительно сократить время разработки и повысить её качество, устраняя необходимость в написании большого количества повторяющегося кода. Это особенно важно в рамках ограниченного времени и ресурсов, часто встречающихся в проектах по разработке информационных систем [5].
Использование Django Template вместе с HTML и CSS для создания пользовательского интерфейса обеспечивает легкость и гибкость при разработке фронтенда. Django Template Engine позволяет интегрировать динамический

контент в HTML-страницы, быстро обновлять и отображать информацию, непосредственно взаимодействуя с серверной частью на Django. Это делает интерфейс приложения более интерактивным и отзывчивым, что повышает удобство пользователей при работе с системой учета договоров.
Что касается выбора HTML и CSS, эти технологии являются основополагающими для веб-разработки и обеспечивают возможности создания структурированных и визуально приятных веб-страниц. HTML отвечает за разметку контента, а CSS – за его стилизацию, что позволяет создать эстетически привлекательный интерфейс, улучшая пользовательский опыт. В современном веб-разработке также широко используются фреймворки для CSS, такие как Bootstrap, которые могут быть полезны для ускорения процесса создания адаптивного и кроссбраузерного интерфейса [6].
Выбор SQLite в качестве базы данных для данной системы также обусловлен рядом факторов. SQLite – легковесная и встроенная СУБД, которая не требует отдельного сервера для работы. Она отлично подходит для малых и средних приложений, где не предполагается слишком больших объемов данных или высокой нагрузки. В контексте АС учета договоров и контроля за их исполнением это решение может быть весьма эффективным, поскольку основное количество операций связано с чтением и записью данных, а высокая нагрузка на базу данных не предполагается [7].
Преимущества использования SQLite включают простоту настройки и эксплуатации, отсутствие необходимости в сложной конфигурации, что позволяет разработчикам сосредоточиться на создании функционала системы. SQLite хорошо интегрируется с Django через встроенный ORM, что упрощает работу с базой данных и позволяет использовать мощные возможности Django для манипуляции данными. Это позволяет разработчикам писать менее сложный и более читаемый код, обеспечивая при этом надежность и консистентность данных [8].

3 Практическая часть
3.1 Общее описание разработки
Технологический стек.
Система разрабатывается на основе фреймворка Django, который идеально подходит для создания комплексных веб-приложений благодаря своей модульной архитектуре и мощным инструментам для работы с базой данных. В качестве системы управления базами данных используется SQLite, что делает разработку и тестирование приложения более доступными без необходимости настройки сложных СУБД [9].
Django: Основа для бэкенда, управляет всей логикой приложения, моделями данных и маршрутизацией.
Django Templates: Технология для создания HTML-страниц на основе контекста, переданного из Django Views.
HTML/CSS: Используется для структуры и стилизации веб-страниц, что позволяет создавать интуитивно понятный и удобный пользовательский интерфейс.
SQLite: Легковесная, встраиваемая база данных, идеально подходящая для разработки и тестирования, а также для малых проектов [7].
Архитектура моделей
Рассмотрим архитектуру моделей Django для системы учета договоров и контроля за их исполнением, которая включает в себя модели для управления договорами (эпиками), подзадачами (сториз), пользователями, сроками исполнения (спринтами) и их статусами.
Основные модели.
BaseModel:

 абстрактная базовая модель, включающая общие поля, такие как title, description, created_at, updated_at, и completed_at;
 метод is_done проверяет, завершена ли задача, а переопределенный метод save обновляет время завершения при изменении статуса на завершенный.
ModelWithProgress:
 расширяет BaseModel, добавляя поля для отслеживания прогресса: total_points, story_count, points_done, и progress;
 метод update_points_and_progress вычисляет общее количество баллов и прогресс выполнения, используя данные из связанных моделей Story.
StateModel:
 абстрактная модель для статусов, определяющая поля slug, name, и stype с предопределенными типами статусов.
Epic:
 конкретная модель для управления договорами (эпиками), наследует ModelWithProgress;
 содержит дополнительные поля, такие как priority, state, owner, workspace, и tags;
 имеет методы для дублирования и обновления статуса эпика.
Story
 модель для управления подзадачами, наследует BaseModel;
 содержит поля epic, priority, points, state, sprint, requester, assignee, workspace, и tags;
 методы включают дублирование задачи и автоматическое обновление статуса через сигналы Django.
Task:
 простая модель, связанная с Story, управляет конкретными задачами в рамках сториз;
 имеет метод для создания дубликатов задач.
Sprint:

 модель для управления сроками исполнения задач, наследует ModelWithProgress;
 модержит дополнительные поля для управления временными рамками starts_at и ends_at;
 имеет методы для проверки статуса спринта и его дублирования.
Взаимодействие моделей:
 модели связаны через внешние ключи, позволяя создавать структурированный граф зависимостей между договорами, задачами и их исполнением;
 определены индексы для улучшения производительности запросов, особенно для операций фильтрации и сортировки;
 Django обеспечивает управление изменениями структуры базы данных через систему миграций.
Интерфейс и доступ.
Система предоставляет веб-интерфейс через Django Templates, позволяя пользователям управлять договорами и задачами напрямую через браузер. Используется HTML и CSS для стилизации, обеспечивая простоту и удобство использования.
В рамках информационной системы, реализованной на Django, представления (views) являются ключевым компонентом, который обеспечивает логику обработки запросов от пользователей и взаимодействие с моделями данных. В проекте используются классы представлений Django для различных операций CRUD (создание, чтение, обновление, удаление), а также для управления состоянием объектов.
Основные классы представлений.
EpicDetailView
 тип: DetailView;
 описание: отображает подробную информацию об объекте Epic, включая связанные с ним объекты Story;

 особенности: реализует метод get_children, который группирует связанные истории по различным критериям, таким как спринт, статус или исполнитель.
EpicCreateView и EpicUpdateView:
 тип: CreateView и UpdateView;
 описание: обеспечивают создание и обновление объектов Epic. Эти представления используют формы для валидации данных перед сохранением в базе данных;
 особенности: интегрируются с системой аутентификации Django, требуя от пользователя входа в систему для выполнения операций.
EpicList:
 тип: BaseListView;
 описание: отображает список всех объектов Epic с возможностью фильтрации по различным критериям;
 особенности: предоставляет формы для фильтрации объектов по владельцу, статусу и меткам.
StoryCreateView и StoryUpdateView:
 тип: CreateView и UpdateView;
 описание: Предназначены для создания и обновления объектов Story;
 особенности: Автоматически присваивают задачам приоритет, основываясь на максимальном приоритете существующих задач в рамках того же Epic.
StoryList и StoryDetailView:
 тип: BaseListView и DetailView;
 описание: StoryList отображает список всех задач, а StoryDetailView предоставляет детальную информацию о конкретной задаче;
 особенности: включают расширенные возможности фильтрации и управления задачами, такие как изменение исполнителя, статуса или спринта через интерфейс.

SprintCreateView и SprintUpdateView:
 тип: CreateView и UpdateView;
 описание: позволяют создавать и обновлять сроки исполнения задач (спринты);
 особенности: интегрируют в себя логику для работы с датами начала и окончания спринтов, а также автоматический расчет и обновление состояния спринтов.
Прочие функциональные представления
 SprintList отображает список спринтов с возможностью их фильтрации и выполнения массовых операций, таких как удаление или дублирование.
 liveness и readiness - функции, предназначенные для мониторинга состояния приложения, позволяющие проверить его "живучесть" и готовность к работе.
Взаимодействие с пользователями.
Все представления защищены декораторами login_required, что требует от пользователей аутентификации перед доступом к функционалу системы. Это обеспечивает безопасность и контроль доступа к чувствительной информации.
Структура базы данных информационной системы.
В базе данных информационной системы используется множество таблиц для хранения и управления данными, связанными с пользователями, договорами, задачами, сессиями и логами администрирования. Ниже приведено детальное описание основных таблиц:
Таблицы аутентификации и авторизации.
auth_group:
 хранит информацию о группах пользователей. Каждая группа имеет уникальное имя и идентификатор;
 поля: id, name.
auth_user:

 содержит данные о пользователях системы, включая уникальные идентификаторы, имена, пароли, электронные почты и другие данные для входа в систему;
 поля: id, password, last_login, is_superuser, username, last_name, email, is_staff, is_active, date_joined, name, first_name.
auth_permission:
 отражает разрешения, доступные в системе, связывая каждое разрешение с типом содержимого и действием, которое можно выполнить;
 поля: id, name, codename, content_type_id.
auth_group_permissions:
 устанавливает связи между группами и разрешениями, позволяя группам иметь определённые права;
 поля: id, group_id, permission_id.
django_content_type:
 управляет типами контента, которые используются для связывания разрешений с моделями данных;
 поля: id, app_label, model.
Таблицы для работы с проектами и задачами.
stories_epic:
 содержит данные об эпиках, которые представляют крупные блоки работ или проекты;
 поля: id, title, description, created_at, updated_at, completed_at, priority, owner_id, state_id, workspace_id.
stories_story:
 отражает отдельные задачи или истории, которые связаны с эпиками;
 поля: id, title, description, created_at, updated_at, completed_at, priority, points, assignee_id, epic_id, state_id, sprint_id, requester_id, workspace_id.
stories_task:

 представляет конкретные задачи в рамках историй, описывая детали выполнения;
 поля: id, title, description, created_at, updated_at, completed_at, story_id.
Таблицы для управления сессиями и логами.
django_session:
 управляет сессиями пользователей, храня ключи сессий, данные сессий и даты их истечения;
 поля: session_key, session_data, expire_date.
django_admin_log:
 записывает действия администраторов в системе, такие как создание, изменение и удаление записей;
 поля: id, object_id, object_repr, action_flag, change_message, content_type_id, user_id, action_time.
Таблицы для работы с метками и историей изменений.
stories_tagulous_story_tags и stories_tagulous_epic_tags:
 содержат информацию о метках, присвоенных задачам и эпикам. Метки помогают в организации и фильтрации задач;
 поля: id, name, slug, count, protected.
stories_historicalepic, stories_historicalstory:
 сохраняют историю изменений эпиков и задач для отслеживания изменений и восстановления предыдущих состояний;
 поля включают идентификаторы, заголовки, описания, даты создания и обновления, а также пользовательские и системные идентификаторы для связи.
Прочие служебные таблицы.
django_migrations:
 хранит информацию о миграциях базы данных, обеспечивая контроль версий схемы базы данных;
 поля: id, app, name, applied.

 управляет сайтами в рамках Django проекта, позволяя настроить данные, специфичные для конкретных сайтов;
 поля: id, domain, name.
Эта структура базы данных обеспечивает мощную платформу для управления проектами, задачами и пользовательскими данными, поддерживая сложные взаимосвязи и обеспечивая высокий уровень безопасности и масштабируемости.
3.2 Пользовательский интерфейс программы
Окно авторизации веб-интерфейса представлено на рисунке 6.
Рисунок 6 - Окно авторизации
Рисунок 7демонстрирует страницу контрактов.
Рисунок 7 - Контракты
Окно создания контрактов можно увидеть на рисунке 8.

Рисунок 8 – Окно создания контрактов
Окно редактирование контрактов продемонстрирована на рисунке 9.
Рисунок 9 - Окно редактирование контрактов
Просмотр одного из контрактов показан на рисунке 10.

Рисунок 10 - Просмотр контракта
На рисунке 11 изображены все подзадачи, находящиеся в ИС.
Рисунок 11 - Подзадачи
Окно создания подзадач можно увидеть на рисунке 12.

Рисунок 12 - Окно создания подзадач
Рисунок 13 демонстрирует редактирование подзадачи.
Рисунок 13 - Редактирование подзадачи

Просмотр одной из подзадач показано на рисунке 14.
Рисунок 14 - Просмотр подзадачи
Установленные сроки представлены на рисунке 15.
Рисунок 15 - Установленные сроки
Мониторинг задач на установленные сроки представлено на рисунке 16.

Рисунок 16 - Мониторинг задач на установленные сроки
Рисунок 17 демонстрирует редактирование сроков.
Рисунок 17 - Редактирование сроков
Форма создания нового пользователя можно увидеть на рисунке 18.

Рисунок 18 - Форма создания нового пользователя
Редактирование пользователя продемонстрировано на рисунке 19.
Рисунок 19 - Редактирование пользователя

4 Экономическое обоснование работы
4.1 Планирование работ
Projectlibre – это бесплатное программное обеспечение для управления проектами, которое предоставляет возможности для планирования, отслеживания и контроля выполнения проектов, а также для управления ресурсами и бюджетом проекта. Оно является альтернативой популярному платному ПО для управления проектами, такому как Microsoft Project.
Список задач проекта представлен на рисунке 20.
Рисунок 20 – Список задач проекта
Диаграмма Ганта предназначена для визуализирования сложноуровневых последовательностей задач в течение времени. Диаграмма представлена на рисунке 21.
Рисунок 21 – Диаграмма Ганта

На рисунке 22 показаны ресурсы проекта.
Рисунок 22 – Ресурсы проекта
Рисунок 23 демонстрирует сетевой график проекта.
Рисунок 23 – Сетевой график проекта

5 Безопасность и экологичность работы
5.1 Информационная безопасность
При проектировании автоматизированной системы (АС) учета договоров
и контроля за их исполнением необходимо учесть множество аспектов,
включающих утилизацию компьютерной техники, требования к помещению,
безопасность и эргономику рабочего места, а также вопросы
пожаробезопасности. Важно понимать, что каждый из этих элементов
способствует созданию эффективной и безопасной рабочей среды, что, в свою
очередь, напрямую влияет на успешную реализацию проекта.
Для обеспечения оной необходимо принять организационные и
технические меры предосторожности. Например, информация должна храниться
на защищенном сервере с ограниченным доступом, должны использоваться
надежные пароли, а при входе в систему должна применяться двухфакторная
аутентификация. Для предотвращения взлома системы или
несанкционированного доступа может быть установлена система регистрации
доступа к данным.
Кроме того, очень важно, чтобы сотрудники были проинформированы о
необходимости безопасного хранения и обработки частной информации. В этом
могут помочь программы обучения, частые напоминания и проверки.
Поскольку конфиденциальные данные должны быть защищены, ИТ-
безопасность является важнейшим компонентом. Прежде чем разрешить доступ
к конфиденциальным данным, система должна включить аутентификацию
пользователя. Права доступа пользователей к определенной базе должны
управляться системой. Нужно убедиться, что работники имеют доступ только к
тем данным, которые необходимы им для выполнения своих задач.

Чтобы предотвратить несанкционированный доступ к данным в случае
утечки или кражи, конфиденциальная информация должна быть зашифрована,
также, для предотвращения уязвимостей систему необходимо поддерживать в
актуальном состоянии с помощью новейших обновлений ПО и патчей.
Проведение плановых аудитов ИТ-безопасности для оценки
эффективности мер и выявления любых системных проблем или уязвимостей.
Для защиты конфиденциальности, точности и доступности информации
необходимо использовать несколько методов и технологий.
Аутентификация и авторизация пользователей - два основных метода
защиты данных. Они регулируют достоверность доступа к системе и
ограничивают доступ.
Для обеспечения сохранности данных, передаваемых между клиентами и
серверами, используются протоколы шифрования и безопасности. Они также
необходимы для защиты от вредоносных программ, которые могут нанести вред
или украсть что-либо, также необходимо регулярное резервное копирование
данных и проверку целостности хранящихся файлов, чтобы получить высокую
степень защиты информации крайне важно обеспечить безопасность
информации в системе управления инструкциями. Для этого можно
использовать различные методы и технологии.
5.2 Экологичность работы
Разработка системы контроля прохождения инструктажа также может
иметь влияние на экологичность работы.
Возьмём в пример, записи нескольких бумажных документов, таких как
правила, инструкции и т.д., - это является стандартным этапом учебного
процесса. Печатать все это на бумаге стоит дорого. Создание системы поверки
может облегчить перевод их в цифровой формат, а значит, минимизировать

использование бумаги и ее пагубное влияние на окружающую среду.
Компьютерное ПО и другие электронные приборы могут быть использованы для
реализации системы управления образованием. В результате количество
энергии, используемой на работе, может увеличиться. Для создания системы
образовательного мониторинга используются различные инструменты, включая
компьютеры, ноутбуки, принтеры и т.д. Кроме того, срок службы этого
оборудования ограничен, и оно должно быть уничтожено, когда перестает
работать. Важнейшим компонентом экологичности в работе является
правильная утилизация оборудования. Переработка отходов может быть
включена в систему управления образованием при ее разработке. Например,
использование электронных форматов может сократить количество
необходимых бумажных документов, что снижает количество мусора.
В целом, существует целый ряд соображений экологической чистоты,
которые могут быть приняты во внимание при создании системы контроля. Это
может способствовать развитию бизнеса и уменьшению негативного
воздействия на окружающую среду.
При обсуждении устойчивости проекта по совершенствованию системы
образовательного мониторинга необходимо учитывать несколько факторов.
При использовании ИТ-средств, таких как портативные компьютеры,
хранилища данных и др. в процессе разработки высокотехнологичных систем -
выбор подходящей техники становится первоочередной задачей. Эффективность
работы оборудования и его энергопотребление являются основными критериями
при выборе комплектующих. Кроме того, необходимо учитывать экологические
аспекты, такие как наличие сертификатов энергосбережения и соблюдение
экологических стандартов.
Электронные подписи и документооборот также предлагают возможность
сократить оный, что в свою очередь обеспечивает меньшее использование
бумаги и чернил, что уже имеет благоприятное влияние на экологию.

Кроме того, при выборе утилизации старых компьютеров и оборудования
необходимо учитывать всех экологических факторов, таких как
специализированные услуги по переработке и утилизации электронных отходов.
В итоге, экологические аспекты должны быть учетом при разработке
системы регулирования передачи инструкций, которая поможет
минимизировать отрицательный вклад на окружающую среду и повысит
производительность выполнения задач.
Ключевым аспектом, который нужно рассмотреть, является утилизация
компьютерной техники. В процессе разработки и использования АС
оборудование устаревает морально и физически, что требует его своевременной
замены. Важно организовать процесс утилизации таким образом, чтобы
минимизировать негативное воздействие на окружающую среду и обеспечивать
безопасное уничтожение данных. Компьютерная техника содержит ряд
токсичных веществ, таких как свинец, ртуть и кадмий, которые требуют
специальной переработки. Кроме экологического аспекта, важно уделять
внимание защите информации, хранящейся на устройствах. Один из способов
решения этих проблем — сотрудничество с сертифицированными компаниями,
занимающимися переработкой и утилизацией электронного оборудования. Они
могут обеспечить безопасное стирание всех данных и переработку материалов в
соответствии с экологическими нормами [13].
5.3 Охрана труда
Безопасность труда и техника измерений, включая систему стандартов
окончания работ, является неотъемлемой составляющей любых успехов. Для
того, чтобы защитить здоровье и безопасность сотрудников, следует учитывать
требования проекта, касающиеся безопасности труда и техники
информационной безопасности.

Удобное место работы является одним из основных компонентов
безопасности труда. Размещение компьютеров и других средств, используемых
в процессе проектирования системы, должно способствовать комфорту
сотрудника. Рабочее место должно быть хорошо освещено, который снабжен
необходимыми инструментами, такими как клавиатура и мышь, что помогает
предотвратить перенапряжение рук и глаз.
Безопасное использование электрооборудования является ключевым
элементом на рабочем месте. Сотрудники, работающие с системой управления
обучения, должны получать инструктаж по ТБ с инструментами, а также по
применению защитных средств, например, перчаток и очков.
Необходимо учитывать все аспекты техники безопасности и охраны труда.
Работа с компьютером в течение всего дня может вызывать различные проблемы
со здоровьем, связанные со зрением, руками и спиной, поэтому очень важно
гарантировать правильную настройку рабочих мест, в том числе, расположение
дисплея на достаточном расстоянии от глаз пользователей, наличие стульев с
надлежащей спинной поддержкой, а также удобное размещение клавиатуры и
мыши [14].
Сотрудники, использующие систему контроля знаний, должны проходить
регулярное обучение правильному использованию рабочего оборудования и
следить за своим здоровьем на рабочем месте. Для предотвращения одометров,
которые могут повлиять на здоровье, также важно проводить плановые осмотры
оборудования и профилактические работы, для работника важно иметь систему
вентиляции и ношение защитной маски при работе с пылесосом или другим
оборудованием, которое может выделять пыль.
Наконец, важно следить за психологическим комфортом работников.
Очень важно предоставить работникам регулярные перерывы и возможность
отдохнуть, особенно при разработке ПО, которое может быть тяжелым и
изнурительным процессом.
Во всем, здоровье и безопасность на рабочем месте являются
первостепенными соображениями для развития любой компании, и многие

области здоровья и безопасности на рабочем месте должны быть приняты во
внимание.
Для обеспечения дополнительной безопасности информации о
сотрудниках необходимо проводить частые тренинги и следовать инструкциям
относительно конфиденцальности. Кроме того, важно установить строгую
политику защиты данных, также для повышения эффективности работы за
компьютером и предотвращения усталости и связанных с работой заболеваний,
работникам следует предоставлять возможность развивать соответствующие
навыки и улучшать свое рабочее поведение. Необходимо также регулярно
проверять рабочее место на соответствие требованиям охраны труда и
безопасности, включая освещение и вентиляцию.
Требования к помещению, в котором будет разрабатываться и
эксплуатироваться АС учета договоров и контроля за их исполнением, играют
важную роль в обеспечении эффективной и безопасной работы. Офисное
пространство должно быть оснащено современной системой вентиляции и
кондиционирования, поддерживающей оптимальные температурные и
влажностные условия. Это необходимо не только для сохранения
работоспособности оборудования, но и для комфортного состояния
сотрудников. Бесперебойное электропитание также является критически
важным. Для этого нужно установить источники бесперебойного питания (ИБП)
и генераторы, которые позволят предотвратить сбои в работе системы при
возможных проблемах с электроснабжением.
Эргономика рабочего места — еще один важный аспект. Продолжительная
работа за компьютером может негативно сказываться на здоровье сотрудников,
поэтому необходимо создать условия, которые минимизируют эти риски.
Рабочие места должны быть оборудованы эргономичными креслами и столами,
которые можно регулировать по высоте. Очень важно, чтобы мониторы
находились на уровне глаз, что позволит избежать напряжения шеи и глаз.
Хорошее освещение без бликов на экране значительно улучшает условия работы
и снижает утомляемость глаз. Также стоит проводить регулярные тренинги для

сотрудников по правильной организации своего рабочего места и техническим
аспектам выполнения задач, связанным с использованием программного
обеспечения АС [15].
Безопасность данных при работе с АС учета договоров и контроля за их
исполнением крайне важна, поскольку системы такого рода оперируют
конфиденциальной информацией. Недостаточная защита данных может
привести к их утечке или несанкционированному доступу. Для обеспечения
безопасности данных необходимо использовать современные методы
шифрования, а также внедрять системы многофакторной аутентификации и
авторизации пользователей. Регулярные обновления программного обеспечения,
антивирусные программы и проведение внутренних аудитов безопасности
помогут снизить риски и защитить систему от современных угроз.
Пожаробезопасность является одним из критических факторов, который
необходимо учитывать при проектировании и эксплуатации АС учета договоров
и контроля за их исполнением. В данных помещениях используется
значительное количество компьютерного оборудования и электрических
устройств, что увеличивает риск возникновения пожара. Для обеспечения
пожарной безопасности помещения должны быть оснащены современными
системами пожаротушения, датчиками дыма и тепловыми датчиками.
Огнетушители должны быть размещены в легко доступных местах, а сотрудники
должны быть обучены использованию этих средств и правилам эвакуации при
возникновении чрезвычайной ситуации. Регулярные пожарные тренировки и
инспекции позволяют

Заключение
В заключение данной выпускной квалификационной работы можно
отметить, что проект разработки автоматизированной системы учета договоров
и контроля за их исполнением был успешно реализован, включая все
поставленные задачи и цели.
Первым этапом работы было проведение исследования и анализа
существующих решений в области автоматизации учета договоров и контроля за
их исполнением. Этот процесс позволил выявить ключевые недостатки и
ограничения текущих подходов, а также определить лучшие практики, которые
были учтены при разработке новой системы.
На следующем этапе были сформулированы и уточнены требования к
разрабатываемой системе со стороны конечных пользователей и организации.
Это включало анализ потребностей пользователей, определение
функциональных и технических характеристик системы, что позволило
обеспечить её адресную эффективность и удовлетворение специфических
запросов заказчика.
Основой успешной реализации проекта послужило проектирование
структуры базы данных и архитектуры всей системы. Была разработана
оптимальная схема данных, обеспечивающая целостность, безопасность и
высокую скорость доступа к информации. Архитектурные решения, основанные
на принципах модульности и масштабируемости, предоставили возможность
дальнейшего расширения функционала системы без необходимости её полной
переработки.
Ключевым аспектом работы стала разработка алгоритмов для работы
основных функциональных модулей системы, включая управление
документооборотом, контроль исполнения договоров и взаимодействие с
пользователями. Эти алгоритмы были реализованы таким образом, чтобы

максимально упростить и автоматизировать процессы, связанные с учетом
договоров, и сделать их максимально прозрачными и контролируемыми.
Финальный этап проекта включил разработку прототипа системы на
основе выбранных программных средств – Django, Django Template, HTML/CSS
и SQLite. Этот прототип был успешно реализован и демонстрирует все
заложенные функции и возможности разработанной системы, подтверждая тем
самым правильность выбранных технологий и подходов к созданию системы.
Прототип протестирован и показал хорошие результаты в области удобства
использования, производительности и надежности.
Таким образом, результаты работы демонстрируют успешное выполнение
всех поставленных задач и создание функциональной системы, способной
эффективно обрабатывать задачи по учету договоров и контролю за их
исполнением. Ожидается, что внедрение данной системы позволит значительно
повысить эффективность управленческих процессов в организации, сократить
временные и ресурсные затраты на обработку информации и улучшить общую
работоспособность организации в долгосрочной перспективе.
