
     
     Тема выпускной квалификационной работы – система для автоматизированного тестирования API. Данная выпускная квалификационная работа была разработана в соответствии с пожеланиями и советами QA инженеров.
     Разработчики и тестировщики ПО тратят значительное количество времени на анализ структуры методов и эндпойнтов в API. На рынке существует множество инструментов, но они часто перегружены лишней информацией и не предоставляют удобного способа отображения связанных тестовых кейсов, что затрудняет быструю ориентацию в структуре API. К тому же, отсутствие интегрированного редактора тест-кейсов заставляет разработчиков искать сторонние решения, которые не всегда эффективно взаимодействуют с существующими системами. Неполнота или неточность информации об эндпойнтах также мешает эффективной разработке и тестированию, так как специалисты не могут быстро получить данные о параметрах и возможных ответах API.
     Цель выпускной квалификационной работы - разработать систему для автоматизированного тестирования API.
     Для достижения цели были решены следующие задачи:
 составить список требуемого функционала;
 составить базовую модель системы;
 добавить требуемый функционал в модель;
 разработать интерфейс для системы;
 сделать систему отказоустойчивой к ошибкам;
 сделать экономическое обоснование работы;
 рассмотреть вопросы информационной безопасности и охраны труда.
     Из технологий решено использовать язык программирования Dart и JavaScript, веб фреймворк Flutter для написания фронтэнда, NoSQL-база данных Cloud Firestore, а также Node.js.
     Разработка поможет ускорить работу и повысить комфорт тестировщиков.
     Работа состоит из введения, пяти основных разделов, заключения, перечня информационных ресурсов из 12 источников.
     В первом разделе рассмотрены основные теоретические сведения.
     Во втором разделе, рассмотрена предметная область, охватывающая тему выпускной квалификационной работы, составлены требования к разработке приложения, а также требования к программному обеспечению.
     В третьем разделе рассматривается выбор средств реализации, а также описано проектирование структуры базы данных, рассмотрен процесс разработки системы.
     В четвертом разделе рассмотрено экономическое обоснование работы.
     В пятом разделе рассмотрена безопасность и экологичность разработки.
      
     Система для автоматизированного тестирования API — это комплексное программное решение, предназначенное для автоматизации процесса проверки различных аспектов веб-API. Это позволяет разработчикам и тестировщикам эффективно управлять тестированием функциональности, безопасности, производительности и совместимости API с заданными спецификациями и требованиями.
     Такие системы играют ключевую роль в современной разработке программного обеспечения, помогая обеспечить высокое качество и надежность API, что критически важно для успешной работы любых зависимых от них приложений и сервисов.
     

     
     
     Android, iOS и Web — три самые популярные платформы для разработки и релиза приложений или сайтов. У каждой из них есть свои уникальные особенности, различия в функционале, дизайне и удобстве использования.
     Android — операционная система от Google, основанная на ядре Linux. Благодаря открытому исходному коду разработчики могут создавать приложения и модифицировать систему. Android поддерживает широкий спектр устройств и предлагает обширный выбор приложений из Google Play, что делает её одной из наиболее популярных операционных систем для мобильных устройств в мире.
     iOS — операционная система от Apple, разработанная для использования на iPhone и iPad. Имея закрытый исходный код, она ограничивает возможности разработчиков, но обеспечивает высокую безопасность и производительность. iOS славится своим большим выбором качественных приложений из App Store.
     Web — это платформа, которая позволяет запускать приложения и сайты непосредственно в браузере, независимо от операционной системы устройства. Web-приложения легко доступны и не требуют установки, что делает их удобными для пользователей. Они могут быть оптимизированы для работы на любых устройствах: на компьютерах, смартфонах или планшетах, что обеспечивает высокий уровень универсальности. Также web-разработка предлагает гибкость в обновлении и поддержке приложений, поскольку изменения на сервере мгновенно отображаются у всех пользователей.
     В связи с тем, что разработанная система для автоматизированного тестирования API не обладает высокими требованиями к оборудованию, было принято решение выбрать web-платформу. Этот выбор обусловлен тем, что web-приложение запускается почти на любых устройствах, что гарантирует широкий охват аудитории и упрощает доступ к приложению для большего числа пользователей.
     
     
     
     Компоненты, которые необходимо включить для разработки системы, охватывающей все потребности её пользователей:
 Пользовательский интерфейс (UI). Навигационная панель - позволяет пользователям легко переключаться между различными разделами системы, такими как документация API, редактор тест-кейсов и панель результатов. Визуальное представление API - иерархическое отображение всех доступных методов и эндпойнтов с возможностью раскрытия для подробного просмотра.
 Редактор тест-кейсов. Создание и редактирование тестов - инструменты для написания, сохранения и модификации тестовых кейсов. Параметризация - возможность добавлять переменные и параметры для динамического использования в тестах.
 Модуль связи тест-кейсов. Отображение связей - показывает, какие тесты проверяют конкретные эндпойнты, обеспечивая понимание покрытия тестами. Управление зависимостями - определяет и визуализирует зависимости между тестами и эндпойнтами.
 Детализированная информация по эндпойнтам. Параметры запроса -  описание параметров, которые можно использовать с каждым методом. Форматы ответов - подробное описание возможных ответов API, включая статус-коды и структуры данных.
 Поддержка форматов API. Поддержка самого популярного формата API, OpenAPI(Swagger), для обеспечения связи с другими подобными системами и гибкости использования системы.
	Использование при разработке всех основных компонентов системы для автоматизированного тестирования API позволяет создавать качественные и функциональные приложения, которые значительно упрощают работу QA-инженерам.
     
     
     
      


     Основными потребителями разработанной системы являются тестировщики (QA Engineers) - тестировщики используют систему для автоматизации тестирования API, чтобы обеспечить его соответствие спецификациям и отсутствие ошибок.
     Также потребителями разработанной системы могут стать:
 разработчики программного обеспечения (Software Developers) - эти специалисты используют такую систему для проектирования, реализации и тестирования API. Инструменты, упрощающие работу с API, помогают ускорить разработку и повысить её качество;
 архитекторы программного обеспечения (Software Architects) -  архитекторы заинтересованы в том, чтобы система обеспечивала целостный взгляд на структуру и дизайн API. Они используют эту информацию для планирования и оптимизации архитектуры систем на более высоком уровне;
 проектные менеджеры (Project Managers) - менеджеры проектов используют такие системы для мониторинга прогресса разработки и тестирования, оценки производительности команды и соблюдения сроков реализации проектов;
 студенты и обучающиеся - студенты, изучающие программирование или тестирование ПО, могут использовать такие системы для практического изучения работы и тестирования API;
 документировщики API (API Documentation Writers) - они создают техническую документацию, описывающую возможности и методы API для разработчиков. Подробное отображение информации о каждом эндпойнте значительно упрощает их работу.
     Проведя анализ, становится понятно, что эта система позволяет всем вышеперечисленным группам потребителей эффективно сотрудничать, обмениваться информацией и достигать своих целей в рамках проекта по разработке программного обеспечения.
     Также стоит обратить внимание на уже существующие аналоги в данной сфере:
 Swagger (также известный как OpenAPI) - это мощный инструмент для описания, разработки и документирования RESTful API. Он позволяет автоматически генерировать документацию API, облегчая процесс взаимодействия и интеграции;
 Postman - не просто инструмент тестирования API, но и платформа, которая позволяет разработчикам создавать, тестировать, документировать и мониторить API. Postman предлагает удобный пользовательский интерфейс и возможность работы в команде;
 Insomnia - инструмент для тестирования и дизайна API. Insomnia предлагает функции, подобные Postman, включая возможность создания запросов, тестирования их и синхронизации данных в команде;
 Stoplight - платформа, предлагающая инструменты для проектирования, тестирования, мокирования и документирования API. Stoplight поддерживает спецификацию OpenAPI и предоставляет графический интерфейс для удобного создания и управления API.
     В современном мире, где потребление цифрового контента и услуг увеличивается с каждым днем, возникают сложности связанные с выбором оптимальных инструментов для разработки и поддержки API. Разработчики сталкиваются с проблемой эффективного управления и тестирования интерфейсов программного обеспечения, что крайне важно для обеспечения стабильности и надежности цифровых продуктов. Основная задача — обеспечить разработчиков необходимыми инструментами для создания качественного продукта.
     В условиях, когда рынок предлагает множество решений для работы с API, важно иметь инструмент, который не только поможет визуализировать структуру методов и эндпойнтов, но и предоставит возможности для глубокого и удобного анализа API. Такое решение должно упрощать процесс разработки, тестирования и документирования, обеспечивая высокую интеграцию с другими инструментами и системами, которые используются в рамках разработки. Это особенно актуально для комплексных проектов, где необходимо обеспечить стабильность работы приложений и минимизировать риски сбоев и ошибок.
     Важным аспектом является возможность интеграции с системами непрерывной интеграции и доставки (CI/CD), что позволяет автоматизировать процессы разработки и обеспечивать высокую скорость внедрения изменений без ущерба для качества.
     Рынок решений для работы с API постоянно развивается, и в этом контексте выбор правильного инструмента может определить успех всего проекта. Понимание потребностей разработчиков и предоставление комплексных решений, которые адресуют эти потребности через удобные и функциональные интерфейсы, ставит задачу не только на создание эффективного продукта, но и на поддержание его актуальности в динамично изменяющемся технологическом ландшафте.
     Метод прототипирования в разработке программного обеспечения — это подход, при котором создаются работающие модели (прототипы) будущего приложения или системы на ранних этапах разработки. Этот метод позволяет разработчикам, дизайнерам и заказчикам оценить концепцию продукта, его интерфейс и функциональность до начала полномасштабного производства. Прототипирование помогает идентифицировать потенциальные проблемы и получить обратную связь от пользователей, что в итоге способствует созданию более качественного и соответствующего требованиям пользователя продукта.
     2.2	Требования к разработке
     

     Система должна иметь возможность авторизации и аутентификации, а также иметь защиту паролей.
     Система должна быть расширяемой, чтобы добавление нового функционала не влияло на уже существующие функции, иначе в какой-то момент, систему будет невозможно поддерживать.
     Интерфейс должен отвечать следующим требованиям:
1. Главное окно приложения.
1.1 Меню навигации.
 файл: импорт документации API (YAML/JSON);
 настройки: кнопка для открытия настроек приложения;
 список проектов: список создаваемых или импортируемых проектов.
1.2 Панель проектов (в меню навигации).
 список проектов с возможностью выбора активного проекта;
 функции добавления, удаления и переименования проектов.
1.3 Основная рабочая область.
 вкладка "APIs": просмотр структуры API после импорта документации. Дерево эндпойнтов с деталями методов, параметров запросов и ответов;
 вкладка "Тест-кейсы": Список тест-кейсов для активного проекта с возможностью добавления, редактирования и удаления тест-кейсов. Колонки для отображения названия теста, статуса, связанной с ним информацией.
2. Экраны детализации.
2.1 Создание/редактирование тест-кейса
 форма для ввода названия тест-кейса, выбора эндпойнта, метода и ввода параметров запроса;
 кнопки для сохранения изменений или отмены.
2.2 Импорт документации API
 диалоговое окно для выбора файла документации в формате yaml;
 кнопка для начала процесса импорта.
3. Настройки.
 управление стилем отображения активного проекта;
 смена языка интерфейса приложения;
 смена цветовой и световой схемы приложения;
 управление аккаунтом (верификация, удаление, выход).
	Функциональные требования к системе для тестирования API:
 Импорт и управление API документацией. Импорт документации -  пользователи могут импортировать API документацию, загружая файлы в форматах YAML или JSON. Приложение анализирует эти файлы для отображения структуры API, включая эндпойнты, доступные методы (GET, POST, PUT, DELETE и т.д.), ожидаемые параметры запросов и форматы ответов. Просмотр документации - после импорта документации пользователи могут просматривать и изучать структуру API в удобном интерфейсе, который отображает эндпойнты и их спецификации.
 Создание и управление тест-кейсами. Создание тест-кейсов -  пользователи могут создавать тест-кейсы для каждого эндпойнта, указывая ожидаемые параметры запроса и ожидаемые результаты для ответов. Тест-кейсы можно создавать на основе информации, полученной из импортированной документации. Управление тест-кейсами -  организация тест-кейсов в проекты и наборы для удобства управления. Возможность назначать статусы тест-кейсам (например, "ToDo", "В работе", "Готово") для отслеживания прогресса тестирования.
Дополнительные возможности управления тест-кейсами. Группировка и тегирование - для улучшения навигации и управления тест-кейсами вводится система тегов и группировки по модулям или функциональным зонам API.
     Выполнение этих функциональных требований позволит создать более надёжное и устойчивое приложение, которое эффективно справляется с потребностями пользователей и оптимизирует ресурсы сервера. Рассмотрим более подробно ключевые преимущества, которые принесёт реализация системы кэширования и продуманного управления данными в базе данных.
     


     При разработке и внедрении технологических проектов, выбор подходящего программного обеспечения и инструментария играет критически важную роль. Эффективность, безопасность и удобство использования ПО напрямую влияют на успех проекта. Поэтому необходимо тщательно подходить к отбору инструментов, руководствуясь строго определенными критериями.
     Первостепенное значение имеет надежность и безопасность ПО. Это означает, что выбранное программное обеспечение должно стабильно функционировать под высокой нагрузкой и в критических ситуациях, а также обеспечивать защиту данных и процессов от внешних и внутренних угроз. Надежное ПО минимизирует риски сбоев и атак, что критически важно для бизнес-процессов.
     Далее, важно, чтобы ПО эффективно решало поставленные задачи. Это означает, что оно должно предоставлять все необходимые функциональные возможности для достижения целей проекта без необходимости вносить сложные модификации или дополнения. Эффективность ПО определяется его способностью выполнять требуемые операции быстро и корректно, что в свою очередь снижает временные и финансовые затраты на выполнение задач.
     Критерий устойчивости ПО к сбоям тесно связан с его надежностью. Программное обеспечение должно быть способно поддерживать работоспособность даже в условиях частичных сбоев, обеспечивая непрерывность критически важных операций. Это может включать механизмы аварийного восстановления и резервного копирования данных.
     Удобство использования также является ключевым фактором. ПО должно иметь интуитивно понятный интерфейс, который позволяет пользователям быстро освоиться и начать эффективно работать. Удобный пользовательский интерфейс уменьшает время на обучение и повышает общую продуктивность работы с системой.
     Наконец, Политика открытого кода имеет важное значение для гибкости и адаптивности проекта. Программное обеспечение с открытым исходным кодом предоставляет пользователям возможность адаптировать и модифицировать ПО в соответствии с изменяющимися требованиями и спецификациями без страха нарушить лицензионные ограничения. Это обеспечивает более высокую степень контроля над системой и уменьшает зависимость от внешних поставщиков.
     Таким образом, выбор ПО и инструментов для любого проекта должен осуществляться с учетом этих критериев, чтобы обеспечить максимальную эффективность, безопасность и удобство работы.
     

     Dart — это язык программирования от Google, разработанный для создания высокопроизводительных приложений на различных платформах, включая мобильные, веб и десктопные системы. Dart особенно популярен благодаря своему использованию в сочетании с Flutter для разработки кроссплатформенных мобильных приложений. Основные преимущества Dart включают опциональную статическую типизацию, современные функции языка, такие как асинхронное программирование с использованием async и await, а также мощные библиотеки и API для создания сложных пользовательских интерфейсов.
     JavaScript — это язык программирования, который стал стандартом для разработки интерактивных веб-сайтов. Благодаря своей универсальности и поддержке всех основных браузеров, JavaScript используется для создания динамических веб-страниц и приложений. Язык поддерживает объектно-ориентированное, императивное и функциональное программирование. JavaScript также является неотъемлемой частью стека MEAN/MERN (MongoDB, Express.js, Angular/React и Node.js), используемого для полноценной разработки серверных и клиентских частей веб-приложений.
     Flutter — это фреймворк от Google для создания нативно скомпилированных приложений для мобильных, веб и десктопных платформ из единой кодовой базы. Flutter использует Dart в качестве языка программирования и предлагает богатый набор предварительно настроенных виджетов, которые облегчают создание красивых и функциональных пользовательских интерфейсов. Основным преимуществом Flutter является высокая производительность приложений благодаря использованию компиляции в машинный код, что обеспечивает плавное и быстрое выполнение анимаций и переходов.
     Cloud Firestore — это гибкая, масштабируемая база данных для мобильных, веб и серверных приложений от Firebase и Google Cloud Platform. Она предоставляет возможность синхронизации данных в режиме реального времени между приложениями пользователей, что делает её идеальной для разработки интерактивных приложений. Firestore также поддерживает автоматические много региональные репликации данных, что обеспечивает высокую доступность и надежность данных.
     Node.js — это серверная платформа, которая позволяет использовать JavaScript для создания масштабируемых сетевых приложений, таких как веб-серверы. Node.js особенно эффективен для обработки нескольких одновременных соединений, благодаря своей архитектуре, основанной на неблокирующих вводе/выводе и событийно-ориентированных операциях. Это делает его подходящим для разработки приложений, требующих высокой производительности и способных обрабатывать большое количество данных в реальном времени.
     IntelliJ IDEA — это развитая интегрированная среда разработки (IDE) от JetBrains, предназначенная для языка Java, но поддерживает и множество других языков программирования, включая JavaScript, Kotlin, Scala и другие. IntelliJ IDEA известна своими продвинутыми возможностями анализа кода, которые обеспечивают высокую продуктивность разработки и помогают быстро находить и исправлять ошибки, а также предлагать релевантные предложения по улучшению кода. Кроме того, она обладает мощными инструментами для рефакторинга, тестирования и поддержки различных фреймворков и технологий, делая её одним из предпочтительных выборов профессиональных разработчиков.
      

     Структура базы данных, предназначенная для управления данными пользователя в приложении, требует тщательного планирования и разработки, чтобы обеспечить эффективность, безопасность и масштабируемость. В данном случае, рассмотрим структуру коллекции users, которая используется для хранения данных о пользователях после их верификации, а также архитектуру хранения данных, связанных с API и тестовыми примерами (TestCases), и настройками приложения.
     Структура базы данных - коллекция users в базе данных служит основным хранилищем информации о пользователях. После прохождения пользователем процесса верификации, в эту коллекцию добавляется новый документ с уникальным идентификатором (ID), который генерируется случайным образом. Этот подход не только обеспечивает анонимность данных пользователя, но и уменьшает вероятность коллизий ID, что критически важно для масштабируемых систем.
     Документ пользователя - в документе каждого пользователя, помимо стандартных данных, таких как имя, адрес электронной почты и контактная информация, хранятся специфические для данного приложения данные, разделенные на папки (коллекции) для организации API и тестовых случаев:
 API's - эта папка содержит информацию о всех API, которые пользователь создает или с которыми он работает. Для каждого API может быть указано его название, описание, параметры, методы доступа и другие технические детали, которые необходимы для работы с этим API. Эта информация критически важна для пользователей, которые активно работают с различными внешними и внутренними интерфейсами;
 TestCases - в этой папке хранятся тестовые случаи, которые пользователь создал для проверки работоспособности API. Тестовые случаи могут включать в себя не только описание каждого теста, но и данные, которые необходимо передать в API, ожидаемые результаты и фактические результаты выполнения теста. Это позволяет пользователю систематизировать процесс тестирования и обеспечивает возможность повторного использования тестов в будущем.
     Хранение настроек приложения - настройки приложения, такие как цвет интерфейса, стили подписей и язык приложения, критичны для персонализации пользовательского опыта, но не требуют постоянной синхронизации с сервером базы данных. Поэтому эти настройки хранятся в кэше браузера пользователя. Подход хранения настроек в кэше имеет несколько преимуществ:
 улучшение производительности: хранение данных в локальном кэше снижает количество запросов к серверу, что ускоряет загрузку и обновление интерфейса пользователя;
 снижение нагрузки на сервер: меньшее количество запросов к базе данных снижает нагрузку на сервер, что особенно важно при большом количестве пользователей;
 повышение доступности: настройки приложения доступны даже при отсутствии интернет-соединения, так как они загружаются непосредственно из кэша браузера.
     Интеграция и безопасность - интеграция данных между различными частями приложения, такими как пользовательские профили, API и тестовые случаи, должна быть тщательно спланирована. Это требует использования современных методов аутентификации и авторизации, чтобы обеспечить безопасный доступ к данным и защитить их от неавторизированного доступа. Важно также регулярно проводить аудит безопасности и обновлять систему защиты в соответствии с последними тенденциями в области кибербезопасности.
     В структуре базы данных важную роль играет эффективное использование кэша браузера, что улучшает общую производительность приложения и уменьшает нагрузку на сервер. Для достижения этих целей была реализована система проверки наличия данных в кэше, которая оптимизирует процесс обработки запросов.
     Система проверки кэша работает по следующему принципу: перед тем как выполнить запрос к базе данных, система сначала проверяет, существуют ли необходимые данные в локальном кэше браузера пользователя. Этот шаг критически важен, так как позволяет значительно сократить время доступа к данным и уменьшить количество обращений к серверу, что особенно актуально при частых повторных запросах. Если данные обнаруживаются в кэше, они загружаются непосредственно оттуда, минуя дополнительные задержки, связанные с обращением к серверу баз данных. Такой подход не только ускоряет работу приложения за счет немедленного доступа к данным, но и уменьшает потребление сетевых ресурсов и загрузку сервера баз данных.
     Тщательно спланированная структура базы данных не только облегчает управление данными и их безопасное хранение, но и способствует созданию масштабируемых, производительных и удобных в использовании приложений. В данном случае, разделение данных пользователя на специфические коллекции и эффективное использование локального кэша для хранения настроек приложения является оптимальным решением для достижения высокой производительности и удобства работы с системой.
     


     В качестве базовой модели системы выступает некастомизируемая страница авторизации. 
     Использование некастомизируемой страницы авторизации в качестве базовой модели системы является стратегическим решением, направленным на упрощение и ускорение начального этапа разработки и тестирования.
     Важные аспекты использования некастомизируемой страницы в авторизации в качестве базовой модели системы:
 Простота реализации - создание некастомизируемой страницы авторизации обеспечивает значительное упрощение процесса разработки. Поскольку страница авторизации является одним из ключевых элементов любой защищенной системы, её наличие с самого начала разработки позволяет быстро наладить взаимодействие с базой данных и системами управления пользователями. Благодаря использованию стандартных подходов и шаблонов, разработчики могут сфокусироваться на более сложных аспектах системы, не тратя время на дизайн и кастомизацию элементов UI на начальных этапах.
 Быстрая проверка работоспособности - этот подход позволяет оперативно проверить работоспособность базы данных и механизмов аутентификации. При успешном вводе учетных данных и последующей авторизации можно немедленно убедиться в том, что базовое взаимодействие между пользовательским интерфейсом и сервером работает корректно. Это критически важно для обеспечения уверенности в надежности фундаментальных элементов системы перед добавлением дополнительной функциональности.
 Не требует дополнительной работы после реализации - поскольку страница авторизации исчезает после входа в систему, не требуется дополнительной работы по её интеграции с другими частями приложения. Это означает, что после того как пользователь успешно войдет в систему, основное внимание можно перенести на другие компоненты и функции приложения. Простота и эффективность такого подхода значительно сокращает время разработки и тестирования.
     Интерфейс окна авторизации содержит переключатель между входом и регистрацией, поля для ввода электронной почты и пароля, кнопку входа, а также кликабельный текст для восстановления пароля отображен на рисунке 1.
     


     Интерфейс окна регистрации выполнен в том же стиле, что и окно авторизации на рисунке 1, но содержит поля для ввода электронной почты, пароля, повтора повтора и имени пользователя.
     Окно сброса пароля представляет собой простой набор элементов интерфейса, объясняющих пользователю, как корректно выполнить сброс пароля. Также это окно содержит поле ввода электронной почты, на которую придёт ссылка, а также кнопку для выполнения операции, окно сброса отображено на рисунке 2. При нажатии на кнопку сброса, на введенный пользователем адрес электронной почты придёт письмо с инструкцией по сбросу и ссылкой. Если нажать на ссылку в электронном письме - то пользователя переведёт на страницу на которой можно задать новый пользовательский пароль.


     
     
     При создании функционала приложения важно обеспечить его масштабируемость. Ниже описаны основные шаги создания функционала разрабатываемой системы.
     Загрузка и выгрузка данных с Cloud Firestore - для работы с данными в Cloud Firestore необходимо реализовать функции загрузки и выгрузки данных. Это включает в себя установление соединения с базой данных, выполнение запросов и обработку полученных данных, выгрузка и загрузка данных отображены на листинге 1 и 2 соответственно.
     Листинг 1 - пример выгрузки данных в базу.

     Реализация локализации и поиск языка браузера - локализация приложения улучшает пользовательский опыт, адаптируя контент под языковые и культурные особенности пользователей. Определение языка браузера позволяет автоматически выбрать подходящий язык интерфейса. Пример локализации приложения и поиска языка браузера отображены на листингах 3-7
    
     В этом листинге атрибут supportedLocales инициализирует список доступных языков, path инициализирует путь до языковых файлов, fallbackLocale указывает стартовый язык, startLocale указывает последний выбранный язык.
     
     
    
     Функция поиска и сохранения языка получает тэг browserLanguage  из локальных данных браузера, разделяет его по символу «-», попутно записывая первую половину как код языка, а вторую как код страны в верхнем регистре. Пример: полученный языковой код «en-US» сохранится как код языка - en и код страны US, так как en - это английский язык, а US - это Соединенные Штаты; если же язык в основном используется в одной стране или просто совпадает со страной происхождения, то получится как с «ru-RU» - русский язык в России.
    
     Перевод текста в приложении осуществляется посредством функции tr(), эта функция сопоставляет текст в кавычках с ключом в локализационной таблице и возвращает текстовое значение, это отображено на листинге 6; часть локализационной таблице отображена на листинге 7.
     
     
     Валидация текстовых полей - валидация данных, введенных пользователем, критически важна для предотвращения ошибок и обеспечения безопасности приложения. Примеры валидационных функций отображены на листингах 8, 9.
   

    
     
     В качестве основного стиля интерфейса был выбран Material Design от Google. Material Design — это комплексный дизайнерский язык, разработанный Google в 2014 году, который устанавливает стандарты визуального, движения и интерактивного дизайна для устройств и платформ. Он основан на идее «материалов», которые ведут себя как реальные объекты с естественными свойствами, обеспечивая интуитивно понятное взаимодействие с пользовательским интерфейсом.
     Принципы Material Design.
     Material Design использует метафору, согласно которой объекты пользовательского интерфейса состоят из «материала» — визуальных элементов, имитирующих физические свойства бумаги. Эти элементы могут менять размер, перемещаться, и взаимодействовать друг с другом, как объекты в реальном мире. Этот подход обеспечивает более естественный поток взаимодействий и визуальных анимаций, делая интерфейс понятным и приятным в использовании.
     Преимущества Material Design:
 Согласованность и интуитивность: Material Design предлагает согласованную визуальную структуру. Все элементы интерфейса сочетаются между собой, что облегчает пользователю понимание, как элементы будут реагировать на взаимодействие.
 Адаптивность: дизайн адаптируется к любому размеру экрана и ориентации, что гарантирует красивый и функциональный интерфейс на всех устройствах, от смартфонов до десктопов.
 Глубина и реализм: использование затенений и анимаций добавляет глубину интерфейсу, делая взаимодействие более реалистичным. Тени и движения напоминают пользователю о физических свойствах объектов, улучшая визуальное восприятие иерархии элементов.
 Универсальность: благодаря своей универсальности и обширной документации, Material Design может быть применен в различных проектах, от мобильных приложений до крупных мультимедийных систем.
 Инновационность: дизайн поощряет креативность и инновации, предоставляя разработчикам гибкую основу для создания уникальных пользовательских интерфейсов, сохраняя при этом согласованность и функциональность.
 Экономия времени и ресурсов: использование стандартизированных компонентов и готовых решений сокращает время и ресурсы, необходимые для дизайна и разработки, ускоряя процесс внедрения продукта на рынок.
     Material Design продолжает эволюционировать, регулярно обновляясь с добавлением новых компонентов и улучшениями, что делает его актуальным и востребованным в дизайне пользовательских интерфейсов. Эти факторы делают его отличным выбором для любой команды, стремящейся создать аттрактивный, эффективный и масштабируемый пользовательский интерфейс.
     Главный экран приложения является центральным элементом пользовательского интерфейса, предоставляя доступ ко всем основным функциям и разделам. Организация и дизайн главного экрана критически важны для обеспечения удобства использования и интуитивного взаимодействия пользователя с приложением. Ниже приведено детальное описание структуры главного экрана, особенностей навигационного меню и его компонентов; на рисунке 3 отображена общая структура главного экрана.
     

Рисунок 3 -  общая структура главного экрана.

     Навигационное меню (Navigation Rail), расположенное в левой части главного экрана состоит из следующих элементов:
 кнопка добавления проектов - в верхней части навигационного меню расположена кнопка добавления новых проектов. Эта кнопка представлена иконкой с плюсом, которая является универсальным символом создания или добавления нового элемента. При нажатии на эту кнопку пользователи могут начать процесс создания нового проекта, что включает в себя задание названия проекта, выбор иконки для проекта и импорт существующего проекта в формате OpenAPI. Этот элемент интерфейса играет ключевую роль в управлении проектами и способствует легкому доступу к созданию новых рабочих пространств в приложении;
 пользовательские проекты - в центральной части Navigation Rail расположен список пользовательских проектов. Каждый проект представлен иконкой и названием, что позволяет пользователям легко идентифицировать и переключаться между текущими проектами. Иконки проектов могут быть выбраны пользователями при создании или могут быть автоматически сгенерированы приложением для уникального представления каждого проекта. Эта часть меню предоставляет быстрый доступ к работе над множеством проектов, что особенно удобно в многофункциональных или многопользовательских средах;
 кнопка настроек приложения - в нижней части Navigation Rail расположена кнопка настроек приложения. Это иконка в виде шестеренки или инструмента, символизирующая доступ к техническим и пользовательским настройкам. При нажатии на эту кнопку открывается меню настроек, где пользователи могут изменять различные параметры приложения, такие как темы оформления, языковые настройки, конфигурации подписей. Доступ к настройкам через главное меню упрощает настройку приложения под индивидуальные нужды пользователя и улучшает общее взаимодействие с системой.
     Navigation Rail в Flutter — это виджет навигации, который предлагает современный, компактный и эффективный способ организации навигации в приложениях, особенно полезный для приложений на рабочих станциях или устройствах с большими экранами. Он обычно располагается по левому краю экрана и предоставляет вертикальное меню для перехода между различными основными разделами приложения. Этот компонент особенно хорошо подходит для приложений, требующих быстрого доступа к нескольким основным функциям, и может быть альтернативой боковой панели навигации или нижней панели вкладок. Навигационное меню отображено на рисунке 4.
     

Рисунок 4 -  часть навигационного меню с подписями.
	
     При нажатии на кнопку добавления проекта в навигационном меню, в центре экрана появится диалоговое окно «Создать или импортировать проект», состоящее из выпадающего списка для выбора иконки, поля ввода названия проекта и трёх кнопок: импорт проекта, отмена и создание проекта, это диалоговое окно отображено на рисунке 5.


Рисунок 6 - диалоговое окно «Создать или импортировать проект».
     
     При нажатии правой кнопкой мыши по любому из проектов в навигационном меню, появляется выпадающий список (контекстное меню), содержит такие пункты как «Переименовать» и «Удалить», это отображено на рисунке 7.
     

Рисунок 7 - контекстное меню проекта.
     
     При нажатии на кнопку настроек приложения в навигационном меню, в центре экрана появится диалоговое окно «Настройки», состоящее из пяти структурных элементов Card и кнопки закрытия настроек, это диалоговое окно отображено на рисунке 8. Подробное описание содержания элементов Card в настройках:
 первый пункт настроек содержит двухпозиционный переключатель, меняющий состояние отображения подписи проекта, а именно отображение всех подписей и отображение подписи только у выбранного проекта;
 второй пункт настроек содержит список разноцветных элементов RadioButton, выбор которых меняет цветовую палитру приложения на стандартный цвет Flutter (светло-фиолетовый), индиго, синий, бирюзовый, зелёный, жёлтый, оранжевый, тёмно-оранжевый и розовый;
 третий пункт настроек содержит переключатель световой темы, который переключает световую тему приложения с темной на светлую и наоборот;
 четвёртый пункт настроек содержит кнопки для переключения языка, при нажатии на которые, мгновенно меняется язык приложения;
 пятый пункт настроек является разделом для управления аккаунтом пользователя. В нём можно удалить аккаунт, выйти из него или верифицировать почту для полноценного использования приложения.
     

Рисунок 8 - общий вид диалогового окна настроек.

     В центральной части приложения расположена рабочая часть приложения, содержащая в левой части список API или тесткейсов, а также содержащая в верхней части название проекта и переключатель между вкладками для просмотра API и тестовых случаев. Общая структура рабочей области приложения отображена на рисунке 9.


Рисунок 9 - общий вид рабочей области приложения

     Как говорилось ранее - рабочая область делится на две части: API и тестовые случаи. 
     Вкладка API содержит две основные области - список API, отсортированный по папкам и область детальной информации о выбранном API. Список содержит информацию об общем количестве элементов, а также обладает фильтрацией по методам, эндпойнтам и статусам. Область детальной информации имеет общую информативную область, содержащую метод, эндпойнт, описание и статус, а также имеет 4 блока: «Схема JSON», «Связанные тестовые случаи», «Пример запроса», «Пример ответа». Последние два из четырёх блоков имеют переключатель по коду, например 200 и 304, который обозначает тот или иной код ответа или запроса; cписок отображён на рисунке 10, а область детальной информации об API отображена на рисунке 11.
     

Рисунок 10 - часть списка API.

Рисунок 11 - область детальной информации об API.

     Вкладка тестовых случаев содержит две основные области - список папок и тестовых случаев, а также область детальной информации о тесткейсе. 
     Список в верхней своей части имеет кнопку создания папки с тесткейсами или тесткейса, если список находится в режиме списка тексткейсов - то слева от кнопки для создания тесткейса появляется кнопка возвращения в режим списка папок. У каждого элемента списка (у папки или у тесткейса) есть кнопка, по нажатии на которую появляется контекстное меню удаления или переименования выбранного элемента списка. Этот список отображён на рисунке 12.
     
     
Рисунок 12 - список папок с тестовыми случаями и список тестовых случаев.
     
     Область детальной информации имеет поля для ввода названия тестового случая, поле поиска API для связи с ними, список связанных API, который позволяет удобно и быстро находить API путём ввода части названия и подбора подходящих API, блок описания, содержащий URL на TMS, а также поле для описания тестового случая. Область детальной информации об API отображена на рисунке 13.
     

Рисунок 13 - область детальной информации о тестовом случае.
    4 Экономическое обоснование работы
     
     
     4.1	Планирование работы 
     
     
     ProjectLibre является открытым и доступным инструментом, который облегчает процесс управления проектами, предоставляя профессиональные возможности, которые были бы доступны только в дорогостоящем программном обеспечении. Он объединяет в себе функции, необходимые для эффективного планирования, выполнения и мониторинга проектов, делая его ценным ресурсом для менеджеров проектов в самых разных сферах деятельности, от строительства до разработки программного обеспечения.
     Среди ключевых функций ProjectLibre – диаграмма Гантта, которая является стандартом де-факто для визуализации графика проекта. Она позволяет пользователям наглядно отслеживать прогресс задач и их взаимосвязи, а также устанавливать вехи. Это важно для управления временными рамками проекта и обеспечения соблюдения установленных сроков.
     ProjectLibre также включает инструменты для моделирования сетевого трафика, которые позволяют менеджерам проектов анализировать последовательности действий и оптимизировать их для уменьшения общего времени выполнения проекта. Это полезно для идентификации критических путей и управления рисками, что делает процесс планирования более надежным и предсказуемым.
     Распределение ресурсов – еще один важный аспект управления проектами. ProjectLibre позволяет управлять ресурсами с учетом их доступности и стоимости. Это обеспечивает оптимальное использование трудовых, материальных и финансовых ресурсов, предотвращая перерасход и минимизируя простои.
     Первым этапом планирования работ в ProjectLibre является распределение времени на задачи и постановка задач на диаграмме, также на этой диаграмме необходимо расставить связи между задачами, что отображено на рисунке 14.
     

     
     Для управления зависимостями между задачами потребуется разработать подробный сетевой график проекта. На рисунке 15 отображён сетевой график.
     

      
     
     Затем, следует проанализировать и выделить ресурсы, которые будут необходимы для разработки проекта; на рисунке 16 демонстрируется детализация ресурсов, использованных в процессе работы.


      

     На рисунке 17 представлена таблица, которая детально отображает перечень ресурсов, включая материальные, человеческие и финансовые, необходимые для каждого этапа проекта, их количество и распределение по времени.

    

     На рисунке 18 представлена диаграмма Ресурсно-Разбивочной Структуры (RBS), визуализирующая иерархию ресурсов проекта, их категоризацию и уровни ответственности в рамках управления проектом.
     

     
     На рисунке наглядно показано, сколько денег было потрачено на каждый вид ресурса в отдельности, также программа автоматически рассчитала общую стоимость использования каждого из них, что значительно упрощает бюджетирование и финансовое планирование на последующих этапах проекта.
     
    

     При определении стоимости проекта учитываются все связанные с ним финансовые аспекты, включая точные расчеты материальных затрат, зарплаты персонала, амортизационные отчисления и прочие сопутствующие расходы. Эти меры предпринимаются для точного определения и представления общей себестоимости реализации проекта.
     Материальные затраты представляют собой финансовые издержки, которые организация несет в процессе приобретения сырья и материалов, необходимых для создания конечной продукции, являющейся целью производственного процесса.
     В данном контексте проекта не было необходимости в покупке специализированного оборудования или программного обеспечения, что часто является существенной статьей расходов. Вместо этого, в расчет вещественных издержек включены исключительно затраты на электроэнергию, которые необходимы для поддержания работы используемой техники и оборудования.
     В рамках проекта, проводимого с использованием программного обеспечения ProjectLibre, была выполнена детализированная оценка стоимости электроэнергии, необходимой для работы персонального компьютера в процессе выполнения проектных задач. Расчет стоимости был основан на конкретных параметрах использования электроэнергии и тарифах на электричество, установленных в городе Таганрог Ростовской области.
     Для расчетов было взято во внимание, что персональный компьютер, задействованный в проекте, имеет потребляемую мощность 0,55 кВт. С учетом местного тарифа на электроэнергию, который составляет 4,25 рублей за киловатт в час, было вычислено, что стоимость одного часа работы компьютера составляет 2,125 рубля. Этот расчет был произведен по формуле, умножив потребляемую мощность устройства на стоимость киловатт-часа.
     Для целей проектного учета и упрощения взаимодействия с программным обеспечением ProjectLibre было принято решение округлить полученную стоимость до 2 рублей за час работы. Это округление было необходимо из-за ограничений программы в отношении обработки десятичных значений стоимости. В результате в ProjectLibre был создан ресурс с наименованием «ПК», в который была внесена округленная стоимость электроэнергии. Это позволило автоматизировать расчеты затрат на электроэнергию по мере продвижения проекта и обеспечило точность финансового планирования.Таким образом на электричество было потрачено 216 рублей, то есть Зм = 216 руб.
     Фонд оплаты труда – это все расходы на заработную плату работникам, в том числе премии и надбавки.
     Затраты на оплату труда являются значительной частью общих расходов любого проекта, особенно в сферах, где ключевую роль играет интеллектуальный труд, таких как разработка программного обеспечения. Они включают в себя не только основную зарплату сотрудников, но и дополнительные выплаты, которые могут зависеть от уровня квалификации, сложности задач и других факторов.
     Основная зарплата разработчиков обычно начисляется на основе часовой ставки, которая умножается на количество часов, фактически затраченных на выполнение работы. Этот метод расчета позволяет точно оценить трудозатраты на каждый отдельный элемент или этап проекта. В контексте использования ProjectLibre для управления проектом, важно отметить, что в прошлой главе было указано количество часов, потраченное на разработку, что дало возможность оценить общие затраты на оплату труда сотрудников, задействованных в проекте.
     Для расчетов в ProjectLibre был добавлен человеческий ресурс со стоимостью 400 рублей за час. Эта ставка отражает оплату труда одного разработчика и используется для расчета общих затрат на разработку в рамках проекта. Такой подход не только облегчает процесс бюджетирования и финансового планирования, но и помогает в анализе рентабельности проекта, позволяя менеджерам проектов и заинтересованным сторонам видеть, насколько эффективно используются ресурсы и какова общая стоимость трудовых затрат. Таким образом на человеческий ресурс потрачено 70400 руб, значит Фзп = 70400 руб.
    
5 Безопасность и экологичность работы


   

     Информация изначально является набором данных, которые могут передаваться разнообразными способами: устно, письменно, через сигналы и другие средства коммуникации между людьми, автоматами и в природе. В научном понимании информация обладает универсальными свойствами, включающими в себя передачу сведений, сигналов и признаков между субъектами. С философской точки зрения, информация существует независимо от человека и рассматривается как свойство материи.
     В контексте информационной безопасности, этот термин означает состояние защищенности национальных, общественных и личных интересов в информационной сфере. Защита информации включает в себя комплекс мероприятий, которые охватывают правовые, организационные и технические аспекты. Эти меры направлены на идентификацию, предотвращение и минимизацию угроз информационной безопасности и их воздействия на информационные системы.
     Субъекты информационных отношений определяются как владельцы и пользователи информации, а также элементы инфраструктуры, поддерживающие информационные процессы, включая помещения, системы энергоснабжения и связи, а также персонал, работающий с данными. Угроза информации рассматривается как потенциальная возможность несанкционированного воздействия на защищаемые объекты, что может привести к утечке, искажению или разглашению конфиденциальной информации.
     
     
     
   
     

     Кроме информационной безопасности, важно также обеспечить безопасность труда для разработчиков. В этом контексте рекомендуется проведение обучений и тренингов по охране труда. Разработчики должны быть обучены правильной работе с компьютером и другими офисными устройствами, а также способам предотвращения травм и профессиональных заболеваний.
     Рабочие места разработчиков должны быть эргономично оборудованы, чтобы минимизировать риски возникновения напряжения мышц и болей в спине. Кроме того, разработчики должны регулярно делать перерывы в работе для предотвращения перенапряжения и усталости.
     Использование специально разработанного эргономичного оборудования, такого как клавиатуры и мыши, способствует снижению риска возникновения травм рук и запястий. Также, в офисе должны быть установлены средства предупреждения пожаров и аварий, разработаны планы эвакуации и действий в случае чрезвычайных ситуаций.
     Соблюдение нормативов и требований охраны труда, установленных законодательством и политикой компании, является обязательным. Обеспечение безопасности труда для разработчиков веб-приложения не только предотвращает травмы и болезни, но также способствует повышению производительности, улучшению качества работы и общего благополучия персонала.
      

    
     
     
     Опасные производственные факторы представляют собой элементы рабочей среды, чье воздействие в определенных условиях может вызвать травмы или другие внезапные проблемы со здоровьем. С другой стороны, вредные производственные факторы могут привести к заболеваниям или снижению работоспособности. Для обеспечения комфортной и безопасной среды труда принимаются различные меры, включая технические, технологические, санитарно-гигиенические, организационные и эстетические.
     Работа с компьютером требует соблюдения определенных правил, чтобы минимизировать нагрузку на глаза и нервную систему. Это включает в себя обеспечение оптимальных значений визуальных параметров и установленных перерывов. Рабочая мебель должна быть настроена таким образом, чтобы соответствовать росту и обеспечивать удобную позу работника. Рабочий стол должен быть правильно сконструирован, чтобы разместить оборудование и обеспечить удобство в работе.
     При работе с электроустановками важно соблюдать организационные и технические меры безопасности. Это включает в себя периодический медицинский контроль работников и использование защитных механизмов, таких как защитное заземление и зануление. Эти меры предназначены для минимизации рисков и обеспечения безопасного рабочего процесса.
     Кроме того, для обеспечения безопасности при работе с электроустановками, необходимо строго соблюдать правила устройства электроустановок, включая правила заземления. Заземление является важной мерой защиты при работе с оборудованием, подключенным к трехфазным сетям напряжением до 1000 В с изолированной нейтралью. Оно способствует снижению потенциалов корпусов оборудования и обеспечивает срабатывание максимальной токовой защиты при возникновении замыкания на корпус.


     Результатом выпускной квалификационной работы стала информационная система для автоматизированного тестирования API.
     Для достижении цели выпускной квалификационной работы были решены следующие задачи:
 составлен список требуемого функционала;
 разработана базовая модель системы;
 добавлен требуемый функционал;
 разработан интерфейс для системы;
 система сделана отказоустойчивой к ошибкам.
 сделано экономическое обоснование работы;
 рассмотрены вопросы информационной безопасности и охраны труда
     В заключение следует подчеркнуть важность и актуальность разработки системы анализа API и тестовых случаев, предназначенной для использования тестировщиками в сфере разработки программного обеспечения. Учитывая возрастающую сложность и масштабы современных программных продуктов, появление инструмента, который упрощает процесс тестирования и анализа API становится крайне необходимым.
     Разработанная система поможет тестировщикам сократить время, затрачиваемое на анализ и оценку API и связанных с ними тестовых случаев. Она также уменьшит риски, связанные с возможностью пропуска критических ошибок, что может привести к улучшению качества и надежности программных продуктов. Благодаря функциям визуализации и кластеризации данных о различных API и тест-кейсах, система предоставит тестировщикам информацию в удобной, легко усваиваемой форме, что значительно упростит процесс анализа и принятия решений по корректировке тестов и улучшению программного обеспечения.
     Благодаря использованию фреймворка Flutter, как основного инструмента для создания интерфейса приложения,  разработанную систему можно легко и быстро интерпретировать на других платформах таких как Windows, iOS, MacOS и Android, а также всегда следовать тенденциям моды в интерфейсах приложений благодаря обширной библиотеке стилей Google.
     Экономическое обоснование работы демонстрирует потенциальные выгоды как для конечных пользователей, так и для предприятий, занимающихся продажей подписок или лицензий на программное обеспечение для разработки. 
     Благодаря повышению удобства работы с API и тестовыми случаями у потребителей освобождается время и улучшается качество работы, что способствует улучшению качества и ускорению производства конечного продукта.
     Наконец, уделенное внимание вопросам безопасности и экологичности разработки гарантирует сохранность данных пользователей и соответствие продукции современным стандартам эко-технологий.
     В целом, система для автоматизированного тестирования API, разработанная в рамках данного проекта, представляет собой значимый шаг в направлении улучшения пользовательского опыта и повышения эффективности разработки сайтов или приложений.
     Разработанное приложение предоставляет пользователю следующие возможности: совместную работу, импорт и создание проектов, удобную кастомизацию интерфейса, отображение подробной информации для каждого эндпойнта, создание тест-кейсов, а также отображение связей между эндпойнтами и тест-кейсами.

     
    


