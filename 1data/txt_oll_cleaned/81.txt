
Введение


На сегодняшний день развитие компьютерных технологий достигло такого уровня, что ни одна более или менее крупная компания не может обойтись без компьютера (компьютеров). Одни компании используют их просто для расчетов, печати документов и т.д., тогда как другие полностью зависят от них (интернет - магазины, проектировочные компании и т.д.). Все это приводит к тому, что любой компании рано или поздно придется закупать программное обеспечение, необходимое для его нужд. Однако, многое ПО, которое продается на современном рынке, имеет универсальное назначение, и поэтому, покупая такую программу, человек переплачивает за ненужные ему функции. Более логичным шагом является разработка собственного ПО, которое он создаст так, как ему необходимо. Конечно, без каких - либо программ обойтись нельзя (ОС Windows), но при помощи них, при определенных навыках и умениях, можно создать нужную программу.
Цель исследования - разработать информационную систему, обеспечивающую совместное хранение и эффективную совместную работу с кодом, с учетом актуальных требований к безопасности, масштабируемости и удобству использования.
Задачи исследования:
	провести анализ существующих систем для совместного хранения и работы с кодом, таких как GitHub, GitLab и Bitbucket, выделив их преимущества и недостатки;
	определить функциональные и нефункциональные требования к разрабатываемой системе на основе анализа потребностей потенциальных пользователей;
	разработать архитектуру информационной системы, обеспечивающую масштабируемость, безопасность и высокую доступность;
	реализовать ключевые компоненты системы, включая модуль репозиториев, систему управления пользователями, инструменты для совместной разработки и системы контроля версий.
Объект исследования – современные информационные системы и платформы для хранения и совместной работы с исходным кодом.
Предмет исследования – информационные технологии и методы, используемые для разработки и реализации систем совместного хранения и работы с кодом.

1 Теоретический анализ


1.1. Понятие ИС, классификация ИС


Понятие информационной системы (ИС).
Информационная система (ИС) – это совокупность взаимосвязанных компонентов, предназначенных для сбора, хранения, обработки, анализа и передачи информации. Эти компоненты могут включать аппаратное и программное обеспечение, базы данных, сети и процедурные методики. Основная цель ИС – поддержка процессов принятия решений, координации и управления на всех уровнях организации.
Основные компоненты ИС.
Аппаратное обеспечение: компьютеры, серверы, устройства хранения данных и сетевое оборудование.
Программное обеспечение: операционные системы, прикладные программы, системы управления базами данных (СУБД) и специальные приложения.
Базы данных: организованные коллекции данных, которые управляются СУБД.
Сетевое обеспечение: локальные (LAN) и глобальные сети (WAN), интернет и интранет.
Процедуры и методики: политики и процедуры, регулирующие работу системы и её пользователей.
Пользователи: люди, которые взаимодействуют с системой, включая ИТ-персонал и конечных пользователей.
Классификация информационных систем.
Информационные системы можно классифицировать по различным критериям, в зависимости от их функций, области применения, уровня управления, архитектуры и используемых технологий.
По функциям.
Управленческие информационные системы (ManagementInformationSystems, MIS):
	предназначены для поддержки управленческих функций в организации, включая планирование, контроль и принятие решений;
	примеры: системы отчётности, системы планирования ресурсов предприятия (ERP).
Системы поддержки принятия решений (DecisionSupportSystems, DSS):
	обеспечивают поддержку принятия сложных и неструктурированных решений, предоставляя аналитические данные и модели;
	примеры: системы анализа данных, системы прогнозирования.
Исполнительные информационные системы (ExecutiveInformationSystems, EIS):
	предоставляют стратегическую информацию высшему руководству для поддержки долгосрочного планирования;
	примеры: системы мониторинга ключевых показателей эффективности (KPI), информационные панели (dashboards).
Экспертные системы (ExpertSystems):
	имитируют мышление эксперта в конкретной области для предоставления рекомендаций и решений;
	примеры: системы диагностики, системы поддержки медицинских решений.
По области применения.
Производственные информационные системы:
	поддерживают управление производственными процессами, включая планирование производства, управление качеством и логистику;
	примеры: системы управления производственными процессами (MES), системы управления цепочками поставок (SCM).
Финансовые информационные системы:
	обеспечивают управление финансовыми операциями, бухгалтерией и отчетностью;
	примеры: системы бухгалтерского учёта, системы управления бюджетом.
Маркетинговые информационные системы:
	анализируют данные о рынке, поддерживают управление продажами и рекламой;
	примеры: системы управления взаимоотношениями с клиентами (CRM), системы анализа рыночных данных.
Информационные системы управления персоналом (HRIS):
	помогают управлять кадрами, включая подбор, обучение и оценку сотрудников;
	примеры: системы управления кадрами, системы расчёта заработной платы.
По уровню управления.
Операционные системы (OperationalSystems):
	поддерживают ежедневные операционные процессы организации;
	примеры: системы обработки транзакций (TPS), системы управления складом.
Тактические системы (TacticalSystems):
	помогают в управлении среднесрочными планами и ресурсами;
	примеры: системы управления проектами, системы планирования и прогнозирования.
Стратегические системы (StrategicSystems):
	обеспечивают поддержку долгосрочного планирования и принятия стратегических решений;
	примеры: системы стратегического планирования, системы анализа конкурентной среды.
По архитектуре.
Централизованные ИС:
	все данные и приложения размещаются на одном центральном сервере;
	примеры: мэйнфреймы, большие серверные системы.
Распределенные ИС:
	данные и приложения распределены между несколькими серверами и клиентами;
	примеры: клиент-серверные системы, одноранговые сети.
Облачные ИС:
	используют облачные технологии для хранения данных и приложений, предоставляя доступ к ним через интернет;
	примеры: облачные сервисы, системы SaaS (Softwareas a Service).
По технологиям.
Традиционные ИС:
	используют старые технологии и архитектуры, такие как мэйнфреймы и клиент-серверные модели;
	примеры: системы на основе COBOL, традиционные ERP-системы.
Современные ИС:
	используют новейшие технологии, такие как большие данные (BigData), искусственный интеллект (AI) и интернет вещей (IoT);
	примеры: системы машинного обучения, платформы анализа больших данных.


1.2 Предметная область


Автоматизация предметной области предполагает использование информационных систем для оптимизации и улучшения бизнес-процессов в конкретной сфере деятельности. Основные цели автоматизации включают:
	повышение продуктивности: ускорение выполнения задач за счет автоматизации рутинных операций, уменьшение времени на обработку данных и устранение необходимости в ручном вводе данных;
	снижение операционных затрат: уменьшение расходов на выполнение рутинных и повторяющихся операций, снижение затрат на бумажные документы и улучшение использования ресурсов;
	улучшение качества продукции и услуг: автоматизация процессов позволяет уменьшить количество ошибок, связанных с человеческим фактором, и обеспечивает более высокое качество выполняемых работ и предоставляемых услуг;
	повышение конкурентоспособности: современные информационные системы позволяют организациям быстрее реагировать на изменения на рынке, внедрять инновации и улучшать свои продукты и услуги;
	оптимизация управления ресурсами: эффективное управление ресурсами, включая человеческие ресурсы, финансовые средства и материальные запасы, за счет автоматизации процессов планирования, учета и контроля.
Функционал автоматизации.
Управление проектами:
	планирование, мониторинг и контроль выполнения проектов с использованием специализированных программных средств;
	примеры функций: диаграммы Ганта, контроль сроков выполнения, управление задачами и ресурсами.
Управление задачами:
	постановка, распределение и контроль выполнения задач, что позволяет обеспечить прозрачность и контроль над рабочим процессом;
	примеры функций: создание и назначение задач, установка приоритетов, отслеживание прогресса.
Контроль версий:
	отслеживание изменений в проекте, работа с несколькими версиями кода, что позволяет управлять различными редакциями документов и программного обеспечения;
	примеры функций: хранение истории изменений, возможность отката к предыдущим версиям, слияние изменений.
Управление пользователями и правами доступа:
	аутентификация, авторизация и распределение прав доступа, что обеспечивает безопасность данных и контроль над действиями пользователей;
	примеры функций: регистрация и вход пользователей, назначение ролей и прав доступа, аудит действий.
Анализ данных:
	сбор и анализ данных для принятия управленческих решений, что позволяет выявлять тенденции, прогнозировать результаты и оценивать эффективность действий;
	примеры функций: генерация отчетов, визуализация данных, прогнозирование и моделирование.


1.3 Обзор существующих ИС


Достоинства:
	широкий функционал для управления проектами и задачами;
	гибкость настройки рабочих процессов;
	интеграция с другими инструментами (Bitbucket, Confluence).
Недостатки:
	высокая стоимость для больших команд;
	сложность настройки для новых пользователей.
GitHub.
Достоинства:
	удобный интерфейс для совместной работы над кодом;
	мощные инструменты для контроля версий;
	большое сообщество и поддержка.
Недостатки:
	ограниченная функциональность в бесплатной версии;
	публичность репозиториев в бесплатном тарифе (если не использовать образовательные или открытые проекты).
Trello.
Достоинства:
	интуитивно понятный интерфейс и простота использования;
	визуальное представление задач;
	гибкость в настройке досок и карточек.
Недостатки:
	ограниченные возможности для крупных проектов и сложных рабочих процессов;
	меньше интеграций с профессиональными инструментами разработки.
Bitbucket.
Достоинства:
	глубокая интеграция с Jira;
	бесплатные частные репозитории;
	хорошая поддержка командной работы и контроля версий.
Недостатки:
	менее развитая экосистема по сравнению с GitHub;
	некоторые функции доступны только в платных тарифах.
Confluence.
Достоинства:
	отличные возможности для совместной работы и документирования;
	интеграция с Jira и Bitbucket;
	мощные инструменты для управления знаниями.
Недостатки:
	высокая стоимость лицензии;
	может быть избыточным для малых команд и простых проектов.
1.4 Выбор базы данных


Для разработки данного веб-приложения были выбраны следующие инструменты и технологии.
Flask.
Преимущества: Flask - легковесный и гибкий веб-фреймворк, который позволяет быстро создавать веб-приложения. Он предоставляет базовый набор функций, что делает его идеальным для небольших и средних проектов.
Почему Flask: Flask предоставляет модульность и расширяемость, что позволяет интегрировать дополнительные библиотеки и расширения по мере необходимости. Его простота и низкий порог входа делают его отличным выбором для быстрого прототипирования и разработки.
SQLAlchemy.
Преимущества: SQLAlchemy - мощная ORM-библиотека для Python, которая позволяет работать с реляционными базами данных более абстрактно и удобно. Она предоставляет средства для определения моделей данных, выполнения запросов и управления транзакциями.
Почему SQLAlchemy: Использование ORM упрощает работу с базой данных, позволяя разработчикам писать код на Python вместо SQL-запросов. Это повышает читаемость и поддержку кода. SQLAlchemy также поддерживает различные СУБД, что обеспечивает гибкость при выборе базы данных.
SQLite.
Преимущества: SQLite - легковесная и встраиваемая реляционная база данных, которая не требует отдельного серверного процесса. Все данные хранятся в одном файле, что упрощает управление и развертывание.
Почему SQLite: SQLite была выбрана для разработки и тестирования из-за своей простоты настройки и использования. Она идеально подходит для небольших и средних проектов, где нет необходимости в сложной инфраструктуре базы данных. SQLite обеспечивает достаточно высокую производительность для большинства задач разработки и тестирования.
Flask-Migrate и Flask-Script.
Преимущества: Flask-Migrate использует Alembic для управления миграциями базы данных, что упрощает отслеживание изменений в структуре базы данных и их применение. Flask-Script предоставляет поддержку для написания и выполнения внешних скриптов, что полезно для управления приложением и выполнения административных задач.
Почему Flask-Migrate и Flask-Script: Эти инструменты облегчают процесс разработки и развертывания приложения, обеспечивая удобные средства для управления изменениями базы данных и выполнения команд из командной строки.
Flask-Bcryptи Flask-Login.
Преимущества: Flask-Bcrypt используется для хэширования паролей, что обеспечивает безопасность хранения пользовательских данных. Flask-Login управляет сессиями пользователей, предоставляя функции аутентификации и авторизации.
Почему Flask-Bcrypt и Flask-Login: Безопасность данных и управление доступом являются критически важными аспектами любого веб-приложения. Эти расширения обеспечивают простую интеграцию безопасности и аутентификации в приложение.
Выбор Flask в качестве фреймворка для веб-приложения был обусловлен его легковесностью, гибкостью и расширяемостью. SQLAlchemy была выбрана за ее мощные возможности ORM, которые упрощают работу с реляционными базами данных и повышают читаемость кода. SQLite была выбрана как база данных из-за ее простоты настройки и использования, что делает ее идеальной для разработки и тестирования. Все эти инструменты в совокупности создают удобную и эффективную среду для разработки веб-приложений на Python.?
2 Аналитический раздел


2.1 Проектирование ИС


Проект представляет собой веб-приложение, созданное на базе фреймворкаFlask. Основная цель приложения - предоставление пользователям возможностей для создания, управления и обмена проектами и файлами.
Основные функции и автоматизация.
Регистрация и аутентификация пользователей:
	регистрация новых пользователей с проверкой уникальности имени пользователя и электронной почты;
	аутентификация пользователей через форму входа;
	управление сессиями пользователей (вход, выход, восстановление пароля).
Управление проектами:
	создание новых проектов;
	редактирование и удаление существующих проектов;
	просмотр деталей проекта, включая все связанные файлы и загруженные файлы;
	предоставление доступа к проектам другим пользователям.
Управление файлами:
	создание новых файлов в рамках проекта;
	редактирование и удаление существующих файлов;
	загрузка файлов на сервер и их привязка к проектам;
	предоставление доступа к файлам другим пользователям.
Управление пользователями:
	поиск пользователей по имени или электронной почте;
	управление доступом пользователей к проектам и файлам;
	создание и управление учетными записями администраторов.
Интерфейс и безопасность:
	использование шаблонов для отображения информации пользователю;
	защита маршрутов, требующих аутентификации, с помощью декораторов @login_required;
	хэширование паролей с использованием библиотеки Bcrypt;
	защита от подделки межсайтовых запросов (CSRF) и других атак.
Структура проекта:
	app.py: основной файл приложения, содержит конфигурацию Flask, модели данных, маршруты и логику приложения;
	config.py: файл конфигурации, определяющий основные настройки приложения, включая параметры базы данных;
	db_create.py: скрипт для создания и инициализации базы данных с примером добавления данных;
	manage.py: скрипт для управления миграциями базы данных с использованием Flask-Migrate и Flask-Script.
Пример кода и логика:
	модели данных: описание моделей пользователей, проектов, файлов и их взаимосвязей;
	маршруты: обработка запросов от пользователей и взаимодействие с базой данных для выполнения операций над проектами и файлами;
	функции безопасности: управление хэшированием паролей и проверка прав доступа пользователей.
На рисунке 1 показана ER-модель базы-данных

 
Рисунок 1 – ER-модель базы-данных


2.2 Выбор и обоснование программных средств


Выбор программных средств:
Flask.
Обоснование: Flask - это микро-фреймворк для Python, который предоставляет разработчикам базовые инструменты для создания веб-приложений. Flask отличается простотой и гибкостью, что делает его идеальным выбором для небольших и средних проектов, требующих кастомных решений. В данном проекте Flask используется для создания веб-сервера, обработки маршрутов и управления сессиями пользователей.
SQLAlchemy.
Обоснование: SQLAlchemy - это ORM (Object-RelationalMapping) библиотека для Python, которая обеспечивает удобный и мощный интерфейс для работы с базами данных. SQLAlchemy позволяет абстрагироваться от конкретного типа базы данных и использовать единый синтаксис для выполнения CRUD операций. В данном проекте SQLAlchemy используется для определения моделей данных и взаимодействия с базой данных SQLite.
Flask-Migrate и Flask-Script.
Обоснование: Flask-Migrate и Flask-Script используются для управления миграциями базы данных. Flask-Migrate предоставляет интерфейс для работы с Alembic, инструментом для миграций, который позволяет изменять структуру базы данных без потери данных. Flask-Script добавляет поддержку внешних скриптов и команд для управления приложением. В данном проекте эти инструменты используются для создания, обновления и управления схемой базы данных.
Flask-Bcrypt.
Обоснование: Flask-Bcrypt - это расширение для Flask, которое предоставляет функции для хэширования паролей с использованием алгоритма Bcrypt. Хэширование паролей обеспечивает безопасность учетных данных пользователей, делая их нечитаемыми в случае компрометации базы данных. В данном проекте Flask-Bcrypt используется для безопасного хранения паролей пользователей.
Flask-Login.
Обоснование: Flask-Login - это расширение для Flask, которое предоставляет функции для управления сессиями пользователей, включая аутентификацию и авторизацию. Flask-Login упрощает реализацию таких функций, как вход, выход и ограничение доступа к защищенным маршрутам. В данном проекте Flask-Login используется для управления пользовательскими сессиями и проверки прав доступа.
SQLite.
Обоснование: SQLite - это легковесная и встраиваемая база данных, которая не требует настройки и управления сервером. Она идеально подходит для разработки и тестирования небольших приложений. В данном проекте SQLite используется в качестве основной базы данных для хранения информации о пользователях, проектах и файлах.
Jinja2.
Обоснование: Jinja2 - это мощный шаблонизатор для Python, который используется в Flask для генерации HTML страниц. Jinja2 позволяет создавать динамические веб-страницы с использованием шаблонов, включающих переменные и управляющие структуры. В данном проекте Jinja2 используется для рендеринга шаблонов страниц, таких как регистрация, вход, просмотр проектов и файлов.
Werkzeug.
Обоснование: Werkzeug - это WSGI утилита для Python, которая используется в Flask для обработки запросов и ответов. Werkzeug предоставляет функции для управления сессиями, обработки файлов и маршрутизации запросов. В данном проекте Werkzeug используется для обеспечения надежной и эффективной работы веб-сервера.
Выбор программных средств для данного проекта основан на их совместимости, надежности и удобстве использования. Flask и связанные с ним библиотеки обеспечивают гибкость и масштабируемость приложения, что позволяет легко добавлять новые функции и поддерживать существующий код. Использование SQLAlchemy и Flask-Migrate упрощает управление базой данных, а Flask-Bcrypt и Flask-Login обеспечивают высокий уровень безопасности для пользователей. SQLite выбран в качестве базы данных для упрощения разработки и тестирования приложения.
2.3Функциональная модель системы


Входные данные:
	данные репозитория: информация о репозитории, которая может включать его название, описание, владельца и права доступа;
	данные записи: информация о коммитах, таких как автор коммита, время коммита, описание изменений;
	файлы: исходный код, документы, изображения и другие файлы, хранящиеся в репозитории;
	политика безопасности: правила и процедуры, обеспечивающие защиту данных и контроль доступа;
	политика создания/удаления репозиториев: правила и процедуры, определяющие порядок создания и удаления репозиториев;
	интеграции: данные, поступающие из интеграций с другими системами, такими как веб-интерфейсы, базы данных, системы управления версиями (например, Git) и файловые системы.
Выходные данные.
	список репозиториев: перечень всех доступных репозиториев с базовой информацией о каждом из них;
	список записей: перечень коммитов, связанных с выбранным репозиторием;
	создание/удаление репозитория: подтверждение успешного создания или удаления репозитория, включая обновленный список репозиториев;
	создание/редактирование/удаление записи: подтверждение успешного создания, редактирования или удаления коммита, включая обновленный список записей;
	подтверждение прикрепления файла: подтверждение успешной загрузки и прикрепления файла к репозиторию.
Интеграции:
	веб-интерфейс: интерфейс для взаимодействия пользователей с системой через браузер.
	база данных: хранение всех данных системы, включая данные репозиториев, записи и файлы.
	система управления версиями (Git): обеспечение версионирования кода и управления коммитами.
	файловая система: физическое хранение файлов, загруженных в репозитории.
На рисунке 2 показана диаграмма-IEDF0.

 
Рисунок 2 – Диаграмма IDEF0

3 Проектный раздел


3.1 Описание создания БД


Определение конфигурации приложения.
В файле конфигурации (config.py) задаются основные параметры приложения, включая секретный ключ и URI для подключения к базе данных.

Инициализация приложения и подключение к базе данных.
В основном файле приложения (app.py) создается объект Flask, загружается конфигурация, инициализируется SQLAlchemy для работы с базой данных, а также настраиваются необходимые расширения (Bcrypt, LoginManager).

Создание моделей базы данных.
Определяются классы моделей для представления таблиц базы данных. Например, модель пользователя включает поля для идентификатора, имени пользователя, email, пароля и флага администратора.

Создание и применение миграций.
С помощью Flask-Migrate создаются и применяются миграции для управления изменениями структуры базы данных.
Основные команды для работы с миграциями включают:
	flaskdbinit - инициализация репозитория миграций;
	flaskdbmigrate -m "Описание миграции" - создание новой миграции;
	flaskdbupgrade - применение миграции к базе данных.
Инициализация базы данных и добавление начальных данных:
В специальном скрипте (db_create.py) выполняется инициализация базы данных, создание всех таблиц и добавление начальных данных (например, создание первого пользователя или администратора).


образом, процесс создания базы данных включает в себя определение конфигурации, инициализацию приложения и базы данных, создание моделей, управление миграциями и инициализацию базы данных с начальными данными. Выбранные инструменты и технологии обеспечивают удобство разработки и надежность хранения данных.


3.2 Описание создания визуального интерфейса


Страница авторизации представлена на рисунке 3.На странице есть два текстовых поля для ввода логина и пароля, а также кнопка "Войти" для подтверждения введенных данных. В левом верхнем углу находится "Окно регистрации". 

 
Рисунок 3 – Страница Авторизации
Страница «Аккаунт пользователя» показана на рисунке 4.

 
Рисунок 4 – Страница «Аккаунт пользователя»

Страница «Проект», где пользователь может видеть свои текущие проекты, добавлять новые, а при необходимости, выходить из своего аккаунта, представлена на рисунке 5.

 
Рисунок 5 – Страница «Проект»

Рисунок 6 демонстрирует страницу предоставления доступа.
 
Рисунок 6 – Страница предоставления доступа

Страница файла показана на рисунке 7.

 
Рисунок 7 – Страница файла
3.3 Тестирование ИС


Тестирование информационных систем (ИС) является одним из ключевых этапов их разработки и внедрения. Этот процесс предоставляет возможность убедиться в том, что система отвечает заявленным требованиям, работает надёжно и корректно, а также удовлетворяет нужды и ожидания пользователей. Тестирование ИС охватывает широкий спектр аспектов, включая функциональное, нагрузочное тестирование, тестирование безопасности, юзабилити и другие важные параметры. 
Основная цель тестирования информационных систем заключается в обнаружении ошибок и дефектов до их появления в реальной эксплуатации. Это позволяет избежать значительно более серьёзных проблем, которые могут возникнуть при использовании системы в реальных условиях. Независимо от того, насколько тщательно проектировалась и разрабатывалась система, ошибки неизбежны, поэтому тестирование является жизненно важным процессом на пути к созданию высококачественного конечного продукта.
Процесс тестирования начинается с составления плана тестирования. Этот документ содержит подробное описание стратегии и методов, которые будут использоваться при тестировании, а также порядок и сроки его проведения. План тестирования разрабатывается на основании технического задания и функциональных требований к системе. Для успешного проведения тестирования критически важно иметь чёткое представление о том, что именно будет тестироваться, каким образом и в каких условиях.
Существует несколько видов тестирования, каждый из которых имеет свою уникальную цель и использование специализированных методов. Например, функциональное тестирование направлено на проверку работоспособности всех функций системы в соответствии с их спецификациями. Разработчики и тестировщики создают тестовые сценарии, эмулирующие возможные действия пользователей, и на их основе проверяют корректность функционирования каждой отдельной части системы.
Нагрузочное тестирование является важным аспектом, который позволяет оценить, как система будет работать под значительной нагрузкой. Это тестирование имитирует условия высокой активности пользователей и проверяет, как система справляется с повышенными требованиями к ресурсам. Например, можно моделировать одновременное использование системы большим количеством пользователей и измерять времена реакции на запросы. Нагрузочное тестирование помогает выявить "узкие места" в производительности и позволяет оптимизировать систему перед её реальным применением.
Безопасность информационных систем также является ключевым аспектом тестирования. Любая информационная система должна быть защищена от несанкционированного доступа, утечек данных и других потенциальных угроз. В процессе тестирования на безопасность проводится проверка механизмов авторизации, аутентификации, контроля доступа, шифрования данных и других мер защиты. Специалисты по безопасности могут применять различные методы, включая тестирование на проникновение (penetrationtesting), в ходе которого они пытаются обнаружить уязвимости и проникнуть в систему, как если бы они были злоумышленниками.
Тестирование юзабилити также играет значительную роль. Даже если система безошибочно выполняет свои функции, она должна быть удобной и интуитивно понятной для пользователей. Тестировщики проводят обследования с пользователями, анализируют их поведение и собирают обратную связь. Это позволяет выявить возможные трудности в использовании системы и улучшить её интерфейс и общую пользовательскую опытность.
Интеграционное тестирование также весьма важно для комплексных систем. Это тестирование проверяет, как различные компоненты информационной системы работают вместе. Часто системы состоят из различных модулей, разработанных разными командами или даже организациями. Интеграционное тестирование нацелено на выявление проблем, связанных с взаимодействием этих модулей, таких как неправильная передача данных или конфликтные интерфейсы.
Исключение ошибок на ранних этапах разработки позволяет значительно сократить затраты на их исправление, ведь устранение дефектов на стадии проектирования обходится существенно дешевле, чем исправление на этапе эксплуатации
На рисунке 8 изображено открытие веб приложения и проверка авторизации.

 
Рисунок 8 – Авторизация

На рисунке 9 показана возможность создания проекта.

 
Рисунок 9 – Создание проекта
На рисунке 10продемонстрирована веб-страница создания проектов управления проектами.

 Рисунок 10 – Система управления проектами

На рисунке 11 можно увидеть процесс прикрепления файла проекта.

 
Рисунок 11 – Процесс прикрепления файла к проекту

На рисунке 12представлен созданный проект к которому был прикреплён файл. 
Рисунок 12 – Проект с прикреплённым файлом

На рисунке 13продемонстрирована возможность редактирования проекта.

 
Рисунок 13 – Редактирвоания проекта

На рисунке 14 показана возможность делится проектами с другими пользователями.
 
Рисунок 14 – Возможность делиться проектами

На рисунке 15изображен процесс передачи проектов путём выбора авторизированных пользователей.

 
Рисунок 15 – Процесс передачи проекта другому пользователю


4 Экономическое обоснование работы


4.1 Планирование работ

Projectlibre – это бесплатное программное обеспечение для управления проектами, которое предоставляет возможности для планирования, отслеживания и контроля выполнения проектов, а также для управления ресурсами и бюджетом проекта. Оно является альтернативой популярному платному ПО для управления проектами, такому как MicrosoftProject.
Список задач проекта представлен на рисунке 16.

 
Рисунок 16 – Список задач проекта

Диаграмма Ганта предназначена для визуализированиясложноуровневых последовательностей задач в течение времени. Диаграмма   представлена на рисунке 17.

 
Рисунок 17 – Диаграмма Ганта

График — это графический способ просмотра задач, зависимостей и критического пути проекта. Сетевой график проекта показан на рисунке 18.

 
Рисунок 18 – Сетевой график проекта

Ресурсы проекта представлены на рисунке 19

 
Рисунок 19 – Ресурсы проекта




5 Безопасность и экологичность работы


5.1 Информационная безопасность


Все личные данные пользователей ПО должны быть защищены от несанкционированного доступа. В проекте будут использоваться средства шифрования данных, такие как SSL-сертификаты, для обеспечения безопасной передачи данных между клиентом и сервером. Также будут применяться меры по защите от взлома базы данных. В проекте будет реализована двухфакторная аутентификация с использованием SMS-кода или приложения для генерации одноразовых паролей, также система должна быть защищена от вредоносного ПО, которое может повредить или украсть данные пользователей. Для этого будут использоваться средства антивирусной защиты, защиты от взлома и защиты от DoS-атак.
Важно обеспечить контроль доступа к данным. Будет реализована система управления доступом, которая позволит ограничить доступ к конфиденциальной информации только для авторизованных пользователей. В случае сбоя в работе, необходимо иметь резервную копию данных. Для этого будет настроено регулярное резервное копирование базы данных и других важных файлов.
Обеспечение безопасности системы тестирования путем регулярного обновления программного обеспечения и патчей безопасности. Будет настроена система автоматического обновления, чтобы избежать уязвимостей в системе. Будут проводиться обучающие курсы для всех пользователей системы, а также регулярные обновления инструкций по безопасности и напоминания для пользователей о необходимости соблюдения их мер. Для обнаружения и предотвращения возможных угроз необходимо проводить регулярный аудит системы. Это позволит выявить возможные уязвимости в системе и принять меры для их устранения.
5.2 Экологичность работы


При разработке следует уделить внимание экологичности работы, т.е. минимизации отрицательного влияния на окружающую среду.
Один из способов достижения экологичности работы - использование облачных технологий для хранения и обработки данных. Это позволит сократить использование физических серверов и соответственно снизить потребление электроэнергии. Кроме того, использование облачных технологий позволяет более гибко масштабировать ресурсы в зависимости от нагрузки на систему, также необходимо оптимизировать работу кода системы. Она позволяет сократить время выполнения операций и соответственно снизить потребление ресурсов сервера. Это не только уменьшает затраты на электроэнергию, но и увеличивает скорость работы системы, что может улучшить опыт пользователей.
При разработке также следует учитывать выбор компонентов и технологий, которые обладают высокой энергоэффективностью. Например, использование процессоров и видеокарт с низким энергопотреблением.
Работа может иметь как положительный, так и отрицательный экологический эффект. С одной стороны, онлайн-формат обучения и тестирования может существенно сократить количество печатаемых бумажных тестов и анкет, что приводит к экономии бумаги и других ресурсов. Более того, использование онлайн-системы тестирования может также сократить необходимость в оборудовании, таком как столы, кресла и другое мебельное оборудование, которое необходимо для проведения традиционных тестов.
С другой стороны, создание и поддержка тестов обучающихся потребует некоторого количества электроэнергии для работы серверов и компьютеров, что в свою очередь может привести к увеличению выбросов парниковых газов и других вредных веществ в атмосферу. Также необходимо учитывать влияние производства и утилизации компьютеров и другого оборудования, которое используется для работы системы тестирования знаний обучающихся.
Для минимизации негативного экологического влияния системы тестирования знаний обучающихся можно использовать следующие меры:
	использование серверов и компьютеров с максимальной эффективностью по энергопотреблению;
	оптимизация программного обеспечения системы для уменьшения потребления ресурсов;
	использование виртуализации и облачных технологий для уменьшения использования серверов и ресурсов;
	обеспечение возможности удаленной работы для сотрудников, что сократит необходимость в офисном пространстве и мебели;
	внедрение процедур утилизации устаревшего оборудования с соблюдением всех норм и правил по охране окружающей среды.
Конечная цель мер по минимизации негативного экологического влияния заключается в сокращении потребления энергии и ресурсов, уменьшении выбросов вредных веществ в окружающую среду. 
Выбор серверов и компьютеров с наиболее эффективным энергопотреблением и использование технологий, которые позволяют регулировать энергопотребление в зависимости от потребности, помогут уменьшить расход электроэнергии, также ПО, используется в системе, может быть оптимизировано, чтобы потреблять меньше ресурсов, таких как энергия и процессорное время. Это может быть достигнуто, например, путем использования эффективных алгоритмов и оптимизации кода.
Использование виртуализации и облачных технологий для оптимизации использования серверов и ресурсов. Они позволяют эффективно использовать ресурсы серверов и уменьшить потребление энергии. 
Удаленная работа позволяет сотрудникам работать из дома, что уменьшает потребление ресурсов на офисное пространство, мебель и транспортное сообщение. Процедуры утилизации устаревшего оборудования помогут уменьшить негативное влияние на окружающую среду, так как утилизация будет произведена в соответствии с правилами и нормами.
Принятие этих мер поможет минимизировать негативное влияние работы на окружающую среду и обеспечит экологичность ее функционирования.


5.3 Охрана труда


Охрана труда является важным аспектом разработки. Необходимо обеспечить безопасные условия труда для сотрудников, работающих над проектом.
В первую очередь, надо провести анализ рабочих мест и процессов, определить возможные опасности и риски для здоровья и жизни сотрудников. На основе этого анализа нужно разработать меры по уменьшению рисков и обеспечению безопасных условий труда. В рамках обучения сотрудники должны получить знания о технике безопасности, правилах работы с оборудованием и материалами, меры по профилактике травм и других заболеваний, возникающих в процессе работы, также нужно обеспечить возможность получения медицинской помощи в случае необходимости, а также проводить профилактические мероприятия, направленные на сохранение здоровья сотрудников.
Контроль за соблюдением правил техники безопасности и мерами по охране труда. Необходимо создать систему контроля и надзора за соблюдением правил техники безопасности и мерами по охране труда, а также проводить регулярные проверки и аудиты для выявления нарушений и принятия мер по их устранению.
В целом, в рамках проекта разработки системы тестирования знаний обучающихся необходимо соблюдать все нормы и правила охраны труда, обеспечивать безопасную и комфортную среду для работы сотрудников, а также организовывать медицинский контроль и страхование. Такой подход позволит не только защитить здоровье сотрудников, но и повысить эффективность и качество работы над проектом.
Пожарная безопасность является критически важным аспектом, который необходимо учитывать при организации рабочих мест и функционировании информационной системы. Возгорания могут привести к значительным убыткам, как материальным, так и информационным, поэтому соблюдение требований пожарной безопасности строго обязательно. В помещениях должны быть установлены пожарные извещатели и системы автоматического пожаротушения. Эти системы должны регулярно проверяться и обслуживаться, чтобы обеспечить их надежность в случае чрезвычайной ситуации.
Наличие огнетушителей в легко доступных местах и их регулярная проверка также являются важными мерами по предотвращению пожаров. Сотрудники должны быть обучены правильному использованию огнетушителей и быть знакомы с планом эвакуации. Периодические тренировки по эвакуации помогут закрепить знания и навыки, необходимые для быстрого и безопасного реагирования в случае пожара. Это не только обеспечит сохранность жизни и здоровья работников, но и минимизирует возможные материальные убытки и потерю данных.
Подводя итог, можно отметить, что создание информационной системы совместного хранения и работы с кодом требует серьезного подхода ко многим аспектам её функционирования. Утилизация компьютерной техники, соблюдение требований к помещениям, обеспечение безопасности и эргономики рабочих мест, а также пожарная безопасность являются ключевыми составляющими успешной и безопасной работы системы. Соблюдение всех этих требований обеспечит надежную защиту данных, комфортные и безопасные условия для сотрудников, а также стабильную и эффективную работу информационной системы в целом.

Заключение


В данной дипломной работе была разработана информационная система для совместного хранения и работы с кодом, что является актуальной задачей в условиях современной разработки программного обеспечения. Проект был направлен на создание удобного, функционального и масштабируемого решения, которое могло бы удовлетворить потребности разработчиков различного уровня.
В ходе работы над проектом были выполнены следующие задачи:
	исследование существующих решений и технологий для совместной работы с кодом;
	проектирование архитектуры системы, выбор технологического стека и инструментов разработки;
	реализация функциональных компонентов системы, включая модули версионного контроля, управления пользователями и интеграцию с существующими IDE;
	тестирование системы на наличие ошибок и оценка её производительности.
Результаты тестирования показали высокую надёжность и производительность системы, что подтверждает возможность её использования в профессиональной разработке ПО. Разработанная система обладает потенциалом для дальнейшего расширения функциональности и интеграции с другими инструментами и платформами.

