Введение
     
     
     Тема выпускной квалификационной работы — разработка системы анализа общественного мнения. Данная разработка принимала участие в проекте - Сетевой акселератор технологического предпринимательства «Экспонента Pro».
     Пользователь тратит большое количество времени для анализа и поиска интересующего товара на торговых площадках. Обилие большого количества отзывов от покупателей часто не позволяет в полной мере оценить все достоинства и недостатки продукции ввиду перегруженности информацией. Также проблему усугубляют неправдивые/заказные отзывы от других пользователей/ботов. Все это не позволяет пользователю оценить факт соответствия товара его заявленным характеристикам.
     Цель работы — разработать систему, которая позволит пользователю, анализировать комментарии о товаре в маркетплейсах и получить сводную характеристику о товаре на основе опыта пользователей. Главной задачей является создание максимально простого в освоении продукта. 
     Для достижения цели были поставлены следующие задачи:
      	провести анализ предметной области;
      	выбрать подходящие алгоритмы и программное обеспечение для решения задачи;
      	разработать систему анализа комментариев пользователей с использованием нейронных сетей;
      	обеспечить устойчивость разработанной системы к отказам;
      	сделать экономическое обоснование работы;
      	рассмотреть вопросы техники безопасности и охраны труда.
     В данной работе рассматривается инновационный подход к процессу покупки товаров в условиях современных цифровых маркетплейсов. Предложенная разработка  нацелена на решение трех ключевых задач, которые в совокупности способствуют существенному увеличению эффективности потребительского выбора. В первую очередь, акцентируется внимание на значительной экономии времени, затрачиваемого пользователями на принятие решений, относительно покупки товаров. Это достигается за счет оптимизации процессов поиска и выбора продукции, что, в свою очередь, способствует улучшению пользовательского опыта и повышению удовлетворенности процессом покупки.
     Во-вторых, разработка позволяет отсеивать товары и услуги, не отвечающие установленным критериям качества и стандартам. Этот аспект особенно актуален в контексте маркетплейсов, где ассортимент чрезвычайно широк и разнообразен. Предложенный механизм скрининга позволяет повысить доверие потребителей к предлагаемой продукции и уменьшить риск приобретения товаров неудовлетворительного качества.
     В-третьих, значимую роль предлагаемой разработки составляет облегчение доступа к информации о товарах, опираясь на массовую кластеризацию общественного мнения. Путем синтеза и анализа объемных данных об отзывах потребителей, предлагается формирование краткого, но вместе с тем содержательного и информативного мнения о каждом товаре. Это дает возможность пользователям быстро получать объективную и всесторонне обоснованную информацию о продукции, что служит делу обоснованности и продуманности покупательских решений.
     В целом, представленный инструментарий имеет потенциал кардинально изменить подход к выбору товаров в цифровой ретейл-среде, тем самым способствуя повышению качества потребительского опыта и общей эффективности рыночных механизмов.
     При разработке системы использовались следующие технологии и языки программирования: языки C# и Python, веб фреймворк ASP.NET core для написания бэкенда, СУБД MsSql, Redis, Python, docker, gRPC, Hangfire.
     Выпускная квалификационная работа состоит из введения, пяти разделов, заключения и перечня использованных информационных ресурсов.
     В первом разделе рассмотрены основные теоретические сведения разработки.
     В втором разделе, рассмотрена предметная область, охватывающая тему выпускной квалификационной работы, составлены требования к разработке приложения, а также требования к программному обеспечению.
     В третьем разделе рассматривается выбор средств реализации, а также описано проектирование структуры базы данных, рассмотрен процесс разработки системы.
     В четвертом разделе рассмотрено экономическое обоснование работы.
     В пятом разделе рассмотрена безопасность и экологичность разработки.
      
	1 Теоретические аспекты разработки
     
     
     1.1	Понятие системы анализа общественного мнения
     
     
     Концепция анализа общественного мнения представляет собой многогранное понятие, имеющее ключевое значение в исследовательской деятельности современного социологического анализа. Данная система предназначена для оценки реакций индивидов на разнообразные события, действия и информацию, поступающую из внешнего мира. Она служит методом изучения взглядов и эмоционального отклика населения по широкому кругу вопросов, связанных с различными аспектами общественной жизни.
     Для достижения целей анализа общественного мнения применяется комплексный подход, который включает в себя сбор данных о мнениях, настроениях и предпочтениях людей. Данный процесс осуществляется через широкий спектр методов, в числе которых опросы, интервью, а также другие инструменты качественного и количественного анализа. Основное внимание в процессе исследования уделяется последующему глубокому анализу собранных данных с целью выявления общих закономерностей, тенденций и предпочтений, присущих различным группам населения.
     Результаты, получаемые в ходе анализа общественного мнения, имеют весомое значение для организаций различных форм собственности и сфер деятельности. Принимаемые на их основе решения позволяют учитывать не только актуальные запросы и потребности общества, но и прогнозировать возможные изменения в предпочтениях потребителей. Это, в свою очередь, способствует созданию более качественных и востребованных продуктов и услуг, а также повышению конкурентоспособности и эффективности деятельности организаций на рынке.
     Таким образом, анализ общественного мнения является неотъемлемым элементом стратегического планирования и принятия обоснованных управленческих решений, способствующих достижению более высоких результатов в соответствии с ожиданиями и потребностями целевых аудиторий.
     В системе анализа общественного мнения можно выделить следующие компоненты:
      	сбор данных. Опросы, интервью, наблюдения, анализ социальных медиа, а также другие методы сбора информации о мнениях и настроениях общества;
      	анализ данных. После сбора данных необходимо выполнить их анализ с использованием статистических методов, теорий социологии, психологии и других соответствующих наук. Целью этого этапа является выявление закономерностей, тенденций и особенностей в общественном мнении;
      	интерпретация результатов. Полученные данные и результаты анализа интерпретируются с учетом контекста и целей исследования. Здесь важно понимать, какие выводы можно сделать на основе имеющихся данных и как они могут быть применены в конкретной области.
     
     
     1.2	Главные аспекты системы анализа общественного мнения
     
     
     Если говорить об аспектах и компонентах системы общественного мнения, то можно выделить следующее:
      	цель и контекст. Перед началом сбора данных необходимо четко определить цели и контекст исследования, это сосредоточит внимание на важных аспектах и позволит управлять процессом сбора и анализа данных;
      	методы сбора данных. Выбор методов сбора данных зависит от конкретных целей и характера исследования, это может быть опрос, фокус-группы, анализ социальных медиа и другие методы. Также важно выбрать наиболее подходящие методы для получения точной  информации, отражающей действительность;
      	обработка данных. После сбора нужно провести  обработку и фильтрацию данных, это включает в себя проверку на ошибки, аномалии и пропуски, а также преобразование данных в удобный для анализа формат, фильтрация от ненужной информации, которая не несет смысловую нагрузку;
      	анализ и интерпретация. Данные анализируются специальным инструментарием, затем результаты интерпретируются с учетом предметной области и целей для выявления ключевых закономерностей и особенностей в общественном мнении;
      	визуализация и коммуникация результатов. Представление результатов в удобной форме помогает лучше понять и использовать полученную информацию. Результаты могут быть представлены в виде отчетов, диаграмм, графиков и презентаций, или выводиться на сайте в какой либо другой форме, понятной пользователю;
      	применение результатов. Результаты анализа общественного мнения используются для принятия решений и разработки стратегий в различных сферах деятельности. Например в бизнесе, маркетинге, общественных науках и других областях.
     
     
     1.3	Философия разработки
     
     
     В данной работе особое внимание уделяется анализу философии разработки, которая вынесена в отдельный раздел. Этот подход основан на предположении, что концептуальные основы разработки оказывают значительное влияние на процесс создания и последующего развития.
     Главные идеи разработки  —  доступность, открытость и полезность.
     Доступность: основным направлением проекта является обеспечение доступности для широкого диапазона пользователей, включая различные возрастные группы и социально-экономические слои населения. Такой подход предполагает разработку интерфейсов и функционала, адаптированных под потребности и возможности широкого круга пользователей, что способствует повышению социальной интеграции и снижению барьеров доступа к научным и технологическим достижениям.
     Полезность: проект носит целенаправленный характер в плане предоставления обществу инструментов, способных содействовать развитию современных индустриальных и технологических процессов. Разработка ориентирована на создание значимых, практически применимых решений, которые могут оказать заметное положительное влияние на социально-экономическое развитие и продвижение научно-технического прогресса.
     Открытость:  важной особенностью проекта является открытый характер, проявляющийся в публикации исходного кода на платформе GitHub. Этот подход способствует содействию сотрудничеству и обмену знаниями между разработчиками, исследователями и пользователями, а также поддерживает идеалы прозрачности и коллективного участия в улучшении и адаптации разработки к широкому спектру задач и нужд.
     Таким образом, в центре внимания настоящей работы находятся основные идеи разработки, направленные на достижение социально значимых целей через применение принципов доступности, полезности и открытости.
     GitHub — это облачная платформа для хостинга IT-проектов и совместной разработки, под капотом которой находится популярная система контроля версий Git, а также полноценная социальная сеть для разработчиков. Здесь находятся open-source-проекты на разных языках программирования, имеется возможность для пользователей поучаствовать в развитии open-source-проектов, разместить свое портфолио с примерами кода. Также данная площадка используется, чтобы вести портфолио пользователя. Путь любой открытой разработки начинается с того, что исходный код продукта попадает на площадку GitHub.
      

      	2 Анализ предметной области
     
     
2.1	Исследование предметной области


	В работе рассматривается проблематика, связанная с затратами времени на оценку продуктов на основе отзывов реальных покупателей. Исходя из анализа ситуации, выявляется, что потребители зачастую приобретают товары, которые не соответствуют заявленным характеристикам. Это несоответствие можно отнести к наличию недостоверных отзывов, а также к отсутствию желания или возможности со стороны потребителей провести всесторонний анализ всех доступных отзывов о товаре.
	Выбор товаров потребителями основывается на нескольких параметрах, в том числе на рейтинге продукта, отзывах, визуальных характеристиках товара, а также на репутации поставщика или производителя и ценовых параметрах. В ходе такого подхода к выбору возникают две основные проблемы: во-первых, значительные временные затраты на анализ и сравнение информации о товаре, и во-вторых, риск приобретения товара, который окажется не соответствующим ожиданиям покупателя.
	Дополнительная проблематика связана с риском столкновения с мошенническими действиями и приобретением некачественных товаров. Таким образом, осуществляется критический анализ существующих механизмов выбора товаров, что указывает на необходимость разработки более эффективных инструментов оценки, способных снизить временные затраты и повысить уровень доверия к покупаемым продуктам.
	Ниже перечислены основные потребители:
      	молодые люди и студенты 14 – 35 лет;
      	люди среднего возраста 35 – 55 лет;
      	люди старшего поколения 55 и старше. 
     Проведя анализ, складывается понимание, что разработка интеллектуальной системы для анализа общественного мнения имеет место для любой из сфер общества.
     Ниже представлен список существующих сервисов, деятельность которых частично направлена на анализ товаров:
      	AVITO обладает механизмом поиска и фильтрации товаров на основе тегов, предоставляет пользователям возможность систематизированного и удобного поиска необходимой продукции;
      	YandexMarket и Ozon предоставляют продавцам полноценный набор функций для анализа товаров;
      	ChatGPT предоставляет возможность оценки отдельно выбранных сегментов товаров и услуг;
      	Yandex GPT предоставляет средства для составления помощи в анализе рыночного сегмента;
      	LetyShops осуществляет подбор выгодных предложений с различных маркетплейсов для пользователей.
     Одной из проблем, с которыми сталкиваются пользователи, является необходимость тратить время на анализ и поиск интересующего товара на различных торговых площадках. Это обусловлено не только многочисленностью предложений, но и избыточностью информации, включая обширные объемы отзывов от других покупателей. Однако, часто такое обилие отзывов затрудняет полноценную оценку достоинств и недостатков продукции из-за перегруженности информацией. Кроме того, неправдивые или заказные отзывы, созданные как другими пользователями, так и ботами, дополнительно усложняют процесс принятия решения. В результате пользователи сталкиваются с трудностями в оценке соответствия товара заявленным характеристикам, что подрывает их доверие к процессу онлайн-покупок.
     Молодые люди, студенты, люди среднего и старшего возраста все чаще предпочитают выбирать товары и услуги в онлайн-магазинах, опираясь на отзывы других покупателей, уже совершивших данную покупку. Однако, возникает проблема затраты времени на анализ таких отзывов с целью получения комплексной оценки товара. Нередко статистика свидетельствует о том, что приобретенный товар не соответствует заявленным характеристикам в полной мере. Наличие неправдивых отзывов дополнительно усложняет процесс адекватного анализа и оценки представленного товара и услуг.
     Идея разработки приложения вытекает из вышеупомянутых проблем, выявленных у целевой аудитории, что было подтверждено в результате проведения Customer Development. Идея направлена на решение каждой из этих проблем путем использования моделей для категоризации товаров, механизмов автоматического выявления фальсифицированных отзывов с применением искусственного интеллекта, а также предоставления пользователям комплексной информации, основанной на анализе комментариев и отзывов с применением кластерного анализа.
     Покупатели, осуществляющие онлайн-покупки через различные маркетплейсы, ограничены в возможности проведения подробного анализа всех понравившихся им продуктов и выявления всех их недостатков до момента получения товара.
     В представленной работе рассматривается разработка, которая предоставляет пользователям возможность анализа мнений о товаре с использованием искусственного интеллекта с целью выявления всех недостатков и оценки соотношения цены и качества товара. Этот подход существенно сокращает временные затраты на обработку информации о товаре, включая все его характеристики или предоставляемые услуги.
     В первом полугодии 2022 года доля рынка пяти крупнейших маркетплейсов Российской Федерации (Wildberries, Ozon, СберМегаМаркет, AliExpress Россия и Яндекс.Маркет) составила 47,9% от общего числа онлайн-покупок. Пользователи чаще всего посещают мобильное приложение Wildberries с мобильных устройств, в то время как с десктопных заходят преимущественно на Ozon и AliExpress. Среди российских маркетплейсов наибольшее количество уникальных посетителей ежемесячно посещает Яндекс.Маркет (почти 17 миллионов), затем следуют Ozon и Wildberries с 12 и 11 миллионами посещений соответственно. AliExpress закрывает список с 7,21 миллионами уникальных посетителей в месяц. 
     Для успешной реализации идей разработки в контексте российского рынка маркетплейсов следует учитывать несколько ключевых аспектов.
     Интеграция с популярными маркетплейсами является ключевым аспектом успешной реализации приложения. Для обеспечения доступа к данным о продуктах с таких платформ, как Wildberries, Ozon, СберМегаМаркет, AliExpress Россия и Яндекс.Маркет. 
     Использование нейронных сетей для анализа отзывов пользователей о продуктах представляет собой мощный инструмент, который может значительно улучшить процесс обработки и понимания информации.
     Для оценки оптимальности цены за качество продукта можно воспользоваться методами анализа цен на различных маркетплейсах и сопоставления с качеством товара. Это позволит предложить пользователям оценку ценообразования, основанную на степени соответствия цены и предлагаемого качества. Такой подход поможет потребителям сделать более обоснованный выбор при покупке, учитывая как ценовые, так и качественные аспекты товара.
     Использование микросервисной архитектуры для разработки приложения представляет собой эффективный подход, который позволяет создать модульную систему, где каждый компонент отвечает за определенную функциональность. Это значительно улучшает процесс, масштабирования и обновления приложения. Каждый микросервис может быть разработан, тестирован и развернут независимо от других, что обеспечивает гибкость и масштабируемость системы. Такой подход также позволяет легко добавлять новые функции и вносить изменения в существующую систему без значительных нарушений работы всего приложения.

     2.2	Требования к разработке
     

     Для обеспечения безопасности системы необходимо реализовать механизмы авторизации и аутентификации, а также защиту паролей
     Для обеспечения расширяемости системы и минимизации сложностей при добавлении нового функционала необходимо придерживаться принципов модульности и гибкости в архитектуре..
     Система должна уметь выполнять следующие функции: 
      	анализ маркетплейса Yandex.Market;
      	визуализация результатов анализа в понятной и удобной форме для пользователя;
      	функционал для просмотра и чтения результатов анализа;
      	анализ комментариев продукта;
      	возможность модерации названий продукта;
      	личный кабинет пользователя.
     Система должна обладать отказоустойчивостью, предоставляя возможность продолжения анализа после возникновения сбоя. Это подразумевает, что в случае прерывания работы программы из-за непредвиденных событий или ошибок, она должна быть способна восстановиться и продолжить выполнение анализа с момента, на котором произошел сбой.
     Система должна быть безопасной и надежной.
     Система должна обладать высоким уровнем безопасности и надежности, чтобы обеспечить защиту конфиденциальности данных и предотвратить несанкционированный доступ или нежелательные вмешательства.
     Алгоритм анализа информации с маркетплейсов должен быть разработан с учетом возможности продолжения работы при резких сбоях программы или сервера.

     2.3	Требования к ПО


     Для обеспечения максимальной эффективности и удобства в проекте важно определить критерии, по которым будет происходить выбор ПО и инструментария. Ниже приведены основные критерии, которые следует учитывать при выборе:
      	при выборе программного обеспечения (ПО) для проекта ключевыми критериями являются надежность и безопасность;
      	При выборе программного обеспечения для проекта необходимо учитывать два ключевых аспекта - эффективное решение поставленных задач и минимизация излишней дополнительной сложности;
      	при выборе программного обеспечения (ПО) для проекта важно обеспечить способность работать и выполнять функции даже в случае сбоев;
      	программное обеспечение должно быть удобным в использовании;
      политика открытого кода - ключевой критерий при выборе программного обеспечения.
     
     
     

    
     
3 Практическая реализация


     3.1	Выбор средств реализации
     
     
     Redis, сокращение от «Remote Dictionary Service», является сервером баз данных, построенным на модели «ключ-значение» и распространяемым в открытом доступе. Redis может быть точнее описан как сервер, предназначенный для работы с различными структурами данных. Вся информация в Redis хранится в оперативной памяти, что обеспечивает минимальную задержку и высокую скорость доступа к данным. В отличие от традиционных баз данных, где данные обычно хранятся на диске, Redis хранит данные в памяти, что существенно сокращает время доступа к данным. Это позволяет хранилищам данных в памяти обрабатывать большое количество операций и обеспечивать быстрый отклик. В результате обеспечивается высокая производительность. Операции чтения и записи в среднем занимают менее миллисекунды, а скорость работы достигает миллионов операций в секунду.
     Microsoft SQL Server (MSSQL) является системой управления реляционными базами данных (СУБД), предназначенной для хранения и извлечения данных из других программных приложений. Это программное обеспечение разработано корпорацией Microsoft для управления информацией на нескольких компьютерах в рамках одной сети. С использованием языка программирования SQL (Structured Query Language – «язык структурированных запросов») SQL Server способен проводить аналитические и транзакционные операции, а также обрабатывать информацию. Под транзакцией понимается рабочая единица или последовательность операций внутри базы данных. Обработка транзакций отвечает за обнаружение ошибок и обеспечение целостности данных. 
     C# является объектно-ориентированным и ориентированным на компоненты языком программирования, предоставляющим встроенные конструкции для поддержки данных концепций и хорошо подходящим для создания и использования программных компонентов. С момента своего создания C# значительно развился, предлагая функции, поддерживающие новые рабочие нагрузки и современные подходы к разработке программного обеспечения. Основные особенности C# включают автоматическую «сборку мусора» для обеспечения надежности и устойчивости приложений, «nullable типы»  для защиты от нулевых ссылок, структурированный подход к обработке исключений, поддержку лямбда-выражений и LINQ для обработки данных, возможность асинхронных операций для создания распределенных систем, единую систему типов, поддержку типов значений и ссылочных типов, динамическое выделение памяти, и структуры данных в стеке для эффективного управления ресурсами, универсальные методы и типы для повышения безопасности и производительности, итераторы для определения пользовательских вариантов поведения коллекций, а также управление версиями для обеспечения совместимости с течением времени.
     ASP.NET Core является кроссплатформенной, высокопроизводительной средой с открытым исходным кодом для создания современных облачных приложений, подключенных к Интернету. ASP.NET Core позволяет создавать веб-приложения и службы, приложения Интернета вещей (IoT) и серверные части для мобильных приложений, использовать избранные средства разработки в Windows, macOS и Linux, выполнять развертывания в облаке или локальной среде. ASP.NET Core предоставляет следующие преимущества:
      	унифицированное решение, способное обеспечить создание пользовательского веб-интерфейса и веб-API в единой системе;
      	разработано с учетом возможности проведения тестирования;
      	использование Razor Pages способствует упрощению написания кода для сценариев страниц и повышает эффективность выполнения;
      	Blazor обеспечивает возможность использования языка C# в браузере параллельно с JavaScript, что позволяет эффективно сочетать серверную и клиентскую логику в приложениях, разработанных с использованием платформы .NET;
      открытый исходный код, ориентированный на активное взаимодействие с сообществом.;
      	интеграция современных клиентских платформ и рабочих процессов разработки;
      	обеспечение поддержки размещения служб удаленного вызова процедур (RPC) с использованием технологии gRPC;
      	интегрированная поддержка внедрения зависимостей;
      	простой и высокопроизводительный модульный конвейер обработки HTTP-запросов.
     Возможность размещения на следующих узлах:
      	Kestrel;
      	IIS;
      	HTTP.sys;
      	Nginx;
      	Apache;
      	Docker.
     gRPC — это опенсорсный фреймворк для удаленного вызова процедур, который используется в Яндекс.Маркете в качестве более удобной альтернативы REST. Применение gRPC может служить посредником для построения интеграций между сервисами на различных языках программирования, таких как Java и C++, что помогает избежать типичных проблем с производительностью, с которыми можно столкнуться при использовании REST, обеспечивая возможность возврата ошибок, реализации трассировки, отладки запросов и тестирования вызовов клиентов. Модель RPC, несмотря на свою обширность, находит особое воплощение в gRPC. В рамках RPC взаимодействие между клиентом и сервером осуществляется так, будто запрос клиентского API является локальной операцией или вызов является внутренним кодом сервера. Клиент отправляет запрос на сервер, который постоянно прослушивает удаленные вызовы, включая вызываемую серверную функцию и все передаваемые параметры. RPC API использует протокол обмена данными, такой как HTTP, TCP или UDP, в качестве базового механизма передачи данных.
     Docker представляет собой открытую платформу, предназначенную для разработки, доставки и эксплуатации приложений с ускоренным процессом выкладывания приложений. Этот инструмент разработан с целью упрощения процесса выкладывания кода, тестирования и запуска приложений путем отделения приложения от инфраструктуры и обращения с ней как с управляемым приложением. Docker способствует ускорению выкладывания кода, тестирования и запуска приложений, сокращая временные затраты между различными этапами разработки. Это достигается благодаря легковесной платформе контейнерной виртуализации, которая использует процессы и утилиты для управления и выкладывания приложений. В ядре Docker предоставляется возможность запуска практически любого приложения, обеспечивая его безопасную изоляцию в контейнере. Такая изоляция позволяет запускать множество контейнеров на одном хосте одновременно, а легковесная природа контейнера, не требующего дополнительной нагрузки гипервизора, повышает эффективность использования аппаратного обеспечения. Таким образом, Docker и контейнерная виртуализация могут быть полезны в различных сценариях использования, таких как:
      	упаковка приложения (и так же используемых компонент) в docker контейнеры;
      	раздача и доставка контейнеров другим пользователям для разработки и тестирования;
      	выгрузка контейнеров в нужную среду, как в дата центры так и в облака.
     Python — это высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, который ориентирован на повышение производительности разработчика, читаемости кода и качества программного обеспечения, а также на обеспечение переносимости написанных на нем программ. Язык является полностью объектно-ориентированным, где все является объектами. Уникальной особенностью Python является использование отступов для выделения блоков кода, что делает его синтаксис минималистичным и снижает необходимость в постоянном обращении к документации. Он также интерпретируемый, что делает его подходящим для написания скриптов и упрощает разработку. Однако, среди недостатков Python часто упоминаются более низкая скорость выполнения программ и большее потребление памяти по сравнению с кодом, написанным на компилируемых языках, таких как C или C++.
     Playwright — это библиотека Node.js, разработанная для автоматизации браузеров Chromium, Firefox и WebKit с помощью единого API. Целью Playwright является обеспечение удобства и эффективности в разработке, тестировании и эксплуатации веб-приложений. Playwright предлагает поддержку межбраузерной веб-автоматизации, что означает возможность работы с различными браузерами при автоматизации процессов. Благодаря тому, что Microsoft Edge базируется на открытом коде Chromium, Playwright также способен автоматизировать Microsoft Edge. По умолчанию, Playwright запускает легковесные версии браузеров, которые не имеют пользовательского интерфейса и управляются через командную строку. Однако существует возможность настройки Playwright для запуска полной версии Microsoft Edge в автоматизированных процессах.
     Hangfire — это многопоточный и масштабируемый планировщик задач, разработанный на платформе .NET с использованием технологий, таких как Task Parallel Library и Reflection. Hangfire работает по клиент-серверной архитектуре и основан на промежуточном хранении задач в базе данных. Hangfire полностью функционален в бесплатной версии с открытым исходным кодом, лицензируемой по LGPL v3. С точки зрения клиента, взаимодействие с задачами осуществляется по принципу "fire-and-forget", где задача добавляется в очередь и «забывается», а на стороне клиента ничего дополнительно не происходит, кроме сохранения задачи в базе данных. Для работы с Hangfire необходим доступ к общей сборке, однако для встроенного веб-интерфейса доступ необязателен. В случае необходимости можно заменить реализацию уже сохраненной в БД задачи, заменив сборку, на которую ссылается серверное приложение. Это особенно удобно для периодических задач, но требует полного совпадения контракта метода MethodToRun в старой и новой сборках, с учетом обязательного наличия модификатора public.
     JavaScript — это язык программирования, который применяется разработчиками для создания интерактивных веб-страниц. Функциональные возможности JavaScript способствуют улучшению пользовательского опыта взаимодействия с веб-сайтом, включая такие аспекты, как обновление ленты новостей в социальных сетях, анимации и интерактивные карты. JavaScript является основной технологией веб-разработки, предназначенной для выполнения скриптов на стороне клиента. Применение JavaScript распространено в Интернете, где JavaScript используется для создания таких элементов, как выпадающие меню по клику и динамически изменяющиеся цвета элементов на веб-страницах, что повышает у сайта интерактивность и привлекательность для пользователей.
     HTML, или HyperText Markup Language, представляет собой язык разметки, используемый для создания структуры и содержания веб-страниц. HTML состоит из различных тегов и атрибутов, которые определяют различные элементы страницы, такие как заголовки, абзацы, ссылки, изображения и формы. HTML является основным строительным блоком веб-страниц и обеспечивает структуру и содержимое, которые отображаются пользователю на экране. 
     CSS, или Cascading Style Sheets, является языком таблиц стилей, который применяется для описания внешнего вида и макета веб-страницы. Этот язык позволяет веб-разработчикам применять различные визуальные стили, такие как шрифты, цвета и макеты, к элементам HTML, созданным с использованием языка разметки HTML. С помощью CSS можно создавать адаптивный и мобильный дизайн, а также управлять расположением и внешним видом различных элементов на веб-странице.
     Razor представляет собой синтаксис разметки, предназначенный для встраивания кода на основе .NET в веб-страницы. Razor состоит из смеси разметки Razor, языка программирования C# и HTML. Синтаксис Razor часто используется в файлах компонентов с расширением .razor. Подход Razor во многом аналогичен обработчикам шаблонов, применяемым в различных платформах одностраничных приложений (SPA), таких как Angular, React, Vue.js и Svelte. По умолчанию языком для Razor является HTML. Отрисовка HTML из разметки Razor отличается от отрисовки обычного HTML-файла. Разметка HTML в файлах .cshtml синтезируется сервером без изменений. Razor позволяет встраивать код на C# с использованием символа @ для переключения между HTML и C#. Razor вычисляет выражения на C# и вставляет выражения в результирующий HTML-код. Базирующаяся на Razor технология Blazor используется для отображения ошибок разработчику и для компиляции компонентов на C# в WASM, а также для выполнения клиентских скриптов на сервере в зависимости от типа отрисовки компонента.
     Visual Studio представляет собой мощное средство разработки, предназначенное для выполнения всего цикла разработки в удобной интегрированной среде. Это комплексная интегрированная среда разработки (IDE), которая обеспечивает возможности записи, редактирования, отладки, сборки кода и развертывания приложений в едином рабочем окружении. Включая в себя компиляторы, средства автозавершения кода, системы управления версиями, расширения и другие инструменты, Visual Studio охватывает все аспекты процесса разработки программного обеспечения. Благодаря поддержке различных функций и языков программирования, это средство позволяет начать с написания простейшей программы и продолжить разработку и развертывание сложных приложений.
     3.2	Проектирование структуры базы данных
     
     
     Далее перечислены структуры, относящиеся к БД Hangfire. В данной БД хранятся данные необходимые для запуска задач.
     На рисунке 1 изображена таблица AggregatedCounter.

     
      Рисунок 1 - таблица общего счетчика задач
     
     Таблица представляет собой структуру данных, где каждая запись характеризуется уникальным идентификатором задачи (Key), строкового типа, описывающим конкретную задачу, колонкой числового типа (Value), хранящей информацию о количестве повторных запусков данной задачи, и колонкой типа datetime (ExpireAt), указывающей на время, когда данная задача утрачивает актуальность и перестает выполняться, независимо от количества повторных запусков.
     На рисунке 2 - изображена таблица Counter.
     
     
      Рисунок 2 - таблица счетчика задач
     
     У таблицы первичный ключ состоит из двух колонок: Key и Id. Таблица Counter используется для особых задач, где первичный ключ, состоящий из двух колонок, более удобен или релевантен, чем использование только одной колонки Key, как в случае с AggregatedCounter.
     На рисунке 3 показана таблица Hash. 
     
      
      Рисунок 3 - таблица хэша
     
     Таблица содержит три поля: Key, Field и Value. Поле Key содержит хэш, Field содержит название переменной, а Value содержит значение переменной. Данная структура используется для хранения информации типа ключ-значение, где каждая запись идентифицируется хэшем (Key), а сами данные представлены в виде пары "название переменной - значение переменной" (Field - Value).
     На рисунке 4 показана таблица Job.
     
      
      Рисунок 4 - таблица где хранятся задачи
     
     Таблица содержит информацию о состоянии задачи, включая идентификатор состояния, название состояния, данные и аргументы, необходимые для вызова задачи, а также метки времени создания и истечения срока действия задачи, где поле StateId содержит уникальный идентификатор состояния, StateName содержит значение состояния, InvocationData хранит данные для вызова задачи, Arguments содержит аргументы вызова, CreateAt обозначает время создания задачи, а ExpiredAt определяет время, когда задача перестанет быть актуальной.
     На рисунке 5 показана таблица с параметрами задачи.
     
     
      Рисунок 5 - таблица с параметрами задачи
     
     Таблица содержит информацию о параметрах задачи, связанных с уникальным идентификатором задачи (JobId), где поле Name представляет название параметра, а Value содержит его значение. Эти параметры необходимы для вызова соответствующего метода в рамках задачи, и их хранение отдельно позволяет легко обращаться к ним в контексте задачи. Это позволяет сохранить структуру данных организованной и управляемой, так как параметры представляют собой особую информацию, необходимую для правильного выполнения алгоритма, и их независимое хранение обеспечивает легкость доступа и управления.
     На рисунке 6 показана таблица очереди задач.
     
     
      Рисунок 6 - таблица с параметрами задачи
     
     Таблица содержит записи с идентификатором (Id) и связанным идентификатором задачи (JobId), где поле Queue представляет JSON-объект, содержащий информацию о позиции задачи в очереди. Поле FetchedAt указывает на время, когда задача была извлечена из очереди для выполнения.
     На рисунке 7 показана таблица Set.
     
     
      Рисунок 7 - таблица множества
     
     Эта таблица предоставляет возможность хранить данные в виде множества, где каждый элемент имеет свой уникальный идентификатор Key, связанное с ним значение Value и Score - оценка, присвоенная значению при повторной записи. Такая организация позволяет эффективно управлять данными и оценивать их важность при многократном внесении.
     На рисунке 8 показана таблица списков.
     
     
      Рисунок 8 - таблица списков
     
     Эта таблица предоставляет возможность хранить определенные данные в виде множества, где каждый элемент имеет свой уникальный идентификатор Key, связанное значение Value, а также Id, определяющий порядок в списке. Таблицы Set, Hash и List используются для структурированного хранения данных, обеспечивая более удобную организацию и обходя ограничения реляционных таблиц. 
     На рисунке 10 показан таблица Server.
     
     
      Рисунок 10 - таблица множества

     Эта таблица предназначена для хранения данных, связанных с сервером, на котором выполняются задачи. Поле Data представляет собой JSON-объект, который может содержать разнообразную информацию о работе сервера, такую как ошибки, состояние сервера, его последнюю активность и другие данные. Поле LastHeartbeat указывает время последней активности сервера.
     На рисунке 11 показана таблица списков.
     
     
      Рисунок 11 - таблица списков.
     
     Эта таблица содержит информацию о состоянии задачи. Поле JobId представляет идентификатор задачи, а поле Id - идентификатор состояния задачи. Name содержит название состояния, в то время как поле Reason хранит различные ошибки, возникшие во время выполнения задачи. Поле CreatedAt указывает время запуска задачи. Данные, сложные для структурирования, хранятся в формате JSON в поле Data, которое может содержать информацию о времени начала выполнения задачи, успешном времени окончания и другие данные.
     На рисунке 12 показан таблица User.
     
     
      Рисунок 12 - таблица пользователей
     
     Эта таблица предназначена для хранения информации о пользователях, включая их электронную почту и хэш пароля. Вместо самого пароля в таблице хранится хэш-значение, что обеспечивает дополнительный уровень безопасности.
     На рисунке 13 показана таблица продуктов, которые пользователь добавил.
     
     
      Рисунок 13 - таблица продуктов
     
     Эта таблица представляет собой список продуктов, добавленных пользователем в систему. Таблица продуктов включает в себя ссылку на страницу продукта (URL), откуда начинается сбор и анализ информации, название продукта (ProductName), указание на проведение анализа комментариев (IsLoaded), который длится несколько минут, и идентификатор пользователя (LoadedById), который добавил продукт. 
     
     
     3.3	Процесс разработки системы
     
     
     Процесс разработки системы можно поделить на несколько частей.
     Первым этапом является поиск и запуск нейронной сети на отдельном сервере.
     Лейбел представляет собой строку, которая назначается в соответствии с классификацией входного текста, выполненной нейронной сетью. Нейронная сеть присваивает различные лейблы в зависимости от эмоциональной окраски текста. Для анализа настроения текста в данном контексте использовалась предварительно обученная нейронная сеть «RuBERT Ru Sentiment Rusentiment», которая возвращает различные лейблы в зависимости от классификации текста. 
     На листинге 1 представлен код сервера, ответственного за передачу лейблов, относящихся к тексту. Для упрощения процесса, сервер отправляет только один лейбл.
      
     Эмбеддинг - это массив чисел, который нейронная сеть может назначить тексту в зависимости от значения текста. Путем сравнения двух массивов с эмбеддингами можно определить сходство между смыслами текстовых данных. Используя такие сравнения, алгоритм кластеризации может распределить комментарии по кластерам на основе их семантической близости.
     На листинге 2 представлен код сервера, в котором используется нейронная сеть для вычисления эмбеддингов текста в соответствии с его смыслом. Важно отметить, что данная нейронная сеть не была разработана автором дипломной работы; это предварительно обученная модель, доступная для общего использования.
      
     Для интеграции нейронной сети из другого процесса с минимальными затратами на производительность рекомендуется использовать технологию gRPC. Этот фреймворк реализует технологию удаленного вызова процедур (RPC), используя протокол HTTP 2.0. Одной из ключевых особенностей gRPC является эффективное использование HTTP для реализации RPC. Для достижения высокой производительности gRPC применяет язык описания данных ProtocolBuffers и мультиплексирование, что обеспечивает эффективную передачу данных. Применение Protocol Buffers упрощает работу с данными, а также сериализацию и десериализацию данных. Кроме того, gRPC может использовать «голый» TCP для передачи данных, что позволяет передавать данные напрямую по протоколу TCP без дополнительных действий, необходимых при использовании HTTP 1.0.
     Представленный на Листинге 3 код описывает сервис, предназначенный для передачи массива эмбеддингов, сгенерированных нейронной сетью.
      
     gRPC также предоставляет возможность потоковой передачи данных, что представляет собой дополнительный уровень абстракции, упрощающий передачу данных, требующих потоковой обработки. Для обработки больших массивов эмбеддингов применяются потоковые входные и выходные данные. Это повышает производительность при передаче данных.
     На листинге 4 представлен код, описывающий сервис, который передает эмбеддинги для входного текста. Подобно предыдущему примеру, в этом случае также используются потоковые входные и выходные данные для повышения производительности. 
      
     
     Важно отметить, что при первом вызове нейронной сети скорость работы нейронной сети медленная, однако при последующих вызовах скорость работы нейронных сетей восстанавливается до оптимального значения. В процессе разработки системы в связи с ограниченностью вычислительных и материальных ресурсов нейронные сети не были оптимизированы для работы с использованием вычислительных мощностей видеокарты. Вместо этого использовалась вычислительная мощность процессора, что негативно сказалось на производительности, поскольку нейронные сети в их изначальной реализации и оптимизации предназначены для запуска с использованием мощности видеокарты. 
     Оставшийся код представляет собой интеграцию между запросами gRPC и средой выполнения Python, что обеспечивает возможность чтения байтов, их преобразования в классы и переменные. Технология gRPC обеспечивает совместимость различных платформ, значительно отличающихся друг от друга, таких как .NET (C#) и Python. Это делает gRPC популярным в контексте микросервисной архитектуры. 
     Для обеспечения расширяемости были разработаны Docker-файлы, которые позволяют запускать нейронную сеть в контейнере.
     На листинге 5 - показан Docker-файл, который позволяет запустить нейронную сеть в контейнере.
      
     Докер-контейнер позволяет запускать нейронную сеть изолированно от основной операционной системы на любой платформе, так как докер-контейнер представляет собой виртуализированную и оптимизированную среду выполнения. 
     На листинге 6 - показана команда для создания докер-контейнера:
      Листинг 6 — команда для создания докер-контейнера
      docker image build [OPTIONS] PATH | URL |
      
     Эта команда создает контейнер в указанном пути с определенными настройками.
     На листинге 7 - показана команда для запуска докер-контейнера:
      Листинг 7 — команда для запуска докер-контейнера
      docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]
      
     Эта команда запустит контейнер в указанном пути с определенными настройками. Она также позволяет ввести дополнительную команду, которая будет выполнена внутри контейнера при его запуске. Кроме того, можно указать различные аргументы, такие как порт, переменные среды и другие параметры, необходимые для запуска контейнера.
     На листинге 8 - показан код интерфейса репозитория, который считывает и записывает необходимые для алгоритма кластеризации в СУБД Redis.
      tClusteringIterationResult> GetLastClusterIterationConfiguration(string url); Task<IEnumerable<LabelInfo>> GetLabelsStatForClusters(string url, int clusterNumber); }
     
     Данный репозиторий нужен, чтобы отделить логику работы и взаимодействия с БД от алгоритма кластеризации, что улучшает расширяемость системы.
     На листинге 9 - показан код алгоритма чтения данных из стороннего маркетплейса.
      
     
     Система выполняет чтение данных из Яндекс-Маркета, а затем производит их анализ с использованием нейронной сети, после чего результаты записываются в хранилище Redis. По завершении процесса чтения всех комментариев о товаре, данные, сохраненные в Redis, подвергаются анализу. Для обеспечения отказоустойчивости вместо обычного цикла используется рекурсивный вызов данного метода с применением Hangfire, что позволяет выполнять анализ до тех пор, пока очередь не будет обработана полностью, достигнув последнего комментария.
     На листинге 10 - показан код алгоритма кластеризации.
      
     Метод кластеризации, используемый здесь, можно разделить на несколько этапов. На первом этапе производится вычисление центроидов для заданного числа кластеров. Исходно рассматривается только один кластер. Затем, после выбора центроидов, процесс повторяется для большего числа кластеров, пока не будет достигнуто оптимальное количество кластеров. Каждый кластер представляет собой массив комментариев, схожих по смыслу. Для этой цели применяется алгоритм кластеризации K-Means.
     На листинге 11 - показан код чтения итогового анализа комментариев под товаром.
      
     
     Поскольку алгоритм кластеризации K-Means состоит из повторяющихся итераций, в программе сохраняется информация о каждой итерации этого алгоритма. Это позволяет обеспечить более эффективный процесс отладки, поскольку результаты кластеризации могут быть просмотрены на разных этапах выполнения программы без необходимости повторного запуска. Более того, такой подход позволяет сохранять результаты кластеризации с разным числом кластеров. Представленный выше код осуществляет извлечение последних результатов кластеризации, после чего эта информация выводится на веб-сайт для пользователя. Этот код включает в себя алгоритм поиска 10 комментариев по каждому кластеру.
     На листинге 12 - показан код авторизации и регистрации.
      
     
     Метод Authenticate выполняет процедуру аутентификации пользователя и сохраняет полученный токен авторизации в куки браузера.
     На рисунке 14 показана  схема анализа комментариев о товарах.
     
     
      Рисунок 14 - схема анализа комментариев о товарах
     
     Hangfire занимает центральное положение в системе, используя принцип «разделяй и властвуй». Большая задача, такая как анализ комментариев о товарах, разбивается на более мелкие подзадачи. В контексте данной схемы, эти мелкие подзадачи просто обозначаются как «задачи». Под термином «задача» понимается небольшая часть общей задачи анализа комментариев о товаре.
     Hangfire отвечает за управление хранением и запуском этих задач. Hangfire обеспечивает гарантию выполнения задач даже в случае возникновения сбоев, таких как временная недоступность Яндекс-Маркета или ошибки, возникшие в работе нейронной сети. В случае любых непредвиденных ситуаций Hangfire управляет повторным выполнением задачи, чтобы обеспечить непрерывность работы системы.
     Процесс считывания всех комментариев о товарах разбивается на массив задач, где каждая задача отвечает за считывание одной страницы с комментариями, при этом каждый комментарий анализируется, и информация о комментарии вносится в Redis. Эта информация включает в себя массив эмбеддингов, лейблы, текст комментария, имя автора и другие сопутствующие данные. Каждая задача обрабатывает определенный объем комментариев, обеспечивая обработку данных и эффективное использование ресурсов.
     После записи всех комментариев под товаром в Redis начинается процесс кластеризации, для которого применяется алгоритм K-Means. Одним из недостатков этого алгоритма является необходимость заранее задать количество кластеров. Так как заранее невозможно определить оптимальное количество кластеров, используется метод перебора. Алгоритм начинается с одного кластера, а затем количество кластеров увеличивается, и происходит повторное распределение комментариев. Процесс продолжается до тех пор, пока распределение значительно не изменится.
     Кластеризация разбивается на массив задач, где каждая задача представляет одну итерацию алгоритма. В рамках каждой итерации все комментарии перераспределяются по кластерам (центроидами), затем запускается следующая итерация. Если результат текущей итерации не сильно отличается от предыдущей, то новая итерация не запускается. Каждое действие за итерацию записывается в Redis, включая результаты распределения комментариев, информацию о каждом кластере, тегах и другие сведения. Количество итераций может быть различным в зависимости от специфики данных и желаемого уровня точности.
     По завершении работы алгоритма, сервер использует SignalR для отправки сигнала по сокетам, оповещая клиентов о завершении процесса кластеризации.
     Подход, основанный на разбиении задачи анализа комментариев о товарах на множество мелких задач, действительно способствует повышению отказоустойчивости системы. В случае возникновения сбоя, например, проблем с сервером, отключения электропитания или возникновения ошибок в алгоритме, процесс анализа останавливается, но затем возобновляется с того момента, где был прерван, благодаря использованию подхода «разделяй и властвуй».
     3.4	Результат
     
     
     На рисунке 14 показан процесс регистрация пользователя в системе.
     
      
      Рисунок 14 - процесс регистрация пользователя системе
     
     Для регистрации пользователь должен предоставить свою почту и пароль, которые используются в качестве учетных данных для входа в систему.
     На рисунке 15 показан процесс авторизация пользователя в системе.
     
      
      Рисунок 15 - процесс авторизация пользователя в системе
     
     Для авторизации необходимо ввести адрес электронной почты и пароль, чтобы система смогла проверить соответствие введенных данных к данным о зарегистрированных пользователей в системе.
     На рисунке 16 изображен личный кабинет.
     
      
      Рисунок 16 - личный кабинет
     
     В личном кабинете пользователь просматривает список названий товаров, информацию о которых текущий пользователь добавил в систему, также в списке есть названия товаров, комментарии которых в настоящее время находятся в процессе анализа.
     На рисунке 17 изображено редактирование личных данных пользователя.
     
      
      Рисунок 17 - редактирование личных данных пользователя
     
     После того как пользователь вводит свою электронную почту и нажимает кнопку «Изменить», осуществляется перенаправление в личный кабинет пользователя. Каждый пользователь может попасть только на свою страницу, пользователь не сможет попасть на страницу другого пользователя и посмотреть либо изменить чужие данные.
     На рисунке 18 изображено добавление нового продукта.
     
      
      Рисунок 18 - добавление нового продукта
     
     После нажатия пользователем кнопки «Создать», пользователь будет немедленно перенаправлен на свою личную страницу, где отображен список товаров, информацию о которых данный пользователь добавляет в систему.
     На рисунке 19 показано всплывающее сообщение.
     
      
      Рисунок 19 - всплывающее сообщение

     На рисунке 19 изображено сообщение, которое появляется после того, как система проанализирует информацию о товаре, добавленную пользователем. Это сообщение будет отображаться фоном на сайте, независимо от того, на какой странице находится пользователь.
     На рисунке 20 изображен список названий продуктов, информация о которых есть в системе.
     
      
      Рисунок 20 - список всех добавленных продуктов в системе
     
     Если пользователь нажмет на указанное название продукта, произойдет перенаправление на результаты анализа комментариев под товаром. Если информация о продукте не проанализирована, то отображается красный крестик. В случае успешного анализа информации о товаре изображена зеленая галочка.
     На рисунке 21 изображен процесс редактирования данных продукта. 
     
      
      Рисунок 21 - редактирования данных продукта
     
     На данной странице модератор указывает новое название продукта. Другим пользователям доступ к этой странице запрещен.
     На рисунке 22 изображен результат анализа продукта без фильтров.
     
      
      Рисунок 22 - результат анализа продукта без фильтров
     
     На графике представлены круговые диаграммы различных цветов, отображающие процент комментариев с определенным настроением. Под каждой круговой диаграммой указано количество комментариев. Зеленые круговые диаграммы отражают процент положительных комментариев, желтые — процент нейтральных комментариев, а красные — процент негативных комментариев. Ниже представлены самые популярные теги, которые представлены тремя смежными словами. Например, одним из самых распространенных тегов является «использование несколько месяцев». Это сделано для анализа наиболее часто встречающихся фраз пользователей. Исходно планировалось использовать нейронную сеть для приведения слов к начальной форме, однако технические ограничения не позволяют запустить три нейронные сети одновременно вместе с Docker, Redis и сервером, ответственным за анализ и вывод информации из комментариев. Вместо этого было решено использовать три смежных слова в качестве альтернативы для тегов. Это решение было принято, поскольку отдельные слова без анализа нейронной сетью не несут полезной информации, даже если взять слова с наибольшей смысловой нагрузкой.
     На рисунке 23 изображен результат кластеризации комментариев.
     
      
      Рисунок 23 - кластеризации комментариев
     
     Выше показана информация о каждом кластере, включая теги, связанные с кластером, общее количество комментариев в кластере, а также процентное соотношение комментариев с определенными настроениями.
     На рисунке 24 показан фильтр комментариев по настроению.
     
      
      Рисунок 24 - фильтр комментариев по настроению

     На рисунке 24 представлен результат фильтрации комментариев в соответствии с настроением. Фильтр действует как для всех комментариев, так и для комментариев, относящихся к определенному настроению.
     На рисунке 25 изображена фильтрация по тэгу и настроению.
     
      
      Рисунок 25 - фильтрация по тэгу и настроению
     
     На рисунке 25 показан результат фильтрации по тэгу и настроению для всех комментариев, независимо от кластера. 
     На рисунке 26 показана фильтрация комментариев по настроению, тэгу и кластеру.
     
      
      Рисунок 26 - фильтрация комментариев по настроению, тэгу и кластеру
     
     На рисунке показан результат фильтрации комментариев по настроению, тэгу и кластеру.
      

    4 Экономическое обоснование работы
     
     
     4.1	Планирование работы 
     
     
     ProjectLibre – кроссплатформенное программное обеспечение для управления проектами. Прогрaммa включaет все нужные функции: диaгрaммa Гaнтa, сетевой трафик, распределение ресурсов, доклады.
     Планирование этапов разработки системы играет ключевую роль в обеспечении успешного завершения проекта. На рисунке 28 представлены этапы, продолжительность и последовательность выполнения.
     

      Рисунок 28 – Плaнировaние этапов работ
     
     На рисунке 29 представлен сетевой график, который отражает зависимости между различными этапами разработки системы и планируемые сроки их выполнения.
     

      Рисунок 29 – Сетевой график
     
     На рисунке 30 изображены ресурсы, которые были затрачены на разработку системы.
     
      
      Рисунок 30 – Ресурсы проекта
     
     На рисунке 31 изображен лист использования  с   ресурсами.  
     
      
      Рисунок 31 – Лист ресурсов

     На рисунке выше отображены объемы и распределение затраченных ресурсов.
     На рисунке 32 изображен RBS.
     
      
      Рисунок 31 – RBS
     
     На данном рисунке показана суммарная стоимость каждого ресурса, что упрощает последующие расчеты и анализ затрат.

     
5 Безопасность и экологичность работы


     5.1	Информационная безопасность



     Информация, изначально, представляет собой данные, передаваемые различными способами, включая устное, письменное и другие формы коммуникации, а также сигналы и средства передачи информации между людьми, автоматами и в природе. Согласно пониманию информации в науке, она имеет универсальный характер и включает в себя передачу сведений, сигналов и признаков как между людьми.
     Известный ученый Н. Винер отмечал, что информация отличается от материи и энергии и представляет собой самостоятельное понятие. Философская точка зрения также подчеркивает, что информация существует независимо от человека и является свойством материи.
     В контексте информационной безопасности, понятие информационной безопасности означает состояние защищенности национальных интересов в информационной сфере, включая интересы личности, общества и государства. 
     Защита информации состоит из комплекса мероприятий, включая правовые, организационные и технические меры, направленные на предотвращение угроз информационной безопасности и уменьшение их воздействия на информационные системы.
     Под субъектами информационных отношений понимаются владельцы и пользователи информации, а также элементы инфраструктуры, такие как помещения, системы энергоснабжения, связи и персонал.
     Угроза информации представляет собой потенциальную опасность несанкционированного воздействия на объект защиты, что может привести к утечке, искажению или разглашению информации.
     
     5.2	Охрана труда
     

     Система обеспечения безопасности и охраны здоровья работников в процессе их занятости, включающая меры, представленные в законодательной форме и ориентированные на обеспечение безопасности и уход за здоровьем работников, организацию их трудовой деятельности, а также меры социальной и экономической поддержки. Она охватывает широкий спектр действий, включая соответствие законам о труде, установление норм и стандартов в области охраны труда, обеспечение безопасности и санитарно-гигиенических условий труда, а также меры по реабилитации и профилактике заболеваний.
     Одним из аспектов охраны труда являются требования, относящиеся к работе с компьютером. Перед началом работы необходимо провести подготовку рабочего места, включая регулировку освещения и проверку правильности подключения оборудования к электросети. При работе с компьютером оператору необходимо соблюдать определенные правила, такие как выполнение только порученной работы, содержание рабочего места в чистоте и порядке, а также соблюдение санитарных норм и режимов работы и отдыха. Также важно проводить перерывы и физические упражнения для предотвращения утомления и поддержания работоспособности. По окончании работы необходимо правильно выключить оборудование.
     При этом, важно соблюдать безопасность и здоровье работников, предотвращая различные риски и опасности, связанные с работой с компьютером.
     Утилизация устаревшей техники.
     Самые сложные операции с компьютером связаны не с куплей и не с продажей, не с эксплуатацией и не с ремонтом. Труднее всего его утилизировать.
     Для того чтобы правильно распорядиться всего лишь одним ПК, не раскрыв при этом важной личной или корпоративной информации, не нарушив законов о сохранении окружающей среды и не уничтожив компонентов, допускающих повторное использование, придется потратить немало сил, времени и, конечно, денег.
     Возможные варианты: установить в другое место, продать, подарить, разобрать на запчасти, подготовить к утилизации.
     В России, согласно ст. 1 Закона «Об отходах производства и потребления» от 24.06.1998 г. № 89-ФЗ, к отходам относятся в числе прочего товары, потерявшие свои потребительские свойства. Все отходы, в соответствии со ст. 4.1 этого закона, подразделяются на пять классов опасности – от особо опасных (первый класс) до практически неопасных (пятый класс). К примеру, перегоревшие люминесцентные лампы относятся к отходам первого класса опасности, отработанные аккумуляторы – ко второму или третьему классу и т.?д. Списанная офисная техника, в соответствии с формулировкой закона, также является отходом и, как правило, относится к третьему классу опасности (умеренно опасные отходы) .
     В соответствии с законом отходы для утилизации можно передавать лишь компаниям, имеющим соответствующую лицензию. Деятельность по сбору, использованию, обезвреживанию, транспортировке, размещению отходов 1–4 класса опасности подлежит лицензированию в соответствии со ст. 17 Федерального закона «О лицензировании отдельных видов деятельности» № 128-ФЗ от 08.08.2001 г.
     Согласно статье 8.2 КоАП РФ, «несоблюдение экологических и санитарно-эпидемиологических требований при сборе, накоплении, использовании, обезвреживании, транспортировании, размещении и ином обращении с отходами производства и потребления» влечет наложение штрафа: на должностных лиц – от 10 до 30 тыс. руб., на организации – от 100 до 250 тыс. руб. или административное приостановление деятельности на срок до 90 суток.
     Самой важной причиной, которую должно учитывать руководство предприятия при принятии решения об утилизации компьютерной техники, вышедшей из строя либо устаревшей, является забота об окружающей среде.
     Именно по данной причине практически каждое государство мира регламентирует правила и порядок утилизации различных видов отходов. И именно утилизация компьютерной и различной офисной техники является первостепенной задачей предприятий.
     Процесс избавления от устаревшей техники, включая компьютеры, представляет собой сложную задачу, не связанную просто с ее продажей или утилизацией. Для эффективного управления этим процессом необходимо учитывать ряд факторов, включая конфиденциальность информации, соответствие экологическим стандартам и возможность повторного использования компонентов.
     Возможные варианты обработки устаревшей техники включают ее переустановку в другом месте, продажу, дарение, разборку на запчасти или подготовку к утилизации. Однако, при выборе опции утилизации, необходимо учитывать законодательные требования, касающиеся обращения с отходами. В соответствии с законом, утилизацию отходов можно доверить только лицензированным компаниям, специализирующимся на этом виде деятельности.
     Неисполнение экологических требований при обращении с отходами может привести к наложению административного штрафа как на должностных лиц, так и на организации. Поэтому важно соблюдать не только законодательство, но и заботиться о сохранении окружающей среды.
     Предприятия должны осознавать важность утилизации устаревшей техники как неотъемлемой части своей ответственности перед окружающей средой.
      

     5.3	Мероприятия по улучшению условий труда 
     
     
     Опасные производственные факторы представляют собой элементы рабочей среды, чье воздействие в определенных условиях может вызвать травмы или другие внезапные проблемы со здоровьем. С другой стороны, вредные производственные факторы могут привести к заболеваниям или снижению работоспособности. Для обеспечения комфортной и безопасной среды труда принимаются различные меры, включая технические, технологические, санитарно-гигиенические, организационные и эстетические.
     Работа с компьютером требует соблюдения определенных параметров, чтобы минимизировать нагрузку на глаза и нервную систему. Это включает в себя обеспечение оптимальных значений визуальных параметров и установленных перерывов. Рабочая мебель должна быть настроена таким образом, чтобы соответствовать росту и обеспечивать удобную позу работника. Рабочий стол должен быть правильно сконструирован, чтобы разместить оборудование и обеспечить удобство в работе.
     При работе с электроустановками важно соблюдать организационные и технические меры безопасности. Это включает в себя периодический медицинский контроль работников и использование защитных механизмов, таких как защитное заземление и зануление. Эти меры предназначены для минимизации рисков и обеспечения безопасного рабочего процесса.
     Кроме того, для обеспечения безопасности при работе с электроустановками, необходимо строго соблюдать правила устройства электроустановок, включая правила заземления. Заземление является важной мерой защиты при работе с оборудованием, подключенным к трехфазным сетям напряжением до 1000 В с изолированной нейтралью. Оно способствует снижению потенциалов корпусов оборудования и обеспечивает срабатывание максимальной токовой защиты при возникновении замыкания на корпус.

    Заключение
     
     
     Результатом ВКР является система, которая может анализировать массив комментариев о товарах на маркетплейсе «яндекс маркет».
     Цель ВКР — разработать систему, которая позволит пользователю, анализировать комментарии о товаре в маркетплейсах и получить сводную характеристику о товаре на основе опыта пользователей. Главной задачей является создание максимально простого в освоении продукта.
     Для достижении цели были поставлены и выполнены следующие задачи:
      	найти и запустить подходящие нейронные сети и связать нейронные сети с алгоритмом кластеризации;
      	реализовать чтение комментариев о товарах на Яндекс маркете;
      	написать алгоритм, который будет анализировать комментарии о товарах, используя нейронные сети;
      	сделать систему отказоустойчивой к ошибкам.
     В заключении хочется подчеркнуть важность и актуальность разработки системы анализа общественного мнения в сфере интернет-торговли. С учетом растущего числа онлайн-покупок и обилия информации на торговых площадках, создание инструмента, способного облегчить процесс выбора и принятия решения пользователем, становится более чем необходимым.
     Разработанная система не только поможет пользователям сократить время на анализ отзывов и оценку товаров, но и уменьшит вероятность приобретения некачественной или несоответствующей заявленным характеристикам продукции. Благодаря массовой кластеризации общественного мнения, предоставляемой разработкой, пользователи смогут получить информацию, сведенную до краткого и информативного мнения о товаре, что значительно облегчит процесс выбора.
     Основываясь на использованных технологиях, таких как C#, Python, ASP.NET core, MsSql, Redis, Docker, gRPC и Hangfire, система обладает не только высокой производительностью и отказоустойчивостью, но и гибкостью для дальнейшего развития и модернизации.
     Экономическое обоснование работы демонстрирует потенциальные выгоды как для конечных пользователей, так и для предприятий, занимающихся онлайн-торговлей. Благодаря повышению уровня удовлетворенности пользователей и улучшению качества интернет-покупок, разработка способствует увеличению объемов продаж и повышению конкурентоспособности компаний.
     Наконец, уделенное внимание вопросам безопасности и экологичности разработки гарантирует сохранность данных пользователей и соответствие продукции современным стандартам эко-технологий.
     В целом, система анализа общественного мнения в сфере интернет-торговли, разработанная в рамках данного проекта, представляет собой значимый шаг в направлении улучшения пользовательского опыта и повышения эффективности онлайн-покупок.
     Разработанное приложение предоставляет пользователю следующие возможности: авторизация, регистрация, система модерации, анализ комментариев о товарах, система фильтрации по тегам, настроению, кластерам.
     
     
     
      
