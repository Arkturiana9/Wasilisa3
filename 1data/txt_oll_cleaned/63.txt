Введение
     

     Рост объема туристического рынка в последние десятилетия и рост доли туристов, предпочитающих для планирования туристических поездок специализированные онлайн сервисы традиционным офлайн агентствам, способствует повышению спроса на программное обеспечение, решающее проблемы планирования туристических поездок.
     Традиционные оффлайн агентства занимаются поиском, составлением туристических программ, обычно включающих в себя бронирование билетов, жилья на время поездки и планирование развлекательной программы. Необходимость такого сервиса была обусловлена трудностями самостоятельного поиска и выбора туристических направлений. По мере развития интернета, неопределенность такого рода уменьшалась. У туристов появилась возможность бронировать отели онлайн, покупать билеты на различные виды транспорта, делиться опытом поездок. Также появились агрегаторы в каждой из этих ниш. Таким образом, сложные задачи, которые раньше решали туристические офлайн агентства, стали решаться различными web-сервисами.
     В основе современных web-сервисов планирования туристических маршрутов лежит идея решения задач туристических офлайн агентств, используя уже доступные онлайн решения. Такой подход позволяет значительно снизить стоимость услуги для конечного пользователя и, обычно, предоставляет большее число вариантов туристических поездок. Развитие данной идеи привело к появлению сервисов, предоставляющих пользователю планировать поездки полностью самостоятельно - начиная с покупки билетов на различные виды транспорта и бронирования мест в отеле, заканчивая составлением подневного плана мероприятий и их состава.
     В рамках данной дипломной работы была поставлена цель - разработать веб-сервиса для поиска и планирования туристических маршрутов. Для достижения поставленной цели необходимо решить следующие задачи:
     * рассмотреть теоретические аспекты разработки;
     * провести сравнительный анализ функционала сайтов подобной тематики; разработать требования к функционалу;
     * разработать структуру веб-сервиса;
     * выбрать средства реализации; 
     * провести тестирование разработанного веб-сервиса;
     * провести расчёт сметы затрат на разработку;
     * рассмотреть вопросы безопасности и экологичности работы.

       
1     Теоретические аспекты разработки
     
     
1.1	Понятие веб-сервиса
     
     
     Веб-сервисы играют ключевую роль в современной интернет-инфраструктуре, обеспечивая взаимодействие между различными приложениями и системами через интернет. Этот механизм стал основой для построения распределённых систем, облегчающих интеграцию и обмен данными между различными платформами и языками программирования. В данной работе будет рассмотрено понятие веб-сервиса, его основные характеристики и компоненты, а также ключевые технологии и протоколы, которые его поддерживают.
     Веб-сервис – это программный интерфейс, доступный через сеть, который предоставляет возможность взаимодействия между различными приложениями посредством стандартных протоколов и форматов обмена данными. Основная цель веб-сервиса – позволить программам, работающим на различных платформах и написанным на разных языках программирования, обмениваться данными и вызывать функции друг друга удалённо [1].
     Веб-сервисы являются важным компонентом современных распределённых систем, предоставляющим возможность взаимодействия между различными приложениями через интернет. Они обладают рядом характеристик, которые делают их эффективными и удобными для интеграции и использования в различных технологических экосистемах. Рассмотрим основные характеристики веб-сервисов подробнее:
     * интероперабельность. Веб-сервисы разрабатываются с учётом стандартов, таких как HTTP, XML и JSON, что обеспечивает их совместимость с различными системами и платформами. Это позволяет приложениям взаимодействовать независимо от используемых технологий;
     * модульность. Веб-сервисы разрабатываются как отдельные компоненты, что облегчает их интеграцию и переиспользование в разных приложениях. Такая модульность способствует гибкости и масштабируемости систем;
     * открытые стандарты. Веб-сервисы базируются на общедоступных стандартах, что облегчает их разработку и интеграцию. Наиболее распространённые стандарты включают SOAP (Simple Object Access Protocol), WSDL (Web Services Description Language) и REST (Representational State Transfer).
     Веб-сервисы представляют собой совокупность компонентов, которые вместе обеспечивают функциональность, взаимодействие и интеграцию между различными системами и приложениями. Основные компоненты веб-сервиса включают протоколы обмена данными, языки описания интерфейсов, механизмы регистрации и обнаружения, а также архитектурные стили. Рассмотрим ключевые компоненты веб-сервиса подробнее.
     SOAP – это протокол для обмена структурированными данными в распределённых вычислительных средах. Он использует XML для форматирования сообщений и позволяет передавать данные через различные транспортные протоколы, такие как HTTP и SMTP;
     WSDL – это XML-формат для описания веб-сервисов и их интерфейсов. Он указывает, какие операции поддерживаются веб-сервисом, какие параметры используются и какие данные возвращаются. WSDL играет ключевую роль в автоматизации взаимодействия между клиентами и сервисами;
     UDDI – это платформа для регистрации и обнаружения веб-сервисов. Она предоставляет механизм для публикации информации о веб-сервисах, что позволяет приложениям находить и использовать эти сервисы;
     REST – это архитектурный стиль, использующий стандарты HTTP для взаимодействия с веб-сервисами. RESTful веб-сервисы используют URL для идентификации ресурсов и стандартные методы HTTP (GET, POST, PUT, DELETE) для выполнения операций над этими ресурсами. REST стал популярной альтернативой SOAP благодаря своей простоте и легковесности.
     Веб-сервисы играют важную роль в современной IT-инфраструктуре, предоставляя средства для взаимодействия между различными приложениями и системами. Несмотря на многочисленные преимущества, веб-сервисы также имеют некоторые недостатки, которые необходимо учитывать при их использовании и разработке.
     Преимущества веб-сервисов:
     * интероперабельность;
     * модульность и повторное использование кода;
     * гибкость и масштабируемость;
     * использование открытых стандартов;
     * платформенная независимость;
     * легковесность (в случае REST).
     Недостатки веб-сервисов:
     * сложность и накладные расходы (в случае SOAP);
     * безопасность;
     * производительность;
     * надёжность;
     * ограничения HTTP (в случае REST);
     Веб-сервисы являются важным компонентом современной интернет-инфраструктуры, обеспечивая взаимодействие между различными приложениями и системами. Они предоставляют гибкость, масштабируемость и повторное использование кода, что делает их незаменимыми для разработки распределённых систем. Однако, использование веб-сервисов также связано с некоторыми сложностями, такими как накладные расходы, безопасность и производительность. Несмотря на эти вызовы, веб-сервисы продолжают оставаться ключевым инструментом для построения интегрированных и совместимых систем в разнообразных областях, от корпоративных приложений до облачных платформ и мобильных приложений [2].
     1.2 Виды веб-сервиса
     
     
     Веб-сервисы представляют собой программные интерфейсы, которые позволяют приложениям взаимодействовать друг с другом через интернет. Веб-сервисы играют ключевую роль в современной разработке программного обеспечения, обеспечивая возможность обмена данными и функциональностью между различными системами. Существует несколько основных видов веб-сервисов, каждый из которых имеет свои особенности и области применения. В этой работе рассмотрим основные виды веб-сервисов, такие как SOAP, REST и GraphQL, и их характеристики.
     SOAP является одним из старейших протоколов для веб-сервисов. Он был разработан для обеспечения обмена структурированными сообщениями между различными приложениями через интернет. Основные характеристики SOAP включают:
     * SOAP использует XML (Extensible Markup Language) для форматирования сообщений. XML обеспечивает строгую структуру данных, что позволяет точно определять формат передаваемых данных;
     * SOAP не привязан к конкретному транспортному протоколу. Он может использоваться поверх различных протоколов, таких как HTTP, SMTP, и т.д. Однако на практике чаще всего используется HTTP;
     * один из ключевых аспектов SOAP – поддержка стандартов безопасности, таких как WS-Security, который обеспечивает защиту сообщений, аутентификацию и авторизацию;
     * SOAP предоставляет расширяемую архитектуру, что позволяет добавлять новые функциональности без изменения основного протокола.
     SOAP широко используется в корпоративных системах, где важны надежность, безопасность и строгая структура данных. Однако сложность и избыточность XML-сообщений могут привести к снижению производительности и увеличению объема передаваемых данных.
     REST – это архитектурный стиль для создания веб-сервисов, который был предложен Роем Филдингом в 2000 году. REST опирается на принципы HTTP и широко используется для разработки веб-приложений и API. Основные характеристики REST представлены ниже.
     Ресурсо-ориентированность. В REST все объекты представляются как ресурсы, которые идентифицируются с помощью URI (Uniform Resource Identifier). Например, ресурсом может быть пользователь, продукт или заказ.
     Методы HTTP.  REST использует стандартные методы HTTP (GET, POST, PUT, DELETE) для выполнения операций над ресурсами. Каждый метод соответствует определенному действию: получение данных (GET), создание нового ресурса (POST), обновление ресурса (PUT) и удаление ресурса (DELETE).
     Форматы данных. В отличие от SOAP, REST не ограничен использованием XML. Он поддерживает различные форматы данных, такие как JSON (JavaScript Object Notation), XML, HTML и другие. JSON является наиболее популярным форматом из-за своей простоты и легкости парсинга.
     Статус-коды HTTP. REST использует стандартные статус-коды HTTP для индикации результатов операций (например, 200 OK, 404 Not Found, 500 Internal Server Error), что упрощает обработку ошибок и интерпретацию ответов.
     REST-сервисы получили широкое распространение благодаря своей простоте, легкости интеграции и хорошей производительности. Они подходят для большинства веб-приложений и мобильных приложений, где важны скорость и гибкость [2].
     GraphQL – это язык запросов для API и среда выполнения запросов, разработанный Facebook в 2015 году. Он предоставляет альтернативу традиционным REST API, предлагая более гибкий и мощный способ взаимодействия с данными. Основные характеристики GraphQL включают:
     * запросы и мутации. В GraphQL существуют два основных типа операций: запросы (queries) и мутации (mutations). Запросы используются для получения данных, а мутации – для изменения данных на сервере;
     * гибкость запросов. GraphQL позволяет клиентам точно указывать, какие данные им нужны, что минимизирует объем передаваемых данных и повышает производительность. Клиенты могут запрашивать только необходимые поля и избегать избыточных данных;
     * типы данных. GraphQL использует строгую типизацию данных. Схема GraphQL определяет структуру данных и доступные операции, что позволяет серверу и клиенту согласовывать данные и проверять корректность запросов;
     * единая точка входа. GraphQL API предоставляет единую точку входа для всех операций, что упрощает управление и обслуживание API. В отличие от REST, где каждый ресурс имеет свой URI, в GraphQL все запросы выполняются через один эндпоинт.
     GraphQL подходит для сложных приложений, где важно минимизировать количество запросов к серверу и гибко управлять получаемыми данными. Он часто используется в приложениях с обширными и сложными данными, таких как социальные сети и системы управления контентом.
     SOAP, REST и GraphQL представляют собой три основных типа веб-сервисов, каждый из которых имеет свои особенности и области применения. SOAP обеспечивает высокую степень надежности и безопасности, что делает его подходящим для корпоративных систем. REST отличается простотой и гибкостью, что делает его популярным выбором для веб-приложений и мобильных приложений. GraphQL предлагает гибкость и эффективность при работе с большими и сложными данными, что делает его идеальным для современных веб-приложений с обширными API. Понимание этих различных подходов и их характеристик позволяет разработчикам выбирать наиболее подходящий инструмент для решения конкретных задач [2].


2   Аналитический раздел
     
     
     2.1   Анализ существующих веб-сервисов планирования маршрутов


     В данном разделе приведена классификация существующих сервисов планирования туристических маршрутов и проверка представителей категорий на соответствие критериям, описанным в предыдущем разделе. Данный подход позволит определить сильные и слабые стороны существующих сервисов и даст возможность выявить хорошие и неудачные паттерны взаимодействия с пользователем.
     Данные сервисы характеризуются большой базой знаний о местах, вызывающих у туристов интерес (points of interest, POI). Такие базы знаний могут быть основаны на ручном сборе данных, или функция сбора информации о таких местах может быть делегирована пользователям, таким образом, данные сервисы становятся crowdsource ресурсом. Обычно такие сервисы становятся полноценным путеводителем по городам и странам, агрегируя информацию не только о достопримечательностях той или иной местности, но также и о местах общественного питания, отелях, массовых мероприятиях, музеях, галереях и прочих явлениях, попадающих в сферу интересов туриста [3].
     Примером туристической базы знаний является TripAdvisor. Сервис предоставляет собой базу отзывов о POI, которая позволяет принимать более взвешенные решения в процессе планирования путешествия, опираясь на отзывы пользователей, их оценки рассматриваемых POI.
     Внушительная аудитория сервиса позволяет эффективно поддерживать информацию о POI, что является, несомненно, сильной стороной сервиса. Огромная база POI делает данный сервис отправной точкой в самостоятельном планировании путешествия. Являясь базой знаний, TripAdvisor не предоставляет функционала составления маршрутов и, соответственно, оценки временных затрат.
     Таким образом, базы знаний не обладают необходимым функционалом для решения поставленной задачи, однако обладают широкими возможностями для выбора POI.
     В эту категорию попадают сервисы агрегирующие готовые маршруты для пеших прогулок по городу. Такие сервисы обычно управляются туристическими агентствами или являются интернет площадками, на которых пользователи делятся своими вариантами маршрутов. Сервисы данной категории имеют четкую направленность на решение поставленной задачи.
     Примером сервиса с описанным функционалом является WalkLondon.com, представляющий собой сайт с коллекцией пеших туров по столице Великобритании - Лондону. Туры имеют подробное описание достопримечательностей, их фотографии, карту с маршрутом, маркерами, соответствующими локациям достопримечательностей, и оценку длительности тура.
     Туры, составленные экспертами, заведомо обладают высоким кредитом доверия в глазах пользователя. Подробное описание достопримечательностей и карта позволяют без особого труда следовать предоставленному гайду. Кроме того, пользователь имеет представление о длительности тура, что также повышает удобство пользования сервисом. Недостатком является отсутствие возможности модификации тура, будь то добавление или удаление POI из маршрута. Для некоторых пользователей навигация по статической карте может показаться сложной задачей [4].
     Картотеки гайдов решают поставленную задачу, однако ограничивают пользователя в выборе маршрута. Таким сервисам не хватает интерактивности. Зачастую они не адаптированы для использования на мобильных устройствах. Кроме того, данные сервисы специфичны для определенной страны или даже города, что не подходит для решения поставленной задачи в общем случае.
     Апофеозом решения задачи планирования туристических поездок являются сервисы полного цикла, позволяющие пользователю спланировать путешествие от двери дома и обратно. Данные системы пришли на смену традиционным туристическим агентствам и реализуют их основные функции. На данный момент существует несколько крупных игроков на рынке туристических онлайн агентств, механика их работы схожа, поэтому будет рассмотрен только один сервис, имеющий наиболее близкий вариант использования к решаемой задаче, Tripomatic.
     Tripomatic обладает широким функционалом: фильтрация достопримечательностей по интересам, составление пешего маршрута, экспорт основной информации в виде PDF- документа, бронирование отеля и покупка билетов на самолет. Взаимодействие с пользователем построено на предположении о том, что планирование происходит без непосредственной нужды, поэтому отсутствует режим навигации по маршруту, выбор текущего местоположения пользователя, точек старта и завершения маршрута. База достопримечательностей собирается группой редакторов, как указано в описании системы.
     Сервисы полного цикла качественно решают задачу планирования, но не направлены на решение поставленной задачи, что вызывает сложности в использовании [3].


     2.2   Постановка задачи
     
     
     Развитие туризма и повышение проникновения интернета способствует миграции традиционного офлайн бизнеса туристических агентств в интернет. Web-сервисы перенимают приемы, присущие офлайн агентствам, реализуя громоздкие системы планирования маршрутов полного цикла - от покупки билетов для путешествия, до подневного планирования досуга. Решение широкого спектра задач плохо сказывается на качестве решения каждого из них в отдельности, особенно, если пользователю требуется только часть функционала для удовлетворения своей потребности - остальная часть системы является для него препятствием.
     В данной работе рассмотрено решение задачи построения пешего туристического маршрута с остановками в местах - достопримечательностях. Эта задача уже решается многими сервисами туристической направленности и, обычно, является подзадачей для крупных систем планирования, что затрудняет достижение желаемого результата конечным пользователем.
     Целевой аудиторией данного продукта являются туристы. Однако, проблема проведения досуга в городском пространстве актуальна для большинства людей. В качестве примера можно привести рабочие командировки и поездки на конференции - события, которые, обычно, не предполагают развлекательной программы, соответственно она не планируется пользователем, но ситуация наличия свободного времени и желания его потратить, исследуя место пребывания вполне реальна. 
     В данных условиях для задачи характерно ограничение по времени - у пользователя может быть куплен билет на поезд и у него есть только 2 часа свободного времени, значит решение ему нужно как можно скорее. Точная оценка маршрутов по времени не является распространенным умением среди людей, тем более, ориентация в незнакомом городе и знание о местоположении достопримечательностей. Времени на пользование поиском в интернете обычно не так много, кроме того, просмотр десятков страниц различных онлайн сервисов может оказаться довольно дорогим, если пользователь мобильной связи находится в роуминге, таким образом, возникает потребность в решении, способном централизованно решить возникшую проблему. 
     Пользование тяжеловесными системами планирования также занимает больше времени, чем хотелось бы. При этом, не все они способны предоставить качественно решение для поставленной задачи. Другим примером возможного использования данного продукта может быть исследование города. Ежедневный путь от места работы до станции метро может оказаться довольно увлекательным, если знать, что в непосредственной близости от обычного маршрута находится пара исторических зданий, которые скрыты от глаз многоэтажными домами.
     Таким образом, решение данной задачи должно удовлетворять следующим критериям:
     * наличие базы достопримечательностей;
     * возможность построения маршрута, проходящего через выбранные достопримечательности;
     * оценка времени, которое требуется для прохождения по построенному маршруту;
     * возможность и удобство использования на мобильном устройстве.
     Опираясь на анализ существующих решений, можно сформулировать следующие требования к ПО, решающему поставленную задачу:
     * наличие расширяемой базы достопримечательностей;
     * возможность ручного планирования маршрута путем включения и исключения достопримечательностей;
     * автоматическое планирование маршрута системой, опираясь на точки начала и конца предполагаемого маршрута, а также на предельную длительность маршрута, указанную пользователем;
     * построение оптимального пути через достопримечательности маршрута;
     * предоставление пользователю информации о длительности маршрута;
     * возможность навигации по маршруту;
     * возможность экспорта ключевой информации о маршруте в формате PDF и/или в виде изображения формата PNG или JPG.


     2.3   Подходы к решению задачи
     
     
     Для сбора информации было принято решение использовать ресурсы сервисов - баз знаний, предоставляющих API. Наилучшим кандидатом для этой цели является TripAdvisor, однако, данный сервис имеет ограничение на использование своего API, доступ к которому может получить только проект туристической направленности с определенным числом посещений в месяц, также данный сервис не предоставляет доступ к API в академических и исследовательских целях. Удовлетворение требований TripAdvisor является крайне сложной задачей, выходящей за рамки дипломной работы.
     Другим кандидатом является сервис Foursquare, имеющий внушительную базу отзывов о самых разнообразных местах. Данный сервис имеет API, доступ к которому предоставляется всем желающим разработчикам. Использование API имеет ограничение на количество запросов в день, однако данной квоты вполне достаточно для комфортной разработки.
     Foursquare API позволяет получить список мест вблизи указанной локации (географических координат) используя метод Search Venues. К сожалению, у пользователя Foursquare API нет возможности получить всю базу или обойти её постранично. Вместо этого предоставляется возможность поиска мест с фильтрацией. Наиболее полезными параметрами для решения задач дипломной работы являются:
     * sw – юго-западная граница (координата) участка карты для поиска;
     * ne – северо-восточная граница (координата) участка карты для поиска;
     * categoryId – идентификатор категории места;
     * limit – количество записей в ответе метода.
     Данный набор параметров позволяет получить limit достопримечательностей необходимой категории внутри границ BoundingBox. Ответ метода содержит название места, его фотографию и локацию.
     Foursquare API не предоставляет описание места, поэтому необходимо использовать другие сервисы для восполнения пробела. Википедия является наиболее полной библиотекой статей на самые разнообразные темы. Более того, существуют open source сервисы, использующие данную библиотеку и предоставляющие дополнительный функционал для поиска информации в рамках этой библиотеки. Одним из представителей такого рода сервисов является geonames.org, предоставляющий, среди прочего, сервис findNearbyWikipedia. Данный сервис позволяет получить аннотацию статьи на Википедиии ссылку на нее по координатам или названию места.
     Таким образом, получение необходимых данных производится в два этапа:
     * получение списка достопримечательностей, содержащих фотографии, названия и локацию, используя Foursquare API;
     * получение описания достопримечательности по локации или имени, используя Geonames FindNearbyWikipedia API.
     Важной функцией web-приложения, разрабатываемого в рамках дипломной работы является возможность навигации по маршруту. В данной работе под навигацией подразумевается функционал, позволяющий пользователю отслеживать своё местоположение во время движения в пространстве.
     Возможность определения местоположения пользователя web-приложения достигается посредством использования Web Geolocation API, доступного во всех современных браузерах за исключением Opera Mini и имеет охват в 89.62% пользователей. Данный API стандартизирован W3C, благодаря чему интерфейс реализован во всех браузерах одинаково и его использование не требует дополнительных библиотек. Так как информация о местоположении пользователя является приватной, для работы с API необходимо разрешение пользователя.
     
3    Практическая часть
     
     
     3.1 	Общее описание разработки
     
     
     Для реализации веб-сервиса принято решение использовать следующие технологгии: Node.js, Express, React и SQLite3, это может быть полезным решением для создания системы управления информацией (ИС) для автоматизации учета и обработки данных.
     Node.js – программная платформа, основанная на движке V8, превращающая JavaScript из узкоспециализированного языка в язык общего назначения [5].
     Express – фреймворк web-приложений для Node.js, реализованный как свободное и открытое программное обеспечение под лицензией MIT. Он спроектирован для создания веб-приложений и API. Де-факто является стандартным каркасом для Node.js.
     React – JavaScript-библиотека с открытым исходным кодом для разработки пользовательских интерфейсов [6].
     SQLite – компактная встраиваемая СУБД. Исходный код библиотеки передан в общественное достояние. В 2005 году проект получил награду Google-O’Reilly Open Source Awards.
     В данном веб-приложении используется следующая структура базы данных:
     Таблица "места" (destinations):
     * id (INTEGER PRIMARY KEY AUTOINCREMENT) - уникальный идентификатор каждого места;
     * name (TEXT) - название места;
     * description (TEXT) - краткое описание места;
     * coordinates (TEXT) - географическое расположение или адрес места;
     * attractions (TEXT) - основные достопримечательности на этом месте;
     * other_information (TEXT) - дополнительная информация об этом месте.
     Таблица "путешествия" (routes):
     * id (INTEGER PRIMARY KEY AUTOINCREMENT) – уникальный идентификатор каждого путешествия;
     * name (TEXT) - название путешествия;
     * description (TEXT) - краткое описание маршрута;
     * destinations_order (TEXT) - порядок посещения мест на этом маршруте;
     * duration (TEXT) - оценка времени, необходимого для прохождения маршрута, включая время пути и отдыха;
     * other_information (TEXT) - дополнительная информация об этом маршруте.
     Таблица "отзывы" (reviews):
     * id (INTEGER PRIMARY KEY AUTOINCREMENT) - уникальный идентификатор каждого отзыва;
     * destination_id (INTEGER) - внешний ключ, ссылающийся на таблицу "места" по индексу id;
     * comment (TEXT) - мнение пользователя или его опыт посещения места;
     * rating (INTEGER) - числовая оценка места от 1 до 5 звезд;
     * review_date (TEXT) - дата публикации отзыва;
     * author_information (TEXT) - информация об авторе отзыва, например, его местоположение или занятие;
     * FOREIGN KEY (destination_id) REFERENCES destinations(id) - устанавливает связь между таблицами "отзывы" и "места".
     Таблица "туроператоры" (tourcompanies):
     * id (INTEGER PRIMARY KEY AUTOINCREMENT) - уникальный идентификатор каждого туроператора;
     * name (TEXT) - название компании;
     * contact_info (TEXT) - контактная информация, такая как номер телефона или адрес электронной почты;
     * services_information (TEXT) - описание предоставляемых услуг и пакетов для клиентов;
     * current_offers (TEXT) - текущий набор предложений и акций компании.
     Таблица "бронирования" (bookings):
     * id (INTEGER PRIMARY KEY AUTOINCREMENT) - уникальный идентификатор каждого бронирования;
     * route_id (INTEGER) - внешний ключ, ссылающийся на таблицу "путешествия" по индексу id;
     * booking_date (TEXT) - дата бронирования путешествия;
     * tourists_information (TEXT) - информация о туристах, включая их предпочтения и требования;
     * booking_status (TEXT) - текущий статус бронирования (например, подтверждено, на ожидании, отменено);
     * FOREIGN KEY (route_id) REFERENCES routes(id) - устанавливает связь между таблицами "бронирования" и "путешествия".
     Код реализации таблиц БД представлен в приложении А. 
     В ходе выполнения данной дипломной работы также были созданы маршруты веб-приложения.
     Важно учесть, что для каждого маршрута нужно создать компонент, который будет выводить соответствующую информацию на экран. В данном случае мы можем использовать следующие компоненты:
     * AdminRoute - общий компонент для всех административных маршрутов;
     * Admin - главная страница администратора, где будет список доступных функций и возможностей;
     * Destinations - страница для просмотра и управления местами на маршрутах;
     * Reviews - страница для просмотра и управления отзывами о путешествиях;
     * Routes - страница для просмотра и управления путешествиями;
     * Tourcompanies - страница для просмотра и управления туроператорами, которые предлагают услуги на маршрутах.
     
     
3.2	Пользовательский интерфейс веб-сервиса
     
     
     Внешний вид веб-страниц представлен ниже. На рисунке 1 представлена страница «Главная».
     

Рисунок 1 – Страница «Главная»
     
     На рисунке 2 представлена страница «Авторизации».
     

Рисунок 2 – Авторизация
     
     На рисунке 3 представлена страница «Панель администратора».
     

Рисунок 3 – Панель администратора
     
     На рисунке 4 представлена страница «Управление местами назначения».
     

Рисунок 4 – Управление местами назначения

     На рисунке 5 представлена страница «Управления туристическими маршрутами».
     

Рисунок 5 – Управления туристическими маршрутами
     
     На рисунке 6 представлена страница «Управление отзывами».

Рисунок 6 – Управление отзывами
     
     На рисунке 7 представлена страница «Управление туристическими компаниями».
     

Рисунок 7 – Управление туристическими компаниям
     
     На рисунке 8 представлена страница «Управление расчетами».

Рисунок 8 – Управление расчетами
     
     Таким образом была успешно выполнена разработка веб-сервиса для поиска и планирования туристических маршрутов.
    
4   Экономическое обоснование работы
     
     
     4.1     Планирование работы
    
    
     Projectlibre – это бесплатное программное обеспечение для управления проектами, которое предоставляет возможности для планирования, отслеживания и контроля выполнения проектов, а также для управления ресурсами и бюджетом проекта. Оно является альтернативой популярному платному ПО для управления проектами, такому как Microsoft Project [7].
     Список задач проекта представлен на рисунке 9.
     

Рисунок 9 – Список задач проекта
     
     Диаграмма Ганта предназначена для визуализирования сложноуровневых последовательностей задач в течение времени [8]. Диаграмма   представлена на рисунке 10.

Рисунок 10 – Диаграмма Ганта
     
     Календарь проекта определяет рабочие и нерабочие дни, расписание трудового дня. Календарь проекта представлен на рисунке 11.
     

Рисунок 11 – Календарь проекта
     
     Сетевой график – это графический способ просмотра задач, зависимостей и критического пути проекта [8]. Сетевой график проекта показан на рисунке 12.
     

Рисунок 12 – Сетевой график проекта
     
     Ресурсы проекта предствлены на рисунке 13.
     

Рисунок 13 – Ресурсы проекта


     
    
5       Безопасность и экологичность работы
     
     
     5.1     Информационная безопасность
     
     
     Информационная безопасность – это комплекс мероприятий, направленных на защиту информации от несанкционированного доступа, изменения, уничтожения и распространения. В современном мире информация является ценным ресурсом и прекрасным оружием. Утечка ценных данных может стать причиной проблем как у компаний, так и у частных лиц.
     Одной из угроз информационной безопасности являются кибератаки. 
     Кибератака – это попытка киберпреступников атаковать компьютеры, выводя их из строя похищением данных или используя взломанную систему компьютера для дополнительных атак. В настоящее время кибератаки стали более сложными, что делает их предотвращение важной задачей для всех пользователей и организаций [9].
     Виды кибератак.
     Утечка данных. Конфиденциальные данные компании могут быть раскрыты из-за кибератак или утечек от бывших сотрудников, а также случайно, например, при потере телефона. 
     Фишинг. Атака, направленная на кражу конфиденциальной информации и доступ к учетным данным, при которой злоумышленник маскируется под известную компанию и обращается к жертве через электронную почту, SMS-сообщения, социальные сети, мессенджеры и телефонные звонки.
     Мошенничество от лица CEO (CEO fraud). Атака, направленная на конкретную жертву, для которой заранее была собрана информация с корпоративного сайта, рабочих социальных сетей и т. д. Мошенник обращается от лица менеджера к подчиненному, который может осуществлять денежные переводы, и просит его перевести большую сумму, будто бы для закрытия деловой сделки. Сотрудник думает, что распоряжение идет от начальника, и соглашается. 
     Мошенничество через отдел кадров (Human Resources Fraud). Атака, при которой злоумышленник выдает себя за сотрудника компании и просит перевести заработную плату на другой счет, который контролируется мошенником. 
     Атаки на корпоративную сеть. Цель может быть получение конфиденциальной информации или нанесение вреда имиджу компании, а также добавление на сайт смешных или непристойных изображений. Часто используются DoS-атаки, из-за которых пользователи не могут совершить покупку в онлайн-магазине или просмотреть страницу. 
     Программа-вымогатель (Ransomware). Вредоносное ПО, которое закрывает доступ к корпоративной информации путем шифрования. Восстановление данных возможно только после оплаты требуемой суммы. 
     Мошенничество через техническую поддержку (Fraud of false technical support). Мошенническая схема, при которой техническая поддержка предупреждает персонал об ошибках, обнаруженных на корпоративных устройствах, и может поставить под угрозу безопасность и конфиденциальность организации и девайса сотрудника. 
     Электронные письма с вредоносным ПО. Письма, выглядящие как счет-фактуры, купоны на покупку и другие приманки, могут стать источником вредоносной программы, передаваемой через вложение или ссылку. 
     DoS-атаки. Киберпреступники отправляют множество запросов к серверу одновременно, вызывая сбой сайта или онлайн-магазина. 
     Атаки рекламным ПО (Adware attacks). Устройство жертвы заражается через бесплатное ПО или пиратские программы, после чего пользователю показывается реклама, доход с которой уходит киберпреступнику. 
     Мошенничество через поставщика (Supplier impersonation attack). Атака, при которой компания получает письмо от провайдера, который представляется преступником и целью которого является получение денежного перевода [9].
     
     5.2     Охрана труда
     
     
     Охрана труда - это система мер и действий, направленных на обеспечение безопасности и здоровья работников на рабочем месте. Она включает в себя оценку рисков, разработку и внедрение мер по предотвращению производственных травм и заболеваний, обучение работников правилам безопасности и контроль за их соблюдением. Охрана труда является неотъемлемой частью производственной деятельности любой организации и направлена на защиту жизни и здоровья работников.
     Каждая организация обязана соблюдать нормы и правила по охране труда, установленные законодательством. Это касается не только производственных предприятий, но также всех других видов деятельности, где есть потенциальный риск для работников. Как правило, процесс обеспечения безопасности и здоровья на рабочем месте начинается с проведения специальной оценки рисков и разработки соответствующих мероприятий по минимизации этих рисков.
     Одной из главных причин этих проблем является длительное время, которое мы проводим за компьютером. Человеческое тело не предназначено для такой работы, и поэтому мы должны принимать меры для того, чтобы защитить себя от возможных проблем.
     В первую очередь необходимо убедиться, что рабочее место сотрудника настроено правильно. При использовании компьютера на работника могут оказывать влияние такие факторы, как: (в соответствии с типовой инструкцией по охране труда при работе на персональном компьютере ТОИ Р-45-084-011):
     * повышенный уровень электромагнитных излучений;
     * повышенный уровень статического электричества;
     * пониженная ионизация воздуха;
     * статические физические перегрузки;
     * перенапряжение зрительных анализаторов.
     Вследствие долгой работы за компьютером у работника могут возникать боли в позвоночнике, венозная недостаточность, ухудшение зрения и хронический стресс по причине необходимости постоянного принятия решений [10].
     Правильно организованное рабочее место позволит минимизировать вредное воздействие компьютера на здоровье. Необходимо учитывать следующие пункты:
     * освещение при работе с компьютером должно быть не слишком ярким, идеальный вариант приглушенный рассеянный свет;
     * экран монитора должен быть абсолютно чистым;
     * центр экрана должен быть примерно на уровне ваших глаз;
     * экран монитора должен быть удален от глаз минимум на 60-70 см.
     Работая на компьютере, каждый час делайте десятиминутный перерыв, во время которого посмотрите вдаль, встаньте с кресла, сделайте комплекс упражнений или просто походите.
     Каждые два - три часа надевать дырчатые очки, которые снимают спазм глазных мышц.
     Долгое время работы за компьютером может привести к различным последствиям для здоровья человека. Одной из наиболее распространенных проблем является синдром карпального туннеля, который вызывает онемение, покалывание и боль в запястье.
     Также длительное работа за ПК может привести к болям в спине и шее, а также ухудшению зрения. Регулярные перерывы в работе, физические упражнения и правильное положение тела могут помочь снизить риск возникновения этих проблем.
     Также, длительная работа за ПК может негативно сказаться на психическом здоровье человека. Излишняя нагрузка на мозг и глаза может вызвать усталость, стресс и депрессию. Для предотвращения этих проблем необходимо проводить регулярные перерывы в работе, делать физические упражнения и следить за своим питанием.
      При работе с компьютером необходимо учитывать ряд факторов, которые могут повлиять на здоровье и безопасность пользователя.
     Правильное освещение при работе за ПК
     Неправильная освещенность может привести к ухудшению зрения, быстрой утомляемости глаз и даже к возникновению болезней. Для обеспечения комфортных условий работы за компьютером необходимо соблюдать следующие правила:
     Использование достаточного количества света: уровень освещенности должен быть не менее 300 лк. Это можно обеспечить помощью настольной лампы или светильника [10].
     Регулировка яркости монитора: яркость экрана должна быть оптимальной для вашего зрения. Слишком яркий экран может стать причиной усталости глаз, а слишком тусклый – вызывать напряжение глазных мышц.
     Избегайте бликов и отражений: монитор должен быть расположен подальше от окон и других источников света, чтобы избежать отражений на экране.
     Расстановка рабочего места: расстояние между глазами и экраном должно составлять не менее 50-70 см, а верхняя граница экрана должна быть на уровне глаз.
     Регулярные перерывы: не забывайте делать перерывы каждые 30-40 минут, чтобы размять мышцы глаз и шеи, проветрить помещение и сменить позу.
     Защита от пыли при работе за ПК
     Работа за компьютером может быть опасной из-за большого количества пыли, которая образуется в процессе работы. Для того чтобы защитить своих сотрудников от пыли, необходимо принимать ряд мер.
     В рабочем помещении должны исправна работать вентиляция и фильтры для очистки воздуха, также необходимо регулярно проводить влажную уборку поверхностей. Это снизит уровень загрязнения и вероятность аллергических реакций сотрудников.
     Компьютер также необходимо защищать от скоплений пыли. Для этого можно использовать пылевые фильтры на вентиляционные отверстия корпуса ПК, а отверстия, имеющие технологическое происхождение изолировать, чтобы улучшить вентиляцию. Также необходимо регулярно проводить внутреннюю очистку корпуса от пыли с помощью баллонов с сжатым воздухом. Необходимо регулярно очищать клавиатуру и мышь от пыли [10]. 
     Защита от шумов при работе за ПК
     Одним из факторов, которые могут негативно сказаться на здоровье сотрудников, является шум. Шум при работе за ПК может привести к появлению головных болей, ухудшению слуха и даже к развитию серьезных заболеваний.
     Для защиты от шума необходимо использовать специальные звукопоглощающие материалы для облицовки стен и потолка в помещении, а также для оформления перегородок между рабочими местами. Кроме того, можно использовать специальные наушники или уши-затычки для защиты от шума.
     Руководитель компании или ответственный за охрану труда в организации должен проводить регулярную проверку уровня шума в помещении и принимать меры по его снижению. Также следует обучать сотрудников правилам работы со звукопоглощающими материалами и предоставлять им необходимые средства защиты от шума.
     Электробезопасность при работе за ПК.
     Основные требования к безопасности при работе за ПК заключаются в следующем:
     * проводка должна соответствовать нормам и правилам;
     * кабель питания должен быть целым и не иметь повреждений;
     * розетка должна быть обязательно заземлена;
     * нельзя подключать к компьютеру другие электроприборы или устройства;
     * запрещено распивать напитки на рабочем месте;
     * необходимо избегать попадания влаги на корпус ПК и периферийные устройства.
     Для предотвращения поражения электрическим током необходимо использовать специальные приспособления, такие как регулируемые столы и стулья [11].
     Пожаробезопасность при работе за ПК.
     При работе за компьютером существует определенный риск возникновения пожара. Одной из причин может быть перегрев системного блока или монитора, а также короткое замыкание проводов. Для минимизации вероятности возникновения пожара необходимо соблюдать следующие правила:
     * работать только с качественным оборудованием, которое соответствует всем требованиям безопасности; 
     * регулярно проверять состояние электрических проводов и разъемов на наличие повреждений; 
     * не допускать перегрузку розеток и удлинителей;
     * следить за температурой системного блока и монитора, не допуская их перегрева;
     * устанавливать датчики дыма и огня в помещении.
     Кроме того, при работе за ПК необходимо соблюдать правила личной безопасности:
     Избегать курения в рабочем помещении, не хранить легковоспламеняющиеся материалы (бумагу, спиртные напитки) вблизи компьютера, никогда не пытаться самостоятельно устранять неисправности в системном блоке или мониторе, следить за тем, чтобы работа за ПК не приводила к перенапряжению глаз и шейного отдела позвоночника [11].
     Правильное соблюдение правил безопасности при работе за компьютером поможет избежать опасных ситуаций и сохранить здоровье.
     



     5.3  Анализ методов сбора, переработки и утилизации отходов вычислительной техники
     
     
     В данном разделе перечислены основные отходы оргтехники, включающие компьютерные мониторы жидкокристаллические, системные блоки компьютеров, клавиатуры, манипуляторы "мыши" с проводами и картриджи печатающих устройств с содержанием тонера менее 7%, которые утратили потребительские свойства. 
     После списания эти отходы должны быть переданы на утилизацию в организации, имеющие соответствующие лицензии. Накопление отходов на территории предприятия разрешено не более 11 месяцев.
     Электронное оборудование, включая компьютеры, мониторы, принтеры и факсы, содержит различные материалы и детали, которые могут нанести вред окружающей среде, если не утилизировать их правильно. Они могут содержать токсичные вещества, такие как ртуть, свинец и олово, которые загрязняют атмосферу и убивают живые организмы. Кроме того, эти устройства содержат драгоценные металлы, такие как золото, палладий и платина, которые могут быть использованы во вторичном производстве. Несоблюдение процессов утилизации может привести к юридической ответственности, включая наложение штрафов, приостановление деятельности и даже арест [12].
     Компьютерное оборудование, такое как системные блоки ПК и ноутбуки, мониторы, проекторы, манипуляторы, серверные шкафы, принтеры, сканеры и т.д., содержит множество различных деталей, которые взаимодействуют с окружающей средой по-разному и не могут быть отнесены к одному классу опасности. Например, старые и сломанные компьютеры могут содержать как опасные, так и безвредные для экологии элементы:
     * ртутные лампы, установленные в персональных компьютерах и ноутбуках, относятся к высшему, I классу опасности;
     * платы и аккумуляторные батареи, изготовленные с использованием свинца, кадмия или олова, причисляются ко II классу опасности;
     * электротрансформаторы, кабели и провода имеют III класс опасности;
     * металлические корпуса практически безопасны и им присвоен V класс.
     Профессиональная утилизация компьютерной техники позволяет эффективно обезвреживать, перерабатывать или уничтожать каждый класс электронных отходов с максимальной эффективностью и минимальным риском для экологии.
     При проведении процедуры утилизации компьютеров и оргтехники необходимо соблюдать экологическое законодательство, а также следовать определенной схеме. Для этого составляют паспорт отходов, проводят экологическое исследование, разбирают устройства, сортируют комплектующие и перерабатывают их в соответствии с классом опасности [12]. 

Заключение
     
     
     Планирование пеших туристических маршрутов - актуальная задача как для туристов, так и для людей, желающих узнать что-то новое о местности вокруг или занять свободное время прогулкой. В случае если данное время ограничено, пользователю необходима оценка времени, которое займет маршрут. Существующие сервисы планирования маршрутов не фокусируются на решении данной задачи и, как следствие, решают её не полностью или затрудняют получение желаемого результата сопутствующим функционалом.
     В данной работе предложен вариант решения данной задачи. Был реализован веб-сервис, позволяющий построить маршрут по указанным точкам начала и конца маршрута с учетом времени пути. Пользователю дана возможность как ручного, путем добавления каждой точки в маршрут, так и автоматического планирования маршрута системой.
     Таким образом, в процессе выполнения дипломной работы были решены следующие задачи:
     * рассмотрены существующие web-сервисы, предоставляющие схожий функционал;
     * рассмотрены способы получения коллекции достопримечательностей;
     * рассмотрены способы построения пеших маршрутов через достопримечательности;
     * сформулированы требования к разрабатываемому решению;
     * изучен Foursquare API;
     * разработан веб-сервис;
     * произведен расчёт сметы затрат на разработку;
     * рассмотрены вопросы безопасности и экологичности работы.
     



