

ВВЕДЕНИЕ


      В настоящее время информационные технологии находятся на том уровне, на котором они способны заменить большую часть труда человека. Современные средства, предоставляемые информационными системами, базами данных и другими информационными технологиями, способны автоматизировать учетную и организаторскую деятельность практически в любой сфере. Процессы планирования и учета в трамвайном депо нуждаются в такой автоматизации, поскольку при больших объемах важно не упустить из виду множество мелочей: графики работы водителей, занятость трамвайного фонда на маршрутах, взаиморасчеты за обслуживание трамвайного парка, занятость сотрудников и многое другое.
     Объект исследования – трамвайное депо.
     Предмет исследования – проект автоматизированной информационной системы учета деятельности трамвайного депо.
     Цель исследования: построение и реализация автоматизированной информационной системы, обеспечивающей автоматизацию процессов деятельности трамвайного депо. Для достижения поставленной цели в настоящей работе ставятся следующие задачи:
      провести анализ исследуемого объекта, разработать и проанализировать модель исследуемого процесса на объекте исследования «как есть», разработать техническое задание на разработку информационной системы;
      используя современные технологии моделирования и системного анализа разработать технический проект автоматизированной информационной системы, обеспечивающей автоматизацию процессов деятельности трамвайного депо;
      выбрать стек технологий и инструментов и разработать рабочий проект автоматизированной информационной системы на современной программно-аппаратной базе.
    1	Теоретический раздел


     1.1	Понятие информационной системы
      
      
     Информационная система (ИС) - система хранения, обработки и передачи информации, представленной в определенной форме. В вычислительной технике информационная система представляет собой программный комплекс, который предоставляет возможность надежного хранения данных в памяти, выполнение преобразований информации и вычислений, предоставление пользователям удобного и легко осваиваемого интерфейса. Таким образом, использование информационных систем позволяет:
      работать с большим объемом данных (причем прослеживается преобладание логической обработки над математической);
      хранить данные в течение длительного временного периода;
      связать несколько компонентов, имеющих свои локальные цели, задачи и приемы функционирования, в единую систему для работы с информацией;
      значительно снизить затраты на хранение и доступ к необходимым данным;
      достаточно быстро находить требуемую информацию и т. д.
     Классическими примерами информационных систем являются банковские системы, автоматизированные системы управления предприятиями, системы резервирования авиационных или железнодорожных билетов и т. д. Современные СУБД обладают широкими возможностями резервного копирования и архивации данных, параллельной обработки информации, особенно в случае использования многопроцессорных компьютеров в качестве сервера базы данных.
     Автоматизированная информационная система (АИС) - информационная система, использующая электронно-вычислительную машину на этапах ввода, подготовки и выдачи информации, то есть является развитием информационных систем, занимающихся поиском с помощью прикладных программ. Автоматизированные информационные системы относятся к классу сложных систем, как правило, не столько в связи с большой физической размерностью, сколько в связи с многозначностью структурных отношений между их компонентами. АИС может быть определена как комплекс автоматизированных информационных технологий, предназначенных для информационного обслуживания - организованного непрерывного технологического процесса подготовки и выдачи потребителям научной, управленческой и др. информации, используемой для принятия решений, в соответствии с нуждами для поддержания эффективной деятельности. Повышение эффективности функционирования предприятий невозможно без внедрения современных методов управления, базирующихся на АИС управления предприятиями.
     АИС позволяют:
      повышать производительность работы персонала;
      улучшать качество обслуживания клиентов;
      снижать трудоемкости и напряженность труда персонала, минимизировать ошибки в его действиях.
     ИС «ДЕПО» предназначена для автоматизации деятельности трамвайного депо. Основным назначением системы является оптимизация процессов учета водителей и вагонов депо, процессов обслуживания вагонов, ведения необходимой отчетности.
     В результате разработки ИС «ДЕПО» должны быть улучшены следующие показатели:
      сокращение времени процессов составления отчетной документации по процессам обслуживания вагонов депо;
      оптимизация процессов учета;
      повышение производительности работы за счет ведения заявок на обслуживание в депо полностью в электронном виде и исключения бумажных заказ-нарядов, исключения операций перемещения этих бумаг;
      повышение надежности и безопасности информации за счет введения ролевой модели пользователей и разграничения прав доступа к данным.
1.2	Автоматизация деятельности общественного транспорта


     Автоматизация работы ДЕПО направлена на ускорение работы каждой из служб или отделов управления, а также на ускорение всех процессов в работе ДЕПО, уменьшение затрат на все проводимые работы, усовершенствование хранения и обработки информации поступающей в процессе работы.
     Автоматизация деятельности трамвайного ДЕПО – это использование специальных технологий и программных решений для оптимизации и улучшения рабочих процессов в области работы ДЕПО.
     Это может включать в себя несколько ключевых аспектов:
     1. Управление заявками на ремонт и обслуживание подвижного состава:
     Запись и отслеживание заявок на ремонт и обслуживание подвижного состава позволяет вести перечень заявок, автоматически присваивать им статусы, контролировать их выполнение. Вести учет применённых запчастей и материалов.
Видеть историю обслуживания, что позволит анализировать неисправности на дистанции и планировать работы на будущее.
     2.Учет основных данных по обслуживанию трамвайного парка:
     Ведение справочников работ, материалов, запчастей, типовых работ по ремонту и обслуживанию. Ведение реестра трамвайного парка, типовых моделей вагонов, используемых в депо. Ведение справочников вспомогательных систем, а также справочников водителей и маршрутов. Каждый из которых направлен на ускорение работы службы сервиса подвижного состава, избавив сотрудников от необходимости вручную вносить каждую запчасть или выполненную работу.
     3. Управление учетом кадров и единовременным редактированием:
     Создание, редактирование и удаление записей о сотрудниках, службах и должностях избавит работников отдела кадров от большей части бумажной работы и рутинного оформления изменений каждого сотрудника или полный приём, увольнение сотрудника.
     4. Создание расписаний для вагонов и водителей:
     Упрощение работы диспетчеров по созданию маршрутной сети города. Централизованное создание маршрутов с привязкой по времени и дате для каждого маршрута и водителя. Установление соответствий маршрутов, проверки коллизий и ведение справочника значительно ускорит и упростит работу по выпуску подвижного состава на линию и учет рабочего времени.
     5. Отчетность:
     Автоматизированная система призвана предоставить детализированные отчеты по различным параметрам, таким как расходы компании, остатки запчастей или материалов для своевременного пополнения, а также о занятости подвижного состава и водителей в разные промежутки времени. Что существенно облегчит управление ДЕПО в целом.


    2	Аналитический раздел


     2.1	Техническое задание на разработку системы


     Общие сведения
     Полное наименование системы: информационная система автоматизации процессов трамвайного депо.
     Краткое наименование системы: ИС «ДЕПО».
     Основание для проведения работ: реализация проекта автоматизации деятельности трамвайного депо, определенного в задании на выпускную квалификационную работу, полученного в ходе выполнения преддипломной практики в ООО Синара-ГТР Таганрог.
     Заказчик: ООО Синара-ГТР Таганрог.
     Разработчик: студент группы 111-ИСЗ-4К Мирошниченко Александр Владимирович.
     Назначение и цели создания системы:
     
     ИС «ДЕПО» предназначена для автоматизации деятельности трамвайного депо. Основным назначением системы является оптимизация процессов учета водителей и вагонов депо, процессов обслуживания вагонов, ведения необходимой отчетности.
     В результате разработки ИС «ДЕПО» должны быть улучшены следующие показатели:
      сокращение времени процессов составления отчетной документации по процессам обслуживания вагонов депо;
      оптимизация процессов учета;
      повышение производительности работы за счет ведения заявок на обслуживание в депо полностью в электронном виде и исключения бумажных заказ-нарядов, исключения операций перемещения этих бумах;
      повышение надежности и безопасности информации за счет введения ролевой модели пользователей и разграничения прав доступа к данным.
     
     Описание объекта автоматизации (предметной области)
     
     Модель объекта автоматизации (трамвайного депо) имеет следующие информационные входные потоки:
      распоряжения по кадровой организационно-штатной структуре, позволяющей вести учет водителей, мастеров и прочих сотрудников;
      запросы на составление расписания выходов трамваев и водителей на маршруты;
      информация о техническом состоянии транспортного фонда трамвайного депо;
      информация о трамваях.
     В ходе деятельности депо выходными информационными потоками являются:
      расписания выходов трамваев и водителей на маршруты;
      отчет о занятости водителей;
      отчет о расходах на ремонт и обслуживание транспортного фонда депо;
      отчет о состоянии транспортного фонда депо.
     Участники процессов:
      водители;
      руководитель и мастера цеха по ремонту и обслуживанию;
      отдел кадров;
      отдел планирования;
      руководитель депо.
     Процессы трамвайного депо регламентируются следующими документами и нормативами:
      установленные требования к формам отчетности;
      законодательство в области кадрового учета;
      устав компании;
      правила и нормативы по обслуживанию, ремонту и контролю надлежащего технического состояния транспортного фонда депо.
     Таким образом, описанная модель объекта автоматизации может быть представлена в виде функциональной модели в нотации IDEF0 [1], определенной в рамках методологии IDEF0 [1]. На рисунке 1 приведена контекстная диаграмма модели.

Рисунок 1 – Контекстная модель процессов трамвайного депо
      
     Детальное рассмотрение функциональной модели объекта автоматизации производится после декомпозиции процесса на подпроцессы. Так, в рамках процесса автоматизируемой деятельности трамвайного депо выделяются следующие подпроцессы:
      учет водителей и мастеров;
      составление расписания вывода трамваев на маршруты и назначение водителей на эти маршруты;
      техническое обслуживание и ремонт транспортного фонда депо;
      составление отчетности о деятельности депо.
     На рисунке 2 приведена модель декомпозиции процессов трамвайного депо.

Рисунок 2 – Модель декомпозиции процессов трамвайного депо
      
     Процессы учета водителей и другого персонала депо тривиальны и включают функции кадрового учета и учета организационно-штатной структуры, включая подразделения и должности. Функции кадровых процессов и делопроизводства не затрагиваются, т. к. это функции отдельного бизнес-процесса, не рассматриваемого в настоящей работе. Автоматизации подлежат процессы:
      ведения реестра должностей;
      ведения учета подразделений;
      ведение кадрового учета водителей, мастеров и другого персонала депо.
     Кадровый учет выполняется кадровым подразделением депо. На рисунке 3 приведена диаграмма декомпозиции процесса учета водителей и мастеров трамвайного депо.

Рисунок 3 – Модель декомпозиции процесса учета водителей и мастеров трамвайного депо
      
     Процесс составления расписания заключается в назначении на маршрут трамвая из реестра транспорта Депо и водителя. Для маршрута определяется даты и время начала и окончания маршрута. Составление расписания входит в обязанности отдела планирования. На рисунке 4 приведена диаграмма декомпозиции процесса учета составления расписания в трамвайном депо.

Рисунок 4 – Модель декомпозиции процесса учета составления расписания в трамвайном депо
      
     Процессы ремонта и технического обслуживания являются одной из наиболее важных задач в деятельности депо. От результатов выполнения этой задачи зависит успешное функционирование всей системы, а также безопасность пассажиров. На рисунке 5 приведена диаграмма декомпозиции процесса технического обслуживания и ремонта транспортного фонда депо.

Рисунок 5 – Модель декомпозиции процесса технического обслуживания и ремонта транспортного фонда депо
      
     В соответствии с диаграммой основные автоматизируемые процессы в рамках задачи ремонта и технического обслуживания депо:
      составление заявок на ремонт и техническое обслуживание – могут быть составлены как водителями (обнаружение неисправности в процессе эксплуатации), таки и мастерами ремонтного цеха (обнаружение дефектов в ходе планового обслуживания);
      непосредственное выполнение работ, произведенных по заявкам – в рамках задачи автоматизации необходимо вести учет выполняемых работ, затраты на эти работы с учетом факторов трудоемкости;
      закупка материалов, комплектующих и запчастей, необходимых для осуществления работ по заявкам – здесь также важно вести учет и консолидировать общие затраты;
      закрытие заявок – ответственная задача, выполняемая руководителем цеха по ремонту и обслуживанию – позволяет завершить комплекс мероприятий по очередному / внеплановому обслуживанию техники депо и выпустить технику обратно в работу в исправном состоянии.
     Процессы составления отчетности составляют комплекс мероприятий по консолидации данных, полученных в ходе выполнения остальных важных задач депо. На рисунке 6 приведена диаграмма декомпозиции процесса составления отчетности в трамвайном депо.

Рисунок 6 – Модель декомпозиции процесса составления отчетности в трамвайном депо
      
     Консолидированные данные группируются и вносятся в специальные формы отчетности. Автоматизация этой задачи крайне важна, поскольку работа с большим объемом данных требует больших временных ресурсов. Кроме того, при ручной обработке данных не исключается человеческий фактор и случайные или преднамеренные ошибки, и искажение информации. В автоматизированном варианте обработке информации такие риски исключаются, а персонал получает много свободного времени, которое можно использовать для других важных задач.
     Таким образом, полученная функциональная модель должна использоваться в процессе решения задачи автоматизации.
     
     Требования к информационной системе
     
      Требования к численности и квалификации персонала и режиму его работы
     
     Состав персонала, необходимого для обеспечения эксплуатации ИС «ДЕПО»:
      мастер цеха по ремонту и обслуживанию транспортного парка депо (МЦРО) – 1 и более человек в соответствии со штатным расписанием;
      руководитель цеха по ремонту и обслуживанию транспортного парка депо (РЦРО) – 1 человек;
      сотрудник отдела планирования маршрутов (ОПМ) – 1 и более человек в соответствии со штатным расписанием;
      водители (В) – 1 и более человек в соответствии со штатным расписанием;
      сотрудник отдела кадров (ОК) – 1 и более человек в соответствии со штатным расписанием;
      руководитель (Р) – 1 человек;
      администратор информационной системы (А) – 1 человек.
     Для корректной работы ИС «ДЕПО» требуется минимум 7 человек. К квалификации персонала предъявляются следующие требования:
      знание своих функций и обязанностей, регламентов выполнения операций;
      владение практическими навыками работы на персональном компьютере на уровне «уверенный пользователь».
     Требования к функциям информационной системы
     
     Функции информационной системы должны обеспечивать комплекс задач автоматизации, предусмотренных в разработанной модели. Комплекс задач можно представить в виде дерева функций – рисунок 7.

Рисунок 7 – Сводная функциональная модель процессов объекта автоматизации в виде дерева функций
      
     Приведенное на рисунке 7 дерево автоматизируемых функций рассматривается в комплексе с функциональными задачами персонала. Таким образом, в ИС «ДЕПО» выделяется 6 подсистем:
      подсистема администрирования;
      подсистема управления заявками на обслуживание и ремонт;
      подсистема учета основных данных по обслуживанию трамвайного парк депо;
      подсистема кадрового учета;
      подсистема создания расписаний;
      подсистема формирования отчетности.
      Ниже приведены списки функций, которые необходимо реализовать в перечисленных подсистемах
     
     Подсистема администрирования
     
     В рамках данной подсистемы должны быть реализованы следующие функции (в скобках указаны исполнители):
      создание аккаунтов для пользователей с привязкой аккаунта к сотруднику из базы данных (А);
      указание роли пользователя при создании аккаунта (А);
      редактирование и удаление аккаунтов пользователей (А).
     
     Подсистема управления заявками на обслуживание и ремонт
     
     В рамках данной подсистемы должны быть реализованы следующие функции (в скобках указаны исполнители):
      создание заявок на ремонт и обслуживание с указанием описания сути заявки и привязкой по номер вагона, для которого требуется обслуживание или ремонт (В, МЦРО);
      ввод данных о выполненной работе с выбором работы из справочника с привязкой к заявке, с указанием, при необходимости, коэффициента трудоемкости выполненной работы и количества выполненных работ одного типа (МЦРО);
      ввод данных о примененных запчастях и материалах с выбором из справочника с привязкой к конкретной заявке (МЦРО);
      закрытие выполненной заявки на ремонт и обслуживание техники трамвайного парка (РЦРО).
     
     Подсистема учета основных данных по обслуживанию трамвайного парк депо
     
     В рамках данной подсистемы должны быть реализованы следующие функции (в скобках указаны исполнители):
      ведение справочника (создание, редактирование и удаление записей) типовых работ, выполняемых мастерами по ремонту и обслуживанию техники депо, с указанием базовой стоимости работ (РМЦО);
      ведение справочника (создание, редактирование и удаление записей) типовых запчастей, комплектующих и материалов, которые применяются при ремонте и обслуживании техники депо, с указанием справочной стоимости (РМЦО);
      ведение справочника (создание, редактирование и удаление записей) типовых моделей вагонов, используемых в депо, с указанием основных справочных характеристик: вес, вместимость, мощность электродвигателей, номинальное напряжение питающей сети, срок службы, максимальная скорость и др. (РМЦО);
      ведение реестра (добавление, редактирование и удаление записей) вагонов трамвайного парка (РМЦО).
     
     Подсистема кадрового учета
     
     В рамках данной подсистемы должны быть реализованы следующие функции (в скобках указаны исполнители):
      ведение справочника (создание, редактирование и удаление записей) должностей депо (ОК);
      ведение справочника (создание, редактирование и удаление записей) подразделений депо (ОК);
      ведение реестра (создание, редактирование и удаление записей) сотрудников депо (ОК).
     
     Подсистема создания расписаний
     
     В рамках данной подсистемы должны быть реализованы следующие функции (в скобках указаны исполнители):
      ведение справочника (создание, редактирование и удаление записей) маршрутов (ОПМ);
      создание записи в расписании с указанием маршрута, назначенного на маршрут трамвая (из реестра, см.: Подсистема учета основных данных по обслуживанию трамвайного парк депо) и водителя (из реестра, см.: Подсистема кадрового учета), с проверкой коллизий; для маршрута также указываются даты и время начала и завершения маршрута (ОПМ).
     
     Подсистема формирования отчетности
     
     В рамках данной подсистемы должны быть реализованы следующие функции (в скобках указаны исполнители):
      создание отчета о расходах на ремонт и обслуживание транспортного фонда депо по данным, указанным при выполнении ремонтов и закупке запчастей и материалов (Р);
      создать отчет о занятости водителей на маршрутах (Р).
     
     Диаграмма вариантов использования информационной системы «ДЕПО»
     
     Функциональные требования к информационной системе «ДЕПО», консолидируются на единой модели автоматизации предметной области, представленной диаграммой вариантов использования – рисунок 8.
     В соответствии со стандартами диаграмма прецедентов может считаться формальным описанием требований пользователя к проектируемой программной системе. Также в соответствии со стандартами диаграмма прецедентов является частью спецификации программного обеспечения – логической моделью, определенной унифицированным языком моделирования систем UML.

Рисунок 8 – Диаграмма вариантов использования ИС «ДЕПО»
      
     Таким образом, модель вариантов использования ИС «ДЕПО» должна рассматриваться как модель взаимодействия пользователей с информационной системой в рамках решения автоматизируемых задач.
     
     Требования к надежности
     
     Требования к надежности системы должны определять такие свойства системы, как ее зрелость, устойчивость и восстанавливаемость [2]. Надежность обеспечивается за счет:
      применения технических средств, системного и базового программного обеспечения, соответствующих классу решаемых задач;
      соблюдения правил эксплуатации и технического обслуживания программно-аппаратных средств;
      предварительного обучения пользователей и обслуживающего персонала;
      стабильной работы сервера СУБД.
     Время восстановления после отказа, вызванного сбоем электропитания технических средств (иными внешними факторами), не фатальным сбоем (не крахом) операционной системы, не должно превышать времени, необходимого на перезагрузку операционной системы и запуск программы, при условии соблюдения условий эксплуатации технических и программных средств.
     Время восстановления после отказа, вызванного неисправностью технических средств, фатальным сбоем (крахом) операционной системы, не должно превышать времени, требуемого на устранение неисправностей технических средств и переустановку программных средств.
     Время восстановления после отказа, вызванного неисправностью на сервере, не должно превышать времени, требуемого на устранение неисправностей.
     Под аварийной ситуацией понимается аварийное завершение рабочего процесса, выполняемого ИС «ДЕПО», а также «зависание» этого процесса.
     При работе ИС «ДЕПО» возможны следующие аварийные ситуации, которые влияют на надежность работы:
      прекращение электропитания сервера;
      прекращение электропитания компьютера пользователя;
      прекращение электропитания обеспечения сети;
      сбой программного обеспечения сервера.
     
     Требования к защите информации от несанкционированного доступа
     
     Для пользователей должно быть соблюдено разграничение прав доступа к функциональности ИС «ДЕПО.
     Сервер СУБД и база данных должны быть защищены паролем администратора.
     
     Требования по стандартизации и унификации
     
     Взаимодействие пользователей с ИС «ДЕПО» должно осуществляться посредством визуального пользовательского графического интерфейса. Интерфейс ИС «ДЕПО» должен быть понятным и удобным, не должен быть перегружен графическими элементами и должен обеспечивать быстрое отображение экранных форм. Навигационные элементы должны быть выполнены в удобной для пользователя форме. Средства редактирования информации должны удовлетворять принятым соглашениям в части использования функциональных клавиш, режимов работы, поиска, использования оконной системы. Ввод-вывод данных системы, прием управляющих команд и отображение результатов их исполнения должны выполняться в интерактивном режиме. Интерфейс должен соответствовать современным эргономическим требованиям и обеспечивать удобный доступ к основным функциям и операциям системы. Интерфейс ИС «ДЕПО» должен быть выполнен в соответствии с основными принципами проектирования пользовательских интерфейсов Нильсена-Молиха[3].
     
     Требования к видам обеспечения
     
     Требования к лингвистическому обеспечению
     
     При реализации системы должны применяться следующие языки программирования / моделирования высокого уровня: 
      объектно-ориентированный язык программирования C# [4];
      декларированный язык запросов SQL;
      стандартизированный язык разметки HTML;
      нотация моделирования программного обеспечения – UML, спецификация 2.5.1 [5];
      CASE-система для выполнения технического проекта на UML – Visual paradigmfor UML 15.2 [6];
      для реализации диалога ИС «ДЕПО» с пользователями должен применяться графический оконный пользовательский интерфейс;
      язык элементов пользовательского интерфейса – русский;
      язык комментариев в программном коде – русский / английский;
      язык именования переменных в программном коде, компонентов проекта ПО, таблиц и полей БД – английский;
      программный код на языке C# должен быть выполнен в соответствии со стандартом ECMA-334 [7].
     
     Требования к информационному обеспечению
     
     Информационной обеспечение ИС «ДЕПО» должно быть реализовано в виде:
      базы данных;
      выходных документов.
     База данных должна быть нормализована до третьей нормальной формы включительно (при принятых ограничениях предметной области). Все таблицы должны быть связаны ключами. В таблицах должны быть созданы индексы для оптимизации доступа к данным. Дополнительно необходимо настроить ограничения целостности данных.
     Выходные документы, создаваемые системой, должны бы то сформированы в соответствии с установленными формами.
     
     Требования к программному обеспечению
     
     Системные программные средства, используемые ИС «ДЕПО», должны быть представлены локализованной версией операционной системы Windows. Заранее должны быть предустановлены веб-браузер Google Chrome или любой другой аналогичный ему, Microsoft Office для работы с документами.
     Требования к техническому обеспечению
     
     Система должна быть реализована с использованием существующего технического комплекса депо. Существующие ПК необходимо проверить на соответствие системным требованиям (в качестве системных принять требования к функционированию операционной системы Windows 10). При необходимости привести существующие ПК в соответствие системным требованиям. 
     
     Состав и содержание работ по созданию системы
     
     Разработку системы необходимо выполнять, руководствуясь следующими стадиями:
      концептуальное проектирование – обоснование необходимости, моделирование процессов, разработка требований и технического задания;
      техническое проектирование – разработка технического проекта системы, включая схему данных и UML-модели программного обеспечения;
      рабочее проектирование – разработка рабочего проекта системы: реализация базы данных в СУБД, разработка программного обеспечения;
      тестирование, документирование, оценка эффективности внедрения проекта.
Комплект, выдаваемый заказчику, должен быть представлен:
      скомпилированным исполняемым файлом приложения, укомплектованным связанными библиотеками;
      проектом исходного кода в среде разработки со всеми подключаемыми модулями и плагинами;
      руководством по запуску и загрузке проекта в среду разработки;
      файлом описания физической структуры базы данных на языке описания данных (DDL, Data Description Language);
      файлом бэкапа базы данных (для SQL Server: формата *.backpac, для MySQL – *.sql файл дампа базы данных);
      файлами технического проекта в выбранной CASE-системе проектирования;
      пояснительной запиской, включающей спецификации технорабочего проекта системы;
      настоящим техническим заданием.
     Силами Заказчика в срок до начала этапа приемки–передачи системы в эксплуатацию должны быть подготовлены ПК с заранее установленным ПО, а также организовано необходимое подключение к локальной сети в соответствии с требованиями, приведенными в настоящем техническом задании.
     Силами Заказчика в срок до начала этапа анализа задач и разработки требований к системе должны быть организован доступ к источникам данных, назначены ответственные сотрудники со стороны Заказчика для взаимодействия с разработчиком по вопросам реализации ИС «ДЕПО».
    
    
     2.2	Проектирование системы
     
     
     Анализ предметной области и объекта автоматизации позволяет составить набор информационных объектов предметной области, определить их атрибуты и установить отношения между ними. В настоящей работе выполнено комплексное проектирование базы данных ИС «ДЕПО» с помощью инструментов инжиниринга баз данных CASE-системы Sybase Enterprise Architect 15.0 [8]. На рисунке 9 приведена спроектированная схема базы данных ИС «ДЕПО».

Рисунок 9 – Модель базы данных ИС «ДЕПО»
      
     Спецификация таблиц базы данных была получены средствами автоматизированного формирования отчетов по моделям – Report Designer CASE-системы Enterprise Architect. 
     Схема данных, приведенная на рисунке 11, соответствует третьей нормальной форме в рамках ограничений предметной области. Третьей нормальной формы достаточно для большинства бизнес-приложений [9].Дополнительные ограничения предметной области реализуются следующими методами:
     проектированием и реализацией ограничений на внешние (foreign) ключи в СУБД посредством проектирования соответствующих функций в CASE-системе и их последующего экспорта в схему данных средствами прямого databaseengineering (выбранная CASE-система Enterprise Architect 15.0 поддерживает данную функцию);
     алгоритмами программного обеспечения, позволяющими на уровне программного кода на языке программирования высокого уровня реализовать ограничения.
     Система Enterprise Architect поддерживает процесс автоматического формирования скрипта создания физической структуры базы данных на языке описания данных (DDL, Data Description Language). При этом возможен выбор целевой СУБД, для которой будет сгенерирован скрипт с учетом специализации синтаксиса и его адаптации под конкретную СУБД. 
     
     Модульная структура информационной системы
     
     Программное обеспечение системы спроектировано с учетом перспектив развития системы, наращивания функций, добавления новых возможностей. Поэтому ПО ИС «ДЕПО» построено по модульному принципу, при котором функционально однородные модули объединяются в пакеты. Так, в проектируемой ИС «ДЕПО» выделяется три основных пакета, определяющих MVC-паттерн (рисунок 10).

Рисунок 10 – Диаграмма пакетов ИС «ДЕПО»
      
     Так, все программные модули системы ИС «ДЕПО» распределены по трем пакетам:
     Model – пакет представления контекста модели данных, основанной на объектной структуре системы;
     View – пакет представления системы (слой пользовательского интерфейса), в который включены компоненты форм пользовательского интерфейса;
     Controller – пакет системных контроллеров, управляющих поведением элементов модели, содержит контроллеры управления правами пользователей, основного цикла обновления данных технологических параметров, а также управления системой компоновки и отображения данных на страницах визуализации.
     Пакеты наполнены модулями моделей, контроллеров и представлений в соответствии с их назначением. В соответствии с принципами разбиения программных модулей на пакеты логическая структура системы строится из композиции логических структур ее подсистем.
     
     Требования к дизайну и функциональности интерфейса
     
     Взаимодействие пользователей с ИС «ДЕПО» должно осуществляться посредством визуального пользовательского графического интерфейса. Интерфейс ИС «ДЕПО» должен быть понятным и удобным, не должен быть перегружен графическими элементами и должен обеспечивать быстрое отображение экранных форм. Навигационные элементы должны быть выполнены в удобной для пользователя форме. Средства редактирования информации должны удовлетворять принятым соглашениям в части использования функциональных клавиш, режимов работы, поиска, использования оконной системы. Ввод-вывод данных системы, прием управляющих команд и отображение результатов их исполнения должны выполняться в интерактивном режиме. Интерфейс должен соответствовать современным эргономическим требованиям и обеспечивать удобный доступ к основным функциям и операциям системы. Интерфейс ИС «ДЕПО» должен быть выполнен в соответствии с основными принципами проектирования пользовательских интерфейсов Нильсена-Молиха.
     
     
     2.3	Выбор средств реализации проекта
     
     
     Работа над программным проектом осуществляется в стадийном режиме. На каждой стадии результатом является законченная часть проекта: концептуальные и общесистемные решения, модели, разработанные модули и т. д. В процессе работы частью проекта является модель системы, рассмотренная с различных сторон: информационная, структурная, логическая, архитектурная и т. д. Результатами этого этапа являются диаграммы, которые выполняются на специальном унифицированном языке – UML. В настоящее время принято использовать спецификацию UML 2.5.1 [10]. Для моделирования программных систем на языке UML инжиниринговый сегмент ИТ-систем предлагает множество программных инструментов со своими особенностями работы. Срединаиболеераспространенныхстоитвыделить: Software Ideas Modeler, Sybase Power Designer, Visual Paradigm for UML, IBM Rational Rose, Sparx Enterprise Architect, Star UML. Для того, чтобы в процессе разработки системы добиться высокой эффективности, от инжинирингового инструмента требуется поддержка прямого инжиниринга – трансляции графических моделей на языки описания непосредственно программного кода или его описания [11].
     Концептуальная модель предметной области для системы, которая получается на стадии концептуального проектирования, позволяет увидеть схему отношений объектов предметной области. В большинстве информационных систем информационная модель является реляционной, и, соответственно, предполагает наличие базы данных. Для хранения данных в настоящее время наиболее популярны следующие реляционные СУБД:
 MS Access;
 MySQL;
 SQL Server;
 Oracle;
 PostgreSQL;
 SQLite.
     Для выбора конкретной СУБД важно учесть ее специфику, вид, средства расширения функциональности, обеспечения целостности данных, администрирования. Немаловажным также является открытость и способ распространения СУБД, а также качество имеющейся документации и поддержки пользователей. Так, в таблице 1 приведена сравнительная характеристика приведенных СУБД.
     В таблице 1 не приведены такие характеристики СУБД, как производительность и надежность, т. к. современные СУБД имеют достаточный запас по производительности и высокий уровень надежности для выполнения типичных бизнес-задач. Эти характеристики следует рассматривать и анализировать индивидуально для каждого случая проектирования высоконагруженных систем. В целом, по таблице 1 можно сделать следующие выводы:
     СУБД SQLite и MS Access не могут быть применены, т. к. не поддерживают многопользовательский режим, необходимый для большинства современных информационных систем и бизнес-приложений;
     СУБД SQL Server и Oracle имеют достаточно высокий порог вхождения, что препятствует быстрому освоению эксплуатации, что потребует наличия высококвалифицированных инженеров [12], что не всегда может позволить себе компания;
     Наиболее удобные варианты – СУБД MySQL и PostgreSQL.
     PostgreSQL имеет много общего с MySQL. Кроме того, эти две СУБД по данным опроса на конец 2023 года занимают самые верхние строки рейтинга, в котором PostgreSQL опережает своего оппонента более, чем на 4% (см. рисунок 11). Данные опроса приведены согласно источнику [13].

Рисунок 11 – Рейтинг популярности СУБД в 2023 году (фрагмент: приведены первые 15 позиций)
      
     Недостатком PostgreSQL является документация низкого качества. Сообщество пользователей этой СУБД сильно распределено, поэтому документация на СУБД не имеет единого стандарта и может быть противоречива [14].
     Для выбора языка программирования программной системы необходимо определиться с целевой платформой. В настоящее время большинство коммерческих фирм и обычных пользователей используют операционную систему MS Windows, поэтому ориентироваться в первую очередь следует на нее. Выбирая между веб и десктоп разработкой, целесообразным будет остановиться на втором варианте, поскольку десктоп-система не потеряет работоспособность в случае нештатного отключения интернета. Однако такой вывод окончательно можно сделать только в контексте задачи (некоторые проекты предполагают распределенность и хранение данных, например в «облаке»). На рисунке 12 приведен рейтинг языков программирования по данным проведенного опроса на конец 2023 года. Данные опроса приведены согласно источнику [13].

Рисунок 12 – Рейтинг популярности языков программирования в 2023 году (фрагмент: приведены первые 15 позиций)
      
     Из приведенного рейтинга видно, что первые три строчки рейтинга делят языки программирования веб-приложений и баз данных. Это связано с интенсивной информатизацией сферы услуг, в которой пользователи удаленно могут получать различные услуги (запись на услуги, интернет-магазины, маркетплейсы, интернет-сообщества, социальные сети и сервисы и т. д.).
     Применительно к десктоп-системам основной выбор идет между Python / Java / C++ / C#. Язык программирования Python предназначен для высокопроизводительной разработки приложений для анализа и систематизации данных и мало подходит для разработки десктоп-приложений [15]. Java сейчас используют в основном для программирования встраиваемых систем, мобильных систем и приложений банковского сектора. На данном языке программирования можно разрабатывать бизнес-приложения, но для приложений для Windows лучше всего использовать язык программирования с поддержкой пакета .NET: C# или C++, поскольку фреймворк .NET предлагает множество средств для быстрого и эффективного проектирования пользовательских интерфейсов любой сложности – как обычных GDI (технология Windows Forms), так и более продвинутых и дизайнерских (технология WPF с поддержкой DirectX). C++, поддерживающий .NET, доступен в Microsoft в виде расширения C++: C++ / CLI. Этот язык имеет полную поддержку фреймворка, однако такой «неуправляемый» (как его часто называют) C++ имеет громоздкие и непривычные языковые конструкции, что создает дополнительные неудобства в процессе разработки. Кроме того, использование приложений, разработанных на C++/CLI потребует на целевом компьютере установки пакета VC++ Redistributable соответствующей версии [16]. Еще один недостаток C++/CLI – отсутствие поддержки технологии WPF, позволяющей создавать дизайнерские интерфейсы.
     Таким образом, для разработки программного обеспечения десктоп-системы наилучший эффект может дать выбор языка программирования высокого уровня C#. Кроме того, фреймворк ASP.NET позволяет разрабатывать на C# и веб-приложения тоже. Для разработки программ на C# используется среда разработки Visual Studio или Visual Studio Code. Visual Studio – это полностью интегрированная среда разработки приложений на C#, включая интеграцию средств инжиниринга баз данных, визуальный редактор пользовательского интерфейса, средства рефакторинга и тестирования кода и многие другие инструменты разработчика. Visual Studio Code – это более универсальная среда, ориентированная также и на разработку в Python, HTML, js, CSS и т. д. Для разработки программного обеспечения, естественно, выбирается IDE Visual Studio из соображений комплексности проекта и производительности при разработке. Для улучшения читаемости и сопровождаемости кода программа выполняется с учетом требований к написанию программ, определенных (рекомендованных) стандартом ECMA-334 [17].
     Подводя итог, можно выделить связку инструментов (MySQL, Visual Studio, C# .NET / ASP.NET) как наиболее удачную для быстрого и эффективного проектирования бизнес-приложений любой сложности в соответствии с основными требованиями к надежности, производительности и удобству использования. 
     Для разработки моделей системы в работе выбрана CASE-система Sybase Enterprise Architect 15.0 [18]. Выбор в пользу данной системы основывается на личных предпочтениях автора работы.
      

    3	Проектный раздел
     
     
     3.1	Описание базы данных
     
     
     Технология разработки приложения ИС «ДЕПО» – Microsoft.WindowsForms, т. е. для построения пользовательского интерфейса применяются стандартные компоненты, определенные пространством имен Microsoft.Windows.Forms. Само приложение состоит из основного системного окна (формы), в котором размещены необходимые компоненты отображения. При сборке форм использована технология контейнеров. Т. е. все элементы пользовательского интерфейса компонуются в контейнерные элементы следующих типов:
      Panel;
      TabControl;
      SplitContainer;
      FlowLayoutPanel;
      TableLayoutPanel.
     Контейнер Panel представляет собой пространство формы или ее рабочую поверхность, на которой можно размещать элементы управления. Использование такого контейнера необходимо в случае, когда в одной форме или контейнере уровня выше необходимо использовать переключение видов. В этом случае в родительский контейнер можно реализовать на базе Panel, а содержимое контейнера переключать по заданной логике. Содержимое может быть выполнено отдельными компонентами на базе Microsoft.Windows.Control. Это только один из вариантов применения контейнера Panel. 
     Контейнер SplitContainer используется для разделения области формы (контейнера уровня выше) на две составляющие горизонтально или вертикально. Основное свойство SplitContainer – наличие «плавающей» границы между разделяемыми областями. Таким образом, пользователь в процессе работы программы может динамически менять соотношение размеров разделяемых областей. Вкладывая элементы SplitContainer друг в друга, можно организовать что-то типа сетки для организации компонентов форм. Однако для этой задачи уже лучше использовать контейнер TableLayoutPanel. 
     Контейнер FlowLayoutPanel используется для автоматической организации динамически добавляемых компонентов форм – его использование удобно, когда не требуется заботиться о виде организации компонентов, но задача стоит только в наполнении контейнера необходимыми объектами.
     В ИС «ДЕПО» контейнеры Panel, TabControl, FlowLayoutPanel и SplitContainer используются в главной системной форме:
      SplitContainer – разделение главной формы на область меню и область отображения результатов анализа данных;
      Panel – размещение содержимого меню на форме;
      TabControl – реализация вкладок с подсистемами анализа данных;
      FlowLayoutPanel – организация пунктов меню, динамически размещаемых в контейнере уровня выше при добавлении функций.
     Контейнер TableLayoutPanel применяется для упорядоченной организации элементов пользовательского интерфейса в виде таблицы / сетки с поддержкой объединения колонок / строк. Этот компонент позволяет организовать эргономичную компоновку формы, содержащей множество групп компонентов, при этом позволяет задать размеры или пропорции ячеек и автоматически подстраивать размеры групп в соответствии с размерами формы. В ИС «ДЕПО» табличные контейнеры применяются для наполнения отчетных форм, содержащих множество отдельных представлений результатов. Компонент может заполняться динамически посредством соответствующих инструкций, записанных на программном коде. Для этого:
      создаются экземпляры компонентов, подлежащих размещению в контейнере;
      в контейнере создается новая строка / столбец;
      экземпляры размещаются в контейнере;
      посредством метода SetRow(Control, int) / SetColumn(Control, int) задается размещение экземпляра в сетке контейнера, здесь: Control – размещаемый экземпляр, int – соответствующий номер строки / столбца.
     Описанные принципы контейнерной сборки компонентов пользовательского интерфейса позволяют:
      организовать функции подсистем в одном контейнере по типу переключения страниц на рабочем столе пользователя;
      выполнить компоновку различных элементов на страницах пользователя;
      организовать поддержку динамического размещения компонентов в системе;
      решить задачу автоматического упорядоченного размещения множества компонентов на формах.
     Для представления визуальных и текстовых элементов отчета в системе предусмотрены следующие компоненты:
      System.Windows.Forms.Label – для размещения отдельных текстовых меток на формах;
      System.Windows.Forms.WebBrowser – для представления текстовых данных в форматированном виде (формат HTML);
      тулбоксы (System.Windows.Forms.ToolStrip, наборы команд) – реализуют меню подсистем, сервисное меню и контекстное меню управления данными в таблицах;
      таблицы (System.Windows.Forms.DataGridView) – предназначены для представления данных, например, для отображения выборок из БД;
      поля ввода данных (System.Windows.Forms.TextBox, System.Windows.Forms.ComboBox) – текстовые поля и списки выбора, предназначенные для ввода данных в систему;
      строка состояний (System.Windows.Forms.StatusStrip) – реализует строку статуса в главном окне;
      картинки (System.Windows.Forms.PictureBox) – служат для отображения пиктограмм к командам и выполняют информативно-декоративную функцию;
      поля для ввода чисел (System.Windows.Forms.NumericUpDown) – поле, в которое вводится только числовое значение (снабжено также кнопками инкремента и декремента), которое ограничивается снизу и сверху.
     
     
     3.2	Описание пользовательского интерфейса
     
     
     Основной механизм работы системы состоит в двух видах взаимодействия: система – пользователь и система – база данных. Таким образом, система взаимодействует с базой данных и представляет результат пользователю. Для этого в системе предусмотрены специальные компоненты и функции пользовательского интерфейса, предлагаемые средствами .NET Framework от Microsoft.
     Так, ведение справочных и оперативных таблиц выполняется с помощью комбинации таких элементов, как DataGridView и ToolStrip. DataGridView отображает полученные данные из соответствующего набора Dataset. ToolStrip предоставляет строку активного контекстного меню подсистемы. DataGridView связан с источником данных (BindingSource), который обращается через набор данных (DataSet) в соответствующую таблицу физической базы данных – для этого используется специальный адаптер (DataTableAdapter).
     В данном разделе подробно описывается, как применяются технологии Microsoft для обеспечения функций взаимодействия «пользователь – система – база данных».
     Все созданные в СУБД таблицы и представления должны быть интегрированы в проект прикладного программного обеспечения системы. Среда разработки прикладного программного обеспечения (MS Visual Studio 2019) позволяет выполнить комплексную интеграцию базы данных в проект ПО. Для этого компанией Microsoft был разработан программный интерфейс ODBC и технология интегрирования БД с приложением. Являясь также продуктом Microsoft, MySQL со своей стороны поддерживает идею комплексной интеграции в IDE Visual Studio [19] посредством специальных коннекторов. Так, в среде Visual Studio в навигаторе «Источники данных» необходимо произвести настройку с помощью мастера подключения к БД (рисунок 13).

Рисунок 13 – Мастер подключения к БД в MS Visual Studio
      
     Чтобы Visual Studio «увидела» базу данных, необходимо настроить подключение к соответствующему источнику данных – в данном случае – серверу СУБД (см. рисунок 14).

Рисунок 14 – Настройка подключения к источнику данных
      
     С помощью команды «Проверить подключение» можно убедиться, что система разработки устанавливает связь с базой данных – как физическую, так и логическую (рисунок 15).
     

Рисунок 15 – Проверка подключения к БД
      
     На рисунке 16 показано, что мастер подключения к источнику данных считал все созданные таблицы и представления в БД. Для их интеграции в проект программного обеспечения необходимо выбрать соответствующие импортируемые в модель программного обеспечения элементы и нажать кнопку «Готово».

Рисунок 16 – Импорт элементов БД в проект приложения Visual Studio
      
     На рисунке 17 видно, что все выбранные элементы базы данных импортировались в источник данных в проект прикладного программного обеспечения Visual Studio.

Рисунок 17 – Добавленные элементы базы данных в источник данных проекта прикладного программного обеспечения Visual Studio
      
     Для каждого импортированного запроса среда разработки создает специальные объекты доступа к данным (рис. 18).

Рисунок 18 – Добавленные в проект новые объекты, созданные на основе импортированных элементов базы данных (фрагмент)
      
     Каждый объект доступа к данным имеет раздел адаптеров. Адаптер, по сути, представляет собой метод класса объекта данных. Среда разработки позволяет создать неограниченное количество таких методов. Методы создаются на основе представлений (рис. 19).

Рисунок 19 – Создание нового объекта базы данных – представления – в проекте Visual Studio
      
     Для получения пользовательских выборок из представлений можно посредством разработки параметризованных запросов в самом IDE. Каждый такой запрос добавляется в качестве метода к классу соответствующего адаптера. На рисунке 20 приведен SQL-код создания в IDE запроса, позволяющего реализовать функцию поиска учетной записи пользователя по логину и паролю. Данная функция реализует процесс авторизации пользователя в информационной системе.

Рисунок 20 – Написание SQL-кода нового представления в проекте Visual Studio
      
     На рисунке 21 приведено окно, в котором программистом прописывается имя метода, который будет реализовывать созданный запрос. IDE создает методы двух типов: заполнения и получения таблицы данных (DataTable).

Рисунок 21 – Создание методов заполнения датасета и получения данных на основе нового представления в проекте Visual Studio
      
     На рисунке 22 показан результат добавления запроса к адаптеру доступа к данным: создан новый метод заполнения объекта DataTable данными выборки с параметрами.

Рисунок 22 – Вид объекта данных на основе представления с заполненными методами адаптера
      
     Разработанные на предыдущем шаге параметризованные запросы могут использоваться программистами как обычные функции (методы соответствующих классов). При этом, если требуется отобразить полученные с помощью запроса данные, в таблицу, необходимо выполнить два шага.
     Шаг 1. Стандартный компонент .NET DataGridView имеет свойство DataSource, на которое назначается источник данных, созданный средствами IDE автоматически на базе импортированного представления. На рисунке 23 приведен пример подключения к DataGridView источника данных на базе созданного выше представления FillByFilter.

Рисунок 23 – Подключение к DataGridView источника данных на базе представления
      
     Шаг 2. Для заполнения таблицы DataGridView данными с учетом условий выборки пользователя используется объект класса адаптера. Структура класса адаптера создается также автоматически при импорте представления. В новом созданном экземпляре класса адаптера вызывается метод, основанный на созданном в IDE параметризованном запросе. При этом параметры запроса (выборки) задаются как аргументы метода. На рисунке 24 приведен пример (фрагмент) программного кода заполнения данными таблицы представления с учетом параметров, введенных пользователем.

Рисунок 24 – Фрагмент программного кода заполнения данными таблицы представления с учетом параметров, введенных пользователем
      
     Таким же образом в системе .NET могут заполняться любые компоненты, для которых определены возможности связи с источниками данных (DataSource): списки, таблицы, инфографика или любые пользовательские / библиотечные компоненты. Так работает функция взаимодействия «БД – система – Пользователь». Со стороны пользователя для взаимодействия система предусматривает диалоговые формы ввода данных и кнопки подтверждения. Например, на рисунке 25 приведена форма ввода данных сотрудника (пользователя).

Рисунок 25 – Форма ввода данных сотрудника (пользователя)
      
     Система предлагает стандартные компоненты для ввода данных. При этом функции системы включают в том числе отслеживание потенциально некорректного ввода данных. Так, в рамках функций обеспечения целостности данных, система контролирует:
      тип вводимых данных;
      допустимые размеры вводимых данных;
      списки выбора, допустимые в конкретных случаях.
     Контроль выполняется средствами программного кода. Система не позволит применить введенные данные, если они не соответствуют всем требованиям и спецификации базы данных. Так, на рисунке 26 приведен фрагмент кода пользователя, отвечающего за верификацию введенных данных в диалог ввода данных сотрудника (пользователя).

Рисунок 26 – Фрагмент кода пользователя, отвечающего за верификацию введенных данных в диалог ввода данных сотрудника (пользователя)
     
     
     3.3	Тестирование и оптимизация интерфейса
     
     
     Основные понятия тестирования пользовательского интерфейса
     
     Тестирование пользовательского интерфейса заключается в следующих проверках:
      подтверждения выполнения элементами интерфейса назначенных им функций;
      соответствия элементов интерфейса требованиям, предъявляемым к стилям и внешнему виду;
      соответствия элементов интерфейса на предмет эргономики и удобства использования;
      соответствия элементов интерфейса на предмет реализации защитных функций, не позволяющих пользователю нанести вред системе посредством случайных или намеренных действий.
     
     Виды и методы тестирования пользовательского интерфейса
      
     Как было показано ранее – система главным образом взаимодействует с данными. Поэтому прежде всего тестированию подлежат те функции, которые отвечают за взаимодействие с данными:
      ввод новых данных – метод ввода данных реализуется через диалоговое окно или прямое редактирование соответствующей формы (например, таблицы с данными); 
      редактирование данных выбранных существующих записей с обновлением изменений в БД;
      удаления данных;
      оперативного обновления данных на формах учета сразу после внесения изменений.
     Общий алгоритм манипуляций с данными приведен на блок-схеме на рисунке 27.

Рисунок 27 – Общий алгоритм управления данными
      
     В таблице 2 описан тестовый набор для тестирования функций создания записи.
Таблица 2 – Тестовые наборы для функции «Создать Запись»
Имя тестаОписание тестаТестовый случай и входные данныеРеакция системыТ-1Создание записейПользователь выполняет соответствующую команду из меню справочникаСистема показывает диалог ввода данных новой записи. Диалог модален, поля заполнены по умолчанию или пусты     В таблице 3 описан тестовый набор для тестирования функций создания записи.
Таблица 3 – Тестовые наборы для функции «Редактировать Запись»
Имя тестаОписание тестаТестовый случай и входные данныеРеакция системыТ-2Редактирование выбранной записиПользователь выделяет запись и выполняет соответствующую команду из меню справочникаСистема показывает диалог ввода данных новой записи. Диалог модален, поля заполнены по актуальными значениями выбранной записиТ-3Редактирование не выбранной записиПользователь не выделил запись в справочнике и выполняет соответствующую команду из меню справочникаСистема выводит сообщение «Выберите запись из справочника для редактирования» (или аналогичное по смыслу)     В таблице 4 описан тестовый набор для тестирования функций создания записи.
Таблица 4 – Тестовые наборы для функции «Удалить Запись»
Имя тестаОписание тестаТестовый случай и входные данныеРеакция системыТ-4Удаление выбранной записиПользователь выделяет запись и выполняет соответствующую команду из меню справочникаСистема запрашивает подтверждение на удаление с выбором типа «Да/Нет»Т-5Удаление не выбранной записиПользователь не выделил запись в справочнике и выполняет соответствующую команду из меню справочникаСистема выводит сообщение «Выберите запись из справочника для удаления» (или аналогичное по смыслу)     
     
     Результаты тестирования пользовательского интерфейса
     
     Приведенные выше тесты выполнялись в рамках контрольного примера запуска программного обеспечения информационной системы. Также были протестированы функции авторизации и соединения с базой данных.
     
      Подключение к базе данных
      
     Информационная система работает с базой данных. Для подключения к базе данных в системе необходимо указать:
      имя или адрес сервера базы данных;
      учетные данные для подключения к серверу базы данных;
      имя базы данных (по умолчанию – TRAMD-DB, но может быть другое, определенное пользователем при развертывании БД в СУБД);
      порт соединения (при необходимости). 
     Названные параметры подключения устанавливаются в специальной форме в системе – рисунок 28.

Рисунок 28 – Форма настройки подключения системы к базе данных
      
     При успешном соединении с базой данных система сохраняет строку подключения в файле dbconnset.dat, расположенном в корневой директории приложения. При повторном соединении с БД с теми же параметрами параметры строки подключения запрашиваться не будут, пока не измениться хотя бы один из параметров.
     
      Авторизация
      
     Авторизация пользователя в системе выполняется с помощью логина и пароля. Для этого предусмотрена форма с соответствующими полями – рисунок 29. Для смены пользователя в любой момент можно воспользоваться командой строки состояния: 

Рисунок 29 – Форма авторизации в системе
      
      Работа администратора
      
     Администратор работает с консолью управления СУБД или через другой менеджер СУБД (рекомендуется использовать MS SQL SERVER Management Studio версии 17 или выше).
     
      Работа отдела кадров
     
     В рамках определенных в системе функций менеджер имеет доступ к подсистемам:
      ведения справочника организаций (заказчиков);
      ведения учета заказов на проведение мероприятий;
      ведения учета взаиморасчетов, проводимых в рамках договоров на проведение мероприятий.
     На рисунке 30 приведен пример рабочего стола пользователя с ролью «Отдел кадров».

Рисунок 30 – Форма рабочего стола пользователя с ролью «Отдел кадров»
      
     Все учетные таблицы в системе имеют однотипные принципы управления. На рисунке 31 приведена структура меню любой справочной или оперативной таблицы в системе.

Рисунок 31 – Элементы управления записями в учетных и справочных таблицах
      
     Слева направо на рисунке 31 представлены следующие элементы:
      команда перехода к первой записи;
      команда перехода к предыдущей записи;
      номер текущей записи;
      команда перехода к следующей записи;
      команда перехода к последней записи;
      команда добавления записи в конец таблицы;
      команда удаления выбранных записей (также поддерживается удаление клавишей «Delete»);
      команда сохранения изменений, выполненных в таблице (без активации данной команды все изменения, внесенные в таблицу, будут отменены);
      команда обновления данных (например, если необходимо отменить все изменения и вернуться к исходному состоянию таблицы до момента последнего сохранения изменений).
     На рисунке 32 приведен пример вида справочника должностей в компании, доступного пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок.

Рисунок 32 – Форма справочника должностей компании
      
     На рисунке 33 приведен пример вида справочника подразделений в компании, доступного пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок.

Рисунок 33 – Форма справочника подразделений компании
      
     На рисунке 34 приведен пример вида справочника сотрудников компании, доступного пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок.

Рисунок 34 – Форма справочника сотрудников компании

      Работа отдела планирования маршрутов
     
     На рисунке 35 приведен пример рабочего стола пользователя с ролью «Отдел планирования маршрутов».

Рисунок 35 – Форма рабочего стола пользователя с ролью «Отдел планирования маршрутов»
      
     На рисунке 36 приведен пример вида справочника маршрутов, доступного пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок.

Рисунок 36 – Форма справочника маршрутов
      
     На рисунке 37 приведен пример вида таблицы учета выходов вагонов на маршруты, доступной пользователю в рамках задачи составления расписания. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок. В таблице для выбора маршрута, вагона и водителя предусматриваются соответствующие выпадающие списки, которые заполняются информацией из справочников БД.

Рисунок 37 – Форма учета выходов вагонов на маршруты
     
      Работа водителя
     
     На рисунке 38 приведен пример рабочего стола пользователя с ролью «Отдел Водитель».
      

Рисунок 38 – Форма рабочего стола пользователя с ролью «Водитель»
     Водителю доступна единственная функция – создание заявок на обслуживание вагонов. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок. В таблице для выбора вагона и водителя (создателя) предусматриваются соответствующие выпадающие списки, которые заполняются информацией из справочников БД.
      	
      Работа мастера ремонтного цеха
     
На рисунке 39 приведен пример рабочего стола пользователя с ролью «Мастер ремонтного цеха».

Рисунок 39 – Форма рабочего стола пользователя с ролью «Мастер ремонтного цеха»
      
     На рисунке 40 приведен пример вида таблицы учета выполненных работ по заявкам, доступной пользователю в рамках задачи учета ремонтов и обслуживания вагонов парка. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок. В таблице для выбора работ, заявки и исполнителя предусматриваются соответствующие выпадающие списки, которые заполняются информацией из справочников БД.

Рисунок 40 – Форма учета выполненных работ по заявкам
      
     На рисунке 41 приведен пример вида таблицы учета примененных запчастей по заявкам, доступной пользователю в рамках задачи учета ремонтов и обслуживания вагонов парка.

Рисунок 41 – Форма учета примененных запчастей по заявкам
      
     Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок. В таблице для выбора работ, заявки и исполнителя предусматриваются соответствующие выпадающие списки, которые заполняются информацией из справочников БД.
      Работа руководителя ремонтного цеха
     
     На рисунке 42 приведен пример рабочего стола пользователя с ролью «Руководитель ремонтного цеха».

Рисунок 42 – Форма рабочего стола пользователя с ролью «Руководитель ремонтного цеха»
      
     На рисунке 43 приведен пример вида таблицы учета заявок, доступной пользователю в рамках задачи учета ремонтов и обслуживания вагонов парка. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок. В таблице для выбора вагона и водителя (создателя) предусматриваются соответствующие выпадающие списки, которые заполняются информацией из справочников БД. Руководитель ремонтного цеха уполномочен закрывать созданные заявки на ремонт и обслуживание, проставляя в таблице дату закрытия заявки (завершения выполнения работ) и краткий состав мер, выполненных по работе над заявкой.

Рисунок 43 – Форма учета заявок в подсистеме руководителя ремонтного цеха
      
     На рисунке 44 приведен пример вида справочника маршрутов, доступного пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок.

Рисунок 44 – Форма справочника моделей вагонов
      
     На рисунке 45 приведен пример вида таблицы учета трамвайного парка депо, доступной пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок. В таблице для выбора модели предусматривается соответствующий выпадающий список, которые заполняются информацией из справочников БД.

Рисунок 45 – Форма учета трамвайного парка депо
      
     На рисунке 46 приведен пример вида справочника выполняемых работ, доступного пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок.

Рисунок 46 – Форма справочника выполняемых работ
     На рисунке 47 приведен пример вида справочника применяемых запчастей, доступного пользователю. Изменения в полях записей производятся прямо в таблице щелчком мыши на соответствующее поле и нажатием клавиши F2. Также доступна навигация по ячейкам таблицы с помощью клавиш-стрелок.

Рисунок 47 – Форма справочника применяемых запчастей

      Работа руководителя компании
     
     На рисунке 48 приведен пример рабочего стола пользователя с ролью «Руководитель компании».

Рисунок 48 – Форма рабочего стола пользователя с ролью «Руководитель компании»
      
     Руководителю компании доступны функции составления сводных отчетных документов двух видов:
      отчет по занятости водителей на маршрутах;
      отчет по затратам на обслуживание парка депо.
     На рисунке 49 приведен пример сформированного отчетного документа о занятости водителей на маршрутах.

Рисунок 49 – Пример сформированного отчетного документа о занятости водителей на маршрутах
      
     На рисунке 50 приведен пример сформированного отчетного документа о затратах на обслуживание парка депо.

Рисунок 50 – Пример сформированного отчетного документа о затратах на обслуживание парка депо
     
     Внедрение и поддержка интерфейса
     
     Пользовательский интерфейс системы выполнен на стандартных компонентах интерфейсов Windows Forms, поэтому никаких дополнительных спецификаций для пользователей системы не предусматривается.
     Для повышения надежности функций пользовательского интерфейса в процессе эксплуатации функции валидации данных на уровне компонентов пользовательского интерфейса максимально реализовывают защиту от некорректного ввода данных, используя для этого следующие методы:
      при обеспечении соответствия типов для полей ввода необходимо использовать специальные компоненты: NumericUpDown для ввода числовых значений, DateTimePicker – для ввода дат и т. д.;
      при обеспечении соблюдения ограничений по максимальной длине строки для полей ввода типа TextBox необходимо устанавливать соответствующее ограничение в свойстве MaxLength;
      при обеспечении соблюдения ограничений на внешний ключ необходимо использовать предопределенные списки типа ComboBox или ListBox с возможностью выбора только тех значений, которые имеются в дочерних таблицах;
      соблюдение ограничений на заполнение обязательных полей следует контролировать программно, например, используя проверку типа «if(TextBox1.Text.Trim() == string.Empty) {… ошибка! …}».
      

    4	Экономическое обоснование работы
     
     
     4.1	Планирование работы
     
     
     Для оценки затрат и разработки графика выполнения проекта системы в данной работе использован расчетный комплекс Microsoft Project, план представлен на  рисунке51.

Рисунок 51 – План реализации проекта
      
     На рисунке 52 приведена диаграмма Ганта выполнения проекта системы, соответствующая разработанному календарному плану реализации проекта ИС «ДЕПО».

Рисунок 52 – Диаграмма Ганта реализации проекта ИС «ДЕПО»
      
     Приведенная на рисунке 52 диаграмма Ганта соответствует требованиям к стадиям разработки, определенным в техническом задании.



    

    5	Безопасность и экологичность работы
     
     
     5.1	Охрана труда
     
     
     Охрана труда — это система мер и действий, направленных на обеспечение безопасности и здоровья работников на рабочем месте. Она включает в себя оценку рисков, разработку и внедрение мер по предотвращению производственных травм и заболеваний, обучение работников правилам безопасности и контроль за их соблюдением. Охрана труда является неотъемлемой частью производственной деятельности любой организации и направлена на защиту жизни и здоровья работников.
     Каждая организация обязана соблюдать нормы и правила по охране труда, установленные законодательством. Это касается не только производственных предприятий, но также всех других видов деятельности, где есть потенциальный риск для работников. Как правило, процесс обеспечения безопасности и здоровья на рабочем месте начинается с проведения специальной оценки рисков и разработки соответствующих мероприятий по минимизации этих рисков.
     Одной из главных причин этих проблем является длительное время, которое мы проводим за компьютером. Человеческое тело не предназначено для такой работы, и поэтому мы должны принимать меры для того, чтобы защитить себя от возможных проблем.
     В первую очередь необходимо убедиться, что рабочее место сотрудника настроено правильно. При использовании компьютера на работника могут оказывать влияние такие факторы, как: (в соответствии с типовой инструкцией по охране труда при работе на персональном компьютере ТОИ Р-45-084-011):
      повышенный уровень электромагнитных излучений;
      повышенный уровень статического электричества;
      пониженная ионизация воздуха;
      статические физические перегрузки;
      перенапряжение зрительных анализаторов.
     Вследствие долгой работы за компьютером у работника могут возникать боли в позвоночнике, венозная недостаточность, ухудшение зрения и хронический стресс по причине необходимости постоянного принятия решений.
     Правильно организованное рабочее место позволит минимизировать вредное воздействие компьютера на здоровье. Необходимо учитывать следующие пункты:
      освещение при работе с компьютером должно быть не слишком ярким, идеальный вариант приглушенный рассеянный свет;
      экран монитора должен быть абсолютно чистым;
      центр экрана должен быть примерно на уровне ваших глаз;
      экран монитора должен быть удален от глаз минимум на 60-70 см.
     Работая на компьютере, каждый час делайте десятиминутный перерыв, во время которого посмотрите вдаль, встаньте с кресла, сделайте комплекс упражнений или просто походите.
     Каждые два - три часа надевать дырчатые очки, которые снимают спазм глазных мышц.
     На рисунке 53 показано правильное положение сотрудника сидя за компьютером на рабочем месте.

Рисунок 53 – Правильное положение сотрудника на рабочем месте.
     Долгое время работы за компьютером может привести к различным последствиям для здоровья человека. Одной из наиболее распространенных проблем является синдром карпального туннеля, который вызывает онемение, покалывание и боль в запястье.
     Также длительное работа за ПК может привести к болям в спине и шее, а также ухудшению зрения. Регулярные перерывы в работе, физические упражнения и правильное положение тела могут помочь снизить риск возникновения этих проблем.
     Также, длительная работа за ПК может негативно сказаться на психическом здоровье человека. Излишняя нагрузка на мозг и глаза может вызвать усталость, стресс и депрессию. Для предотвращения этих проблем необходимо проводить регулярные перерывы в работе, делать физические упражнения и следить за своим питанием.
      При работе с компьютером необходимо учитывать ряд факторов, которые могут повлиять на здоровье и безопасность пользователя.
     Правильное освещение при работе за ПК
     Неправильная освещенность может привести к ухудшению зрения, быстрой утомляемости глаз и даже к возникновению болезней. Для обеспечения комфортных условий работы за компьютером необходимо соблюдать следующие правила:
     Использование достаточного количества света: уровень освещенности должен быть не менее 300 лк. Это можно обеспечить помощью настольной лампы или светильника.
     Регулировка яркости монитора: яркость экрана должна быть оптимальной для вашего зрения. Слишком яркий экран может стать причиной усталости глаз, а слишком тусклый – вызывать напряжение глазных мышц.
     Избегайте бликов и отражений: монитор должен быть расположен подальше от окон и других источников света, чтобы избежать отражений на экране.
     Расстановка рабочего места: расстояние между глазами и экраном должно составлять не менее 50-70 см, а верхняя граница экрана должна быть на уровне глаз.
     Регулярные перерывы: не забывайте делать перерывы каждые 30-40 минут, чтобы размять мышцы глаз и шеи, проветрить помещение и сменить позу.
     Защита от пыли при работе за ПК
     Работа за компьютером может быть опасной из-за большого количества пыли, которая образуется в процессе работы. Для того чтобы защитить своих сотрудников от пыли, необходимо принимать ряд мер.
     В рабочем помещении должны исправна работать вентиляция и фильтры для очистки воздуха, также необходимо регулярно проводить влажную уборку поверхностей. Это снизит уровень загрязнения и вероятность аллергических реакций сотрудников.
     Компьютер также необходимо защищать от скоплений пыли. Для этого можно использовать пылевые фильтры на вентиляционные отверстия корпуса ПК, а отверстия, имеющие технологическое происхождение изолировать, чтобы улучшить вентиляцию. Также необходимо регулярно проводить внутреннюю очистку корпуса от пыли с помощью баллонов с сжатым воздухом. Необходимо регулярно очищать клавиатуру и мышь от пыли. 
     Защита от шумов при работе за ПК
     Одним из факторов, которые могут негативно сказаться на здоровье сотрудников, является шум. Шум при работе за ПК может привести к появлению головных болей, ухудшению слуха и даже к развитию серьезных заболеваний.
     Для защиты от шума необходимо использовать специальные звукопоглощающие материалы для облицовки стен и потолка в помещении, а также для оформления перегородок между рабочими местами. Кроме того, можно использовать специальные наушники или уши-затычки для защиты от шума.
     Руководитель компании или ответственный за охрану труда в организации должен проводить регулярную проверку уровня шума в помещении и принимать меры по его снижению. Также следует обучать сотрудников правилам работы со звукопоглощающими материалами и предоставлять им необходимые средства защиты от шума.
     Электробезопасность при работе за ПК
     Основные требования к безопасности при работе за ПК заключаются в следующем:
      проводка должна соответствовать нормам и правилам;
      кабель питания должен быть целым и не иметь повреждений;
      розетка должна быть обязательно заземлена;
      нельзя подключать к компьютеру другие электроприборы или устройства;
      запрещено распивать напитки на рабочем месте;
      необходимо избегать попадания влаги на корпус ПК и периферийные устройства.
     Для предотвращения поражения электрическим током необходимо использовать специальные приспособления, такие как регулируемые столы и стулья.
     Пожаробезопасность при работе за ПК
     При работе за компьютером существует определенный риск возникновения пожара. Одной из причин может быть перегрев системного блока или монитора, а также короткое замыкание проводов. Для минимизации вероятности возникновения пожара необходимо соблюдать следующие правила:
      работать только с качественным оборудованием, которое соответствует всем требованиям безопасности; 
      регулярно проверять состояние электрических проводов и разъемов на наличие повреждений; 
      не допускать перегрузку розеток и удлинителей;
      следить за температурой системного блока и монитора, не допуская их перегрева;
      устанавливать датчики дыма и огня в помещении.
     Кроме того, при работе за ПК необходимо соблюдать правила личной безопасности:
     Избегать курения в рабочем помещении, не хранить легковоспламеняющиеся материалы (бумагу, спиртные напитки) вблизи компьютера, никогда не пытаться самостоятельно устранять неисправности в системном блоке или мониторе, следить за тем, чтобы работа за ПК не приводила к перенапряжению глаз и шейного отдела позвоночника. Правильное соблюдение правил безопасности при работе за компьютером поможет избежать опасных ситуаций и сохранить здоровье.
     
     
     5.2	Охрана окружающей среды
     
     
     Вопросы защиты окружающей среды в процессе производства компьютеров возникли давно и регламентируются сейчас, в частности, стандартом NUТЕК, по которому контролируются выбросы токсичных веществ, условия работы и прочее. Согласно стандарту, произведенное оборудование может быть сертифицировано лишь в том случае, если не только контролируемые параметры самого оборудования соответствуют требованиям этого стандарта, но и технология производства этого оборудования отвечает требованиям стандарта.
     Воздействие компьютеров на окружающую среду при эксплуатации регламентировано рядом стандартов. Выделяют две группы стандартов и рекомендаций — по безопасности и эргономике. Ограничения на излучения от компьютерных мониторов и промышленной техники, используемой в офисе, налагает стандарт МРR-II, разработанный Шведским национальным департаментом стандартов и утвержденный ЕЭС. Взаимодействие с окружающей средой регламентирует рекомендация ТСО-95 NUТЕК (Швеция). Монитор, отвечающим ТСО-95, должен иметь низкий уровень электромагнитных излучений, обеспечивать автоматическое снижение энергопотребления при долгом неиспользовании, отвечать европейским стандартам пожарной и электрической безопасности. Требования ТСО-95 являются гораздо более жесткими, чем требования МРR-II. Экологическая оценка компьютера и, в частности, ВДТ как наибольшего потребителя энергии в ПЭВМ включает требования по экономии и снижению энергопотребления. Согласно стандарту ЕРА, монитор должен поддерживать три энергосберегающих режима — ожидание, приостановку и "сон”. Требования отечественного стандарта к ПЭВМ и ВДТ — СанПиН 2.2.2.542-96 соответствуют стандарту МРR-II.
     Рост применения компьютерной техники, ее быстрое моральное старение остро ставит вопрос об утилизации элементов ЭВМ после окончания срока ее эксплуатации. При утилизации старых компьютеров происходит их разработка на фракции: металлы, пластмассы, стекло, провода, штекеры.
     В настоящее время разработаны следующие методы переработки компьютерного лома и защиты литосферы от него:
      сортировка печатных плат по доминирующим материалам: дробление и измельчение, гранулирование, в отдельных случаях сепарация, обжиг полученной массы для удаления сгорающих компонент;
      расплавление полученной массы, рафинирование;
      прецизионное извлечение отдельных металлов: создание экологических схем переработки компьютерного лома;
      создание экологически чистых компьютеров.
     Важной задачей является также переработка медных проводов и кабелей, так как более одной трети меди идет на производство проводов.
     Лучшим способом разделки проводов можно считать отделение изоляции от проволоки механическим способом. С помощью грануляторов специальной конструкции удовлетворительно решена проблема отделения термоплавкой и резиновой изоляции. Установка пригодна для переработки проволоки, изолированной термопластом и бумагой. Установка не пригодна для некоторых типов проводов, изолированных хлопчатобумажной тканью, для табелей со свинцовой оболочкой и для всех сортов изоляции, которая прилипает к проводу так, что не отделяется от металла даже при очень тонкой грануляции. При переработке проводов, у которых разделение изоляции и меди осуществляется удовлетворительно и почти без потерь получается термопласт, который может служить сырьем для изготовления менее ответственных деталей. Если между проводами, изолированными термопластом, есть изоляция из ткани, ее можно удалить из смеси кусков меди и изоляции с помощью отсасывающего устройства.
     Переработку промышленных отходов производят на специальных полигонах, создаваемых в соответствии с требованиями СНиП 2.01.28-85 и предназначенных для централизованного сбора обезвреживания и захоронения токсичных отходов промышленных предприятий, НИИ и учреждений.
     
     


    Заключение
    
    
     В рамках выполнения выпускной квалификационной работы было разработано техническое задание на создание информационной системы автоматизации деятельности депо – ИС «ДЕПО». В рамках этого задания разработана функциональная модель предметной области в нотации IDEF0 и определены функциональные требования к информационной системе. Функциональные требования представлены в том числе и в виде диаграммы вариантов использования в нотации UML.
     В ходе практической части работы были решены следующие задачи:
      разработан проект информационного обеспечения ИС «ДЕПО» (базы данных) с применением CASE-системы Sparx Enterprise Architect версии 15.0 с поддержкой технологии forwarddatabase-engineering, СУБД MySQL 8.0, системы разработки функций базы данных HeidiSQL;
      разработан пользовательский интерфейс информационной системы автоматизации деятельности депо – ИС «ДЕПО»;
      разработана структурная модель системы, которая обеспечила гибкость и модульность построения системы, в которой для интерфейса пользователя выделен отдельный слой – представления;
      разработано программное обеспечение информационной системы ИС «ДЕПО».
     В качестве языка программирования был выбран язык программирования высокого уровня C#. Средой программирования была определена Visual Studio 2019. Для реализации необходимого функционала достаточно поддержки версии 4.7.1 фреймворка .NET. 
     Интерфейс системы выполнен на стандартных компонентах интерфейсов Windows Forms, поэтому никаких дополнительных спецификаций для пользователей системы не предусматривается.
     Средствами интерфейса совместно с программным кодом обеспечены функции:
      взаимодействия с базой данных;
      верификации ввода данных;
      составления отчетной документации;
      делегирование полномочий разным типам пользователей.
     Функции пользовательского интерфейса были протестированы. Все тесты успешно 
     Таким образов, все задачи, определенный в рамках настоящей работы, были выполнены, а ее цель – достигнута.
      



